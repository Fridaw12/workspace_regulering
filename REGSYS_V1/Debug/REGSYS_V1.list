
REGSYS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009624  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009854  08009854  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009854  08009854  00019854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800985c  0800985c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800985c  0800985c  0001985c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009860  08009860  00019860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000084  080098e8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  080098e8  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8f1  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033bc  00000000  00000000  0003d9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00040d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  00042640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212e2  00000000  00000000  00043db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e795  00000000  00000000  0006509a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d19d7  00000000  00000000  0008382f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bdc  00000000  00000000  00155258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000084 	.word	0x20000084
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080097e4 	.word	0x080097e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000088 	.word	0x20000088
 8000214:	080097e4 	.word	0x080097e4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab8:	f000 b974 	b.w	8000da4 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	4604      	mov	r4, r0
 8000adc:	468e      	mov	lr, r1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d14d      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae2:	428a      	cmp	r2, r1
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	d969      	bls.n	8000bbc <__udivmoddi4+0xe8>
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	b152      	cbz	r2, 8000b04 <__udivmoddi4+0x30>
 8000aee:	fa01 f302 	lsl.w	r3, r1, r2
 8000af2:	f1c2 0120 	rsb	r1, r2, #32
 8000af6:	fa20 f101 	lsr.w	r1, r0, r1
 8000afa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afe:	ea41 0e03 	orr.w	lr, r1, r3
 8000b02:	4094      	lsls	r4, r2
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	0c21      	lsrs	r1, r4, #16
 8000b0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b0e:	fa1f f78c 	uxth.w	r7, ip
 8000b12:	fb08 e316 	mls	r3, r8, r6, lr
 8000b16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b1a:	fb06 f107 	mul.w	r1, r6, r7
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b2a:	f080 811f 	bcs.w	8000d6c <__udivmoddi4+0x298>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 811c 	bls.w	8000d6c <__udivmoddi4+0x298>
 8000b34:	3e02      	subs	r6, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b40:	fb08 3310 	mls	r3, r8, r0, r3
 8000b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b48:	fb00 f707 	mul.w	r7, r0, r7
 8000b4c:	42a7      	cmp	r7, r4
 8000b4e:	d90a      	bls.n	8000b66 <__udivmoddi4+0x92>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b58:	f080 810a 	bcs.w	8000d70 <__udivmoddi4+0x29c>
 8000b5c:	42a7      	cmp	r7, r4
 8000b5e:	f240 8107 	bls.w	8000d70 <__udivmoddi4+0x29c>
 8000b62:	4464      	add	r4, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6a:	1be4      	subs	r4, r4, r7
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	b11d      	cbz	r5, 8000b78 <__udivmoddi4+0xa4>
 8000b70:	40d4      	lsrs	r4, r2
 8000b72:	2300      	movs	r3, #0
 8000b74:	e9c5 4300 	strd	r4, r3, [r5]
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0xc2>
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	f000 80ef 	beq.w	8000d66 <__udivmoddi4+0x292>
 8000b88:	2600      	movs	r6, #0
 8000b8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8e:	4630      	mov	r0, r6
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	fab3 f683 	clz	r6, r3
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d14a      	bne.n	8000c34 <__udivmoddi4+0x160>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xd4>
 8000ba2:	4282      	cmp	r2, r0
 8000ba4:	f200 80f9 	bhi.w	8000d9a <__udivmoddi4+0x2c6>
 8000ba8:	1a84      	subs	r4, r0, r2
 8000baa:	eb61 0303 	sbc.w	r3, r1, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d0e0      	beq.n	8000b78 <__udivmoddi4+0xa4>
 8000bb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bba:	e7dd      	b.n	8000b78 <__udivmoddi4+0xa4>
 8000bbc:	b902      	cbnz	r2, 8000bc0 <__udivmoddi4+0xec>
 8000bbe:	deff      	udf	#255	; 0xff
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	f040 8092 	bne.w	8000cee <__udivmoddi4+0x21a>
 8000bca:	eba1 010c 	sub.w	r1, r1, ip
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2601      	movs	r6, #1
 8000bd8:	0c20      	lsrs	r0, r4, #16
 8000bda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bde:	fb07 1113 	mls	r1, r7, r3, r1
 8000be2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be6:	fb0e f003 	mul.w	r0, lr, r3
 8000bea:	4288      	cmp	r0, r1
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x12c>
 8000bee:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x12a>
 8000bf8:	4288      	cmp	r0, r1
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2c0>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	1a09      	subs	r1, r1, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c08:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x156>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x154>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2ca>
 8000c28:	4608      	mov	r0, r1
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c32:	e79c      	b.n	8000b6e <__udivmoddi4+0x9a>
 8000c34:	f1c6 0720 	rsb	r7, r6, #32
 8000c38:	40b3      	lsls	r3, r6
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa20 f407 	lsr.w	r4, r0, r7
 8000c46:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4a:	431c      	orrs	r4, r3
 8000c4c:	40f9      	lsrs	r1, r7
 8000c4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c52:	fa00 f306 	lsl.w	r3, r0, r6
 8000c56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c5a:	0c20      	lsrs	r0, r4, #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fb09 1118 	mls	r1, r9, r8, r1
 8000c64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c68:	fb08 f00e 	mul.w	r0, r8, lr
 8000c6c:	4288      	cmp	r0, r1
 8000c6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b8>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2bc>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2bc>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1a09      	subs	r1, r1, r0
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c94:	fb09 1110 	mls	r1, r9, r0, r1
 8000c98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	458e      	cmp	lr, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1e2>
 8000ca4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2b4>
 8000cae:	458e      	cmp	lr, r1
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2b4>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4461      	add	r1, ip
 8000cb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cba:	fba0 9402 	umull	r9, r4, r0, r2
 8000cbe:	eba1 010e 	sub.w	r1, r1, lr
 8000cc2:	42a1      	cmp	r1, r4
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46a6      	mov	lr, r4
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x2a4>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x2a0>
 8000ccc:	b15d      	cbz	r5, 8000ce6 <__udivmoddi4+0x212>
 8000cce:	ebb3 0208 	subs.w	r2, r3, r8
 8000cd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cda:	fa22 f306 	lsr.w	r3, r2, r6
 8000cde:	40f1      	lsrs	r1, r6
 8000ce0:	431f      	orrs	r7, r3
 8000ce2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	40d8      	lsrs	r0, r3
 8000cf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4301      	orrs	r1, r0
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d10:	0c0b      	lsrs	r3, r1, #16
 8000d12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d16:	fb00 f60e 	mul.w	r6, r0, lr
 8000d1a:	429e      	cmp	r6, r3
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x260>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b8>
 8000d2c:	429e      	cmp	r6, r3
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b8>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	1b9b      	subs	r3, r3, r6
 8000d36:	b289      	uxth	r1, r1
 8000d38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb06 f30e 	mul.w	r3, r6, lr
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x28a>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2b0>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2b0>
 8000d5a:	3e02      	subs	r6, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	1ac9      	subs	r1, r1, r3
 8000d60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0x104>
 8000d66:	462e      	mov	r6, r5
 8000d68:	4628      	mov	r0, r5
 8000d6a:	e705      	b.n	8000b78 <__udivmoddi4+0xa4>
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	e6e3      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e6f8      	b.n	8000b66 <__udivmoddi4+0x92>
 8000d74:	454b      	cmp	r3, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f8>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d80:	3801      	subs	r0, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f8>
 8000d84:	4646      	mov	r6, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x28a>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1e2>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x260>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b8>
 8000d94:	3b02      	subs	r3, #2
 8000d96:	4461      	add	r1, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x12c>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e709      	b.n	8000bb2 <__udivmoddi4+0xde>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x156>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <STTS75_Init>:
#include "STTS75.h"
#include "stm32g4xx_hal_i2c.h"
#include "stm32g4xx_hal.h"

void STTS75_Init(STTS75 *sensor, I2C_HandleTypeDef *hi2c, uint32_t resolution)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
    STTS75_StatusTypeDef retval = STTS75_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	75fb      	strb	r3, [r7, #23]
    sensor->hi2c = hi2c;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	601a      	str	r2, [r3, #0]

    if (resolution != STTS75_9BIT)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <STTS75_Init+0x24>
    {
        STTS75_Write_Bitsize(sensor, resolution);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 f8ac 	bl	8000f24 <STTS75_Write_Bitsize>
    }

}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <STTS75_Read_Regsiter>:
STTS75_StatusTypeDef STTS75_Read_Regsiter(STTS75 *sensor, uint8_t reg, uint8_t *rx_buf)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	72fb      	strb	r3, [r7, #11]
    return (STTS75_StatusTypeDef) HAL_I2C_Mem_Read(sensor->hi2c, STTS75_I2C_AD_reg, reg, 1, rx_buf, 1, 1000);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	7afb      	ldrb	r3, [r7, #11]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	2190      	movs	r1, #144	; 0x90
 8000dfc:	f005 fa78 	bl	80062f0 <HAL_I2C_Mem_Read>
 8000e00:	4603      	mov	r3, r0
    //
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <STTS75_Read_Temp>:

STTS75_StatusTypeDef STTS75_Read_Temp(STTS75 *sensor)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af04      	add	r7, sp, #16
 8000e12:	6078      	str	r0, [r7, #4]
    STTS75_StatusTypeDef retval;
    sensor->error = 0x00;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	771a      	strb	r2, [r3, #28]

    //reg-kort
    uint8_t rx_buf[2];
    retval = ( STTS75_StatusTypeDef)HAL_I2C_Mem_Read(sensor->hi2c, STTS75_I2C_AD_reg, STTS75_TEMP_REG, 1, rx_buf, 2, 1000);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2302      	movs	r3, #2
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2200      	movs	r2, #0
 8000e32:	2190      	movs	r1, #144	; 0x90
 8000e34:	f005 fa5c 	bl	80062f0 <HAL_I2C_Mem_Read>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]

    if (retval != STTS75_OK) {
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d004      	beq.n	8000e4c <STTS75_Read_Temp+0x40>
    	sensor->error = 0xC8U;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	22c8      	movs	r2, #200	; 0xc8
 8000e46:	771a      	strb	r2, [r3, #28]
    	return retval;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	e063      	b.n	8000f14 <STTS75_Read_Temp+0x108>
    }
    sensor->temp_raw = rx_buf[0] << 8 | rx_buf[1];
 8000e4c:	7b3b      	ldrb	r3, [r7, #12]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	7b7b      	ldrb	r3, [r7, #13]
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	809a      	strh	r2, [r3, #4]
    sensor->temp_degc_reg = (float) (sensor->temp_raw / 256.0f)*100;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000f1c <STTS75_Read_Temp+0x110>
 8000e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e74:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000f20 <STTS75_Read_Temp+0x114>
 8000e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edc3 7a02 	vstr	s15, [r3, #8]

    //denne verdien logges på til CAN og COM
    sensor->temp_16bit_reg =(uint16_t) ((sensor->temp_degc_reg));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8c:	ee17 3a90 	vmov	r3, s15
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	821a      	strh	r2, [r3, #16]
    //driv-kort

    // ( Dersom får error: statusen til STTS75_StatusTypeDef er 1 )
    // retval -> returvalue

    retval = ( STTS75_StatusTypeDef)HAL_I2C_Mem_Read(sensor->hi2c, STTS75_I2C_AD_driv, STTS75_TEMP_REG, 1, rx_buf, 2, 1000);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2200      	movs	r2, #0
 8000eae:	2192      	movs	r1, #146	; 0x92
 8000eb0:	f005 fa1e 	bl	80062f0 <HAL_I2C_Mem_Read>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]

    if (retval != STTS75_OK) {
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <STTS75_Read_Temp+0xbc>
    	sensor->error = 0xC8U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	22c8      	movs	r2, #200	; 0xc8
 8000ec2:	771a      	strb	r2, [r3, #28]
    	return retval;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	e025      	b.n	8000f14 <STTS75_Read_Temp+0x108>
    }
    sensor->temp_raw = rx_buf[0] << 8 | rx_buf[1];
 8000ec8:	7b3b      	ldrb	r3, [r7, #12]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	809a      	strh	r2, [r3, #4]
    sensor->temp_degc_driv = (float) (sensor->temp_raw / 256.0f)*100;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000f1c <STTS75_Read_Temp+0x110>
 8000eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000f20 <STTS75_Read_Temp+0x114>
 8000ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	edc3 7a03 	vstr	s15, [r3, #12]

    //denne verdien logges på til CAN og COM
    sensor->temp_16bit_driv =(uint16_t) ((sensor->temp_degc_driv));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f08:	ee17 3a90 	vmov	r3, s15
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	825a      	strh	r2, [r3, #18]

    return retval;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	43800000 	.word	0x43800000
 8000f20:	42c80000 	.word	0x42c80000

08000f24 <STTS75_Write_Bitsize>:


STTS75_StatusTypeDef STTS75_Write_Bitsize(STTS75 *sensor, uint32_t resolution)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af04      	add	r7, sp, #16
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	STTS75_StatusTypeDef retval = STTS75_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
	uint8_t bits_in_config_reg;
	uint8_t look_in_conf_reg;

	// 1.
	//read to confirm bit size change
	retval = STTS75_Read_Regsiter(sensor, STTS75_CONFIG_REG, &look_in_conf_reg);
 8000f32:	f107 030d 	add.w	r3, r7, #13
 8000f36:	461a      	mov	r2, r3
 8000f38:	2101      	movs	r1, #1
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff4a 	bl	8000dd4 <STTS75_Read_Regsiter>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
	if (retval != STTS75_OK) return retval;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <STTS75_Write_Bitsize+0x2a>
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	e039      	b.n	8000fc2 <STTS75_Write_Bitsize+0x9e>
	sensor->config_register = look_in_conf_reg;
 8000f4e:	7b7a      	ldrb	r2, [r7, #13]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	755a      	strb	r2, [r3, #21]


	//HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	bits_in_config_reg &= ~(0x03 << 5); //settter de to config register bits til 0 ved '&' med ~0x03<<5 = 110011111
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73bb      	strb	r3, [r7, #14]
	bits_in_config_reg |= resolution; // gjør en eller operasjon for å fylle de to plassene med ønsket bit
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	73bb      	strb	r3, [r7, #14]


	//2.
	retval = (STTS75_StatusTypeDef) HAL_I2C_Mem_Write(sensor->hi2c, 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	f107 030e 	add.w	r3, r7, #14
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2201      	movs	r2, #1
 8000f82:	2190      	movs	r1, #144	; 0x90
 8000f84:	f005 f8a0 	bl	80060c8 <HAL_I2C_Mem_Write>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
            STTS75_WRITE,STTS75_CONFIG_REG, 1, 
            &bits_in_config_reg, 1, 1000);

	if (retval != STTS75_OK) return retval;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <STTS75_Write_Bitsize+0x72>
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	e015      	b.n	8000fc2 <STTS75_Write_Bitsize+0x9e>


	//3.
	//read to confirm bit size change
	retval = STTS75_Read_Regsiter(sensor, STTS75_CONFIG_REG, &look_in_conf_reg);
 8000f96:	f107 030d 	add.w	r3, r7, #13
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff18 	bl	8000dd4 <STTS75_Read_Regsiter>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	if (retval != STTS75_OK) return retval;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <STTS75_Write_Bitsize+0x8e>
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	e007      	b.n	8000fc2 <STTS75_Write_Bitsize+0x9e>

	//sensor->bit size = choose_bit;
	sensor->config_register = look_in_conf_reg;
 8000fb2:	7b7a      	ldrb	r2, [r7, #13]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	755a      	strb	r2, [r3, #21]
	sensor->bitsize = resolution;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	751a      	strb	r2, [r3, #20]
	return retval;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <manipulator_data_lagring>:
#include "math.h"

/////////////////////////// MANIPULATOR-STYRING


void manipulator_data_lagring(void){
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
	 operator_manpu_forrige1.gripe =  operator_manpu.gripe;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <manipulator_data_lagring+0x8c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a21      	ldr	r2, [pc, #132]	; (800105c <manipulator_data_lagring+0x90>)
 8000fd8:	6013      	str	r3, [r2, #0]
	 operator_manpu_forrige1.snurr = operator_manpu.snurr;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <manipulator_data_lagring+0x8c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <manipulator_data_lagring+0x90>)
 8000fe0:	6053      	str	r3, [r2, #4]
	 operator_manpu_forrige1.sving = operator_manpu.sving;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <manipulator_data_lagring+0x8c>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <manipulator_data_lagring+0x90>)
 8000fe8:	6093      	str	r3, [r2, #8]
	 operator_manpu_forrige1.skyv = operator_manpu.skyv;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <manipulator_data_lagring+0x8c>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <manipulator_data_lagring+0x90>)
 8000ff0:	60d3      	str	r3, [r2, #12]

	 operator_manpu_forrige1_int.gripe = (int8_t) operator_manpu_forrige1.gripe;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <manipulator_data_lagring+0x90>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001000:	793b      	ldrb	r3, [r7, #4]
 8001002:	b25a      	sxtb	r2, r3
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <manipulator_data_lagring+0x94>)
 8001006:	701a      	strb	r2, [r3, #0]
	 operator_manpu_forrige1_int.snurr = (int8_t) operator_manpu_forrige1.snurr;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <manipulator_data_lagring+0x90>)
 800100a:	edd3 7a01 	vldr	s15, [r3, #4]
 800100e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001012:	edc7 7a01 	vstr	s15, [r7, #4]
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	b25a      	sxtb	r2, r3
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <manipulator_data_lagring+0x94>)
 800101c:	705a      	strb	r2, [r3, #1]
	 operator_manpu_forrige1_int.sving = (int8_t) operator_manpu_forrige1.sving;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <manipulator_data_lagring+0x90>)
 8001020:	edd3 7a02 	vldr	s15, [r3, #8]
 8001024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001028:	edc7 7a01 	vstr	s15, [r7, #4]
 800102c:	793b      	ldrb	r3, [r7, #4]
 800102e:	b25a      	sxtb	r2, r3
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <manipulator_data_lagring+0x94>)
 8001032:	709a      	strb	r2, [r3, #2]
	 operator_manpu_forrige1_int.skyv =  (int8_t) operator_manpu_forrige1.skyv;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <manipulator_data_lagring+0x90>)
 8001036:	edd3 7a03 	vldr	s15, [r3, #12]
 800103a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001042:	793b      	ldrb	r3, [r7, #4]
 8001044:	b25a      	sxtb	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <manipulator_data_lagring+0x94>)
 8001048:	70da      	strb	r2, [r3, #3]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001a4 	.word	0x200001a4
 800105c:	200001b4 	.word	0x200001b4
 8001060:	200001c8 	.word	0x200001c8

08001064 <sjekk_for_forskjellig_fortegn>:

// funksjon for sjekking av fortegn til manipulatorvariabel
// slik at ikke skriver til pinne for rotasjonsretning unødvendig

uint8_t sjekk_for_forskjellig_fortegn(int8_t var_naa,int8_t var_forrige){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
	// return 1 trenger ikke skrive til pinne for rotasjonsretning
	if((var_naa > 0) & (var_forrige > 0)){
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	bfcc      	ite	gt
 800107c:	2301      	movgt	r3, #1
 800107e:	2300      	movle	r3, #0
 8001080:	b2da      	uxtb	r2, r3
 8001082:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bfcc      	ite	gt
 800108a:	2301      	movgt	r3, #1
 800108c:	2300      	movle	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4013      	ands	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <sjekk_for_forskjellig_fortegn+0x38>
		return 1;
 8001098:	2301      	movs	r3, #1
 800109a:	e05c      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa < 0) & (var_forrige < 0)){
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	09db      	lsrs	r3, r3, #7
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	09db      	lsrs	r3, r3, #7
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <sjekk_for_forskjellig_fortegn+0x50>
		return 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e050      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa < 0) & (var_forrige > 0)){
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	09db      	lsrs	r3, r3, #7
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bfcc      	ite	gt
 80010c2:	2301      	movgt	r3, #1
 80010c4:	2300      	movle	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4013      	ands	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <sjekk_for_forskjellig_fortegn+0x70>
		return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e040      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa > 0) & (var_forrige < 0)){
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfcc      	ite	gt
 80010dc:	2301      	movgt	r3, #1
 80010de:	2300      	movle	r3, #0
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	09db      	lsrs	r3, r3, #7
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <sjekk_for_forskjellig_fortegn+0x90>
		return 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e030      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa == 0) & (var_forrige != 0)){
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2da      	uxtb	r2, r3
 8001102:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4013      	ands	r3, r2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <sjekk_for_forskjellig_fortegn+0xb8>
			return 0;
 8001118:	2300      	movs	r3, #0
 800111a:	e01c      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa != 0) & (var_forrige == 0)){
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2da      	uxtb	r2, r3
 800112a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4013      	ands	r3, r2
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <sjekk_for_forskjellig_fortegn+0xe0>
			return 10;
 8001140:	230a      	movs	r3, #10
 8001142:	e008      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa == 0) & (var_forrige == 0)){
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	4313      	orrs	r3, r2
 800114a:	b25b      	sxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <sjekk_for_forskjellig_fortegn+0xf0>
			return 0;
 8001150:	2300      	movs	r3, #0
 8001152:	e000      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else{
		return 13;
 8001154:	230d      	movs	r3, #13
	}
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <sett_rotasjonsretning>:

// funksjon for å skrive til pinne for å endre rotasjonsretning
void sett_rotasjonsretning(float manpulator_variabel,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	ed87 0a03 	vstr	s0, [r7, #12]
 800116c:	60b8      	str	r0, [r7, #8]
 800116e:	460b      	mov	r3, r1
 8001170:	80fb      	strh	r3, [r7, #6]
    if(manpulator_variabel > 0){
 8001172:	edd7 7a03 	vldr	s15, [r7, #12]
 8001176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	dd06      	ble.n	800118e <sett_rotasjonsretning+0x2c>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET); // én retning
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	2201      	movs	r2, #1
 8001184:	4619      	mov	r1, r3
 8001186:	68b8      	ldr	r0, [r7, #8]
 8001188:	f004 fef6 	bl	8005f78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);// annen retning
    }
    else{
        //
    }
}
 800118c:	e00d      	b.n	80011aa <sett_rotasjonsretning+0x48>
    else if(manpulator_variabel < 0){
 800118e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119a:	d400      	bmi.n	800119e <sett_rotasjonsretning+0x3c>
}
 800119c:	e005      	b.n	80011aa <sett_rotasjonsretning+0x48>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);// annen retning
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	68b8      	ldr	r0, [r7, #8]
 80011a6:	f004 fee7 	bl	8005f78 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	0000      	movs	r0, r0
 80011b4:	0000      	movs	r0, r0
	...

080011b8 <beregn_ARR>:
// funksjon for endring av rotasjonshastighet, beregner verdi som skal skrives til AAR register
// verdien til manpulator_variabel [0-100] og maks_frek bestemmer rotasjonshastighet
// NB: velg maks_frek og sensitivitet
// brukes ikke i prosjektet, da ble bestemt at hastigheten ikke skal kunne reguleres

uint16_t beregn_ARR(float manpulator_variabel,float maks_frek, float sensitivitet){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0a03 	vstr	s0, [r7, #12]
 80011c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80011c6:	ed87 1a01 	vstr	s2, [r7, #4]
    // NUM er startverdi for å få maksimal frekvens
	float NUM = (1/maks_frek) / 0.000001;
 80011ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011d6:	ee16 0a90 	vmov	r0, s13
 80011da:	f7ff f981 	bl	80004e0 <__aeabi_f2d>
 80011de:	a320      	add	r3, pc, #128	; (adr r3, 8001260 <beregn_ARR+0xa8>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fafe 	bl	80007e4 <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc08 	bl	8000a04 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	61fb      	str	r3, [r7, #28]
	// 65535 er maks telleverdi for 16-bits register
	// telleverdi 65535 gir min frek, telleverdi NUM gir maks frek
	// a: lineær sammenheng [min-maks - frek] og [0-100]
    float a = ( -(65535-NUM) / 100);
 80011f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001258 <beregn_ARR+0xa0>
 80011fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	eeb1 7a67 	vneg.f32	s14, s15
 8001208:	eddf 6a14 	vldr	s13, [pc, #80]	; 800125c <beregn_ARR+0xa4>
 800120c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001210:	edc7 7a06 	vstr	s15, [r7, #24]

    float manpu_var = fabsf(manpulator_variabel)*sensitivitet;
 8001214:	edd7 7a03 	vldr	s15, [r7, #12]
 8001218:	eef0 7ae7 	vabs.f32	s15, s15
 800121c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	edc7 7a05 	vstr	s15, [r7, #20]

    // beregner AAR verdi
    float ARR = (manpu_var*a) + 65535.0;
 8001228:	ed97 7a05 	vldr	s14, [r7, #20]
 800122c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001258 <beregn_ARR+0xa0>
 8001238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800123c:	edc7 7a04 	vstr	s15, [r7, #16]
    return (uint16_t) ARR;
 8001240:	edd7 7a04 	vldr	s15, [r7, #16]
 8001244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001248:	ee17 3a90 	vmov	r3, s15
 800124c:	b29b      	uxth	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	477fff00 	.word	0x477fff00
 800125c:	42c80000 	.word	0x42c80000
 8001260:	a0b5ed8d 	.word	0xa0b5ed8d
 8001264:	3eb0c6f7 	.word	0x3eb0c6f7

08001268 <beregn_CCR_snurr>:

// funksjon som beregner verdi som skal skrives til AAR register for ønsket frekvens
// modifisert
uint16_t beregn_CCR_snurr(float manpulator_variabel,float maks_bredde, float sensitivitet){
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001272:	edc7 0a02 	vstr	s1, [r7, #8]
 8001276:	ed87 1a01 	vstr	s2, [r7, #4]
    float a = ((maks_bredde - 1500)) /100;
 800127a:	edd7 7a02 	vldr	s15, [r7, #8]
 800127e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80012f8 <beregn_CCR_snurr+0x90>
 8001282:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001286:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80012fc <beregn_CCR_snurr+0x94>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	edc7 7a06 	vstr	s15, [r7, #24]
    float bredde;
    float manpu_var = manpulator_variabel*sensitivitet;
 8001292:	ed97 7a03 	vldr	s14, [r7, #12]
 8001296:	edd7 7a01 	vldr	s15, [r7, #4]
 800129a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129e:	edc7 7a05 	vstr	s15, [r7, #20]

    if ( (manpu_var>0) || (manpu_var<0) ){
 80012a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	dc06      	bgt.n	80012be <beregn_CCR_snurr+0x56>
 80012b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d50c      	bpl.n	80012d8 <beregn_CCR_snurr+0x70>
        bredde = manpu_var*a + 1500;
 80012be:	ed97 7a05 	vldr	s14, [r7, #20]
 80012c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80012f8 <beregn_CCR_snurr+0x90>
 80012ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d2:	edc7 7a07 	vstr	s15, [r7, #28]
 80012d6:	e001      	b.n	80012dc <beregn_CCR_snurr+0x74>
    }
    else{
        bredde = 1500;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <beregn_CCR_snurr+0x98>)
 80012da:	61fb      	str	r3, [r7, #28]
    }
    return (int16_t) bredde;
 80012dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e4:	ee17 3a90 	vmov	r3, s15
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	b29b      	uxth	r3, r3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3724      	adds	r7, #36	; 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	44bb8000 	.word	0x44bb8000
 80012fc:	42c80000 	.word	0x42c80000
 8001300:	44bb8000 	.word	0x44bb8000

08001304 <behandle_gripe>:
// funksjon for styring av manipulatorledd
// behandle_gripe(), behandle_skyv(), behandle_sving() er kopier av hverandre med tanke på logikk.
// maks_frekvens kan være ulik
// NB; ENDRE_FREKVENS er satt til 1, hastigheten på manipulatorledd skal ikke kunne reguleres

void behandle_gripe(void){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
	//// først sjekke om 0 (dersom under 1 eller -1 regnes som 0 her)

	// ignorer denne del
	//!(ENDRE_FREKVENS & 0x02)
	if(ENDRE_FREKVENS){
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <behandle_gripe+0xe8>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d012      	beq.n	8001338 <behandle_gripe+0x34>
/*
 	 	float a = lowpass_manpu_steg.a;
		operator_manpu.gripe = (1-a)*operator_manpu_forrige1.gripe + a*operator_manpu.gripe ;
*/

		manu_ARR.gripe = beregn_ARR(operator_manpu.gripe,1100, manpu_sensitivitet.gripe);
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <behandle_gripe+0xec>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <behandle_gripe+0xf0>)
 800131a:	ed93 7a00 	vldr	s14, [r3]
 800131e:	eeb0 1a47 	vmov.f32	s2, s14
 8001322:	eddf 0a35 	vldr	s1, [pc, #212]	; 80013f8 <behandle_gripe+0xf4>
 8001326:	eeb0 0a67 	vmov.f32	s0, s15
 800132a:	f7ff ff45 	bl	80011b8 <beregn_ARR>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <behandle_gripe+0xf8>)
 8001334:	801a      	strh	r2, [r3, #0]
 8001336:	e025      	b.n	8001384 <behandle_gripe+0x80>

	// blir brukt
	else{
		/// default paadrag
		/// uansett verdi fra stikke, samme paadrag
		if(operator_manpu.gripe > 0){
 8001338:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <behandle_gripe+0xec>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	dd03      	ble.n	8001350 <behandle_gripe+0x4c>
			operator_manpu.gripe = 100;
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <behandle_gripe+0xec>)
 800134a:	4a2d      	ldr	r2, [pc, #180]	; (8001400 <behandle_gripe+0xfc>)
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e00a      	b.n	8001366 <behandle_gripe+0x62>
		}
		else if(operator_manpu.gripe < 0){
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <behandle_gripe+0xec>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	d502      	bpl.n	8001366 <behandle_gripe+0x62>
			operator_manpu.gripe = -100;
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <behandle_gripe+0xec>)
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <behandle_gripe+0x100>)
 8001364:	601a      	str	r2, [r3, #0]
 	 	float a = lowpass_manpu_steg.a;
		operator_manpu.gripe = (1-a)*operator_manpu_forrige1.gripe + a*operator_manpu.gripe ;

*/
		// her maks frekvens bare satt til (..), kan endre
		manu_ARR.gripe = beregn_ARR(operator_manpu.gripe, 1100, 1.0);
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <behandle_gripe+0xec>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001370:	eddf 0a21 	vldr	s1, [pc, #132]	; 80013f8 <behandle_gripe+0xf4>
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	f7ff ff1e 	bl	80011b8 <beregn_ARR>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <behandle_gripe+0xf8>)
 8001382:	801a      	strh	r2, [r3, #0]
	}

	uint8_t sjekk_var = sjekk_for_forskjellig_fortegn(operator_manpu_int.gripe,operator_manpu_forrige1_int.gripe);
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <behandle_gripe+0x104>)
 8001386:	f993 3000 	ldrsb.w	r3, [r3]
 800138a:	4a20      	ldr	r2, [pc, #128]	; (800140c <behandle_gripe+0x108>)
 800138c:	f992 2000 	ldrsb.w	r2, [r2]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe66 	bl	8001064 <sjekk_for_forskjellig_fortegn>
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]

	if(sjekk_var){
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d019      	beq.n	80013d6 <behandle_gripe+0xd2>
		// rotasjonsretning blir bare satt dersom forrige verdi var 0.
		if(sjekk_var == 10){
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d109      	bne.n	80013bc <behandle_gripe+0xb8>
			// PC12 grip flipp
			sett_rotasjonsretning(operator_manpu.gripe,GPIOC,GPIO_PIN_11);
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <behandle_gripe+0xec>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b2:	4817      	ldr	r0, [pc, #92]	; (8001410 <behandle_gripe+0x10c>)
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	f7ff fed3 	bl	8001162 <sett_rotasjonsretning>
		}

		/// skriv til timer registere
		TIM16 -> ARR = manu_ARR.gripe - 1 ;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <behandle_gripe+0xf8>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <behandle_gripe+0x110>)
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM16 -> CCR1 = (manu_ARR.gripe/2) - 1 ; // PA4 gripe TIM3_CH2
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <behandle_gripe+0xf8>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	1e5a      	subs	r2, r3, #1
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <behandle_gripe+0x110>)
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.gripe = 0;
		//TIM3 -> ARR = 4999 ;
		//TIM3 -> CCR2 = 2499 ;
	}

}
 80013d4:	e006      	b.n	80013e4 <behandle_gripe+0xe0>
		TIM16 -> CCR1 = 0; // NB BYTTET TIMER MED SKYV
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <behandle_gripe+0x110>)
 80013d8:	2200      	movs	r2, #0
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.gripe = 0;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <behandle_gripe+0xec>)
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	200001a4 	.word	0x200001a4
 80013f4:	20000058 	.word	0x20000058
 80013f8:	44898000 	.word	0x44898000
 80013fc:	200001cc 	.word	0x200001cc
 8001400:	42c80000 	.word	0x42c80000
 8001404:	c2c80000 	.word	0xc2c80000
 8001408:	200001c4 	.word	0x200001c4
 800140c:	200001c8 	.word	0x200001c8
 8001410:	48000800 	.word	0x48000800
 8001414:	40014400 	.word	0x40014400

08001418 <behandle_sving>:

///// SVING ---
void behandle_sving(void){
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	//!(ENDRE_FREKVENS & 0x04)
	if(ENDRE_FREKVENS){
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <behandle_sving+0xe8>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d012      	beq.n	800144c <behandle_sving+0x34>
/*
		float a = lowpass_manpu_steg.a;
		operator_manpu.sving = (1-a)*operator_manpu_forrige1.sving + a*operator_manpu.sving;
*/

		manu_ARR.sving = beregn_ARR(operator_manpu.sving,800, manpu_sensitivitet.sving);
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <behandle_sving+0xec>)
 8001428:	edd3 7a02 	vldr	s15, [r3, #8]
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <behandle_sving+0xf0>)
 800142e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001432:	eeb0 1a47 	vmov.f32	s2, s14
 8001436:	eddf 0a35 	vldr	s1, [pc, #212]	; 800150c <behandle_sving+0xf4>
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	f7ff febb 	bl	80011b8 <beregn_ARR>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <behandle_sving+0xf8>)
 8001448:	809a      	strh	r2, [r3, #4]
 800144a:	e025      	b.n	8001498 <behandle_sving+0x80>
	}
	else{
		/// default paadrag
		/// uansett verdi fra stikke, samme paadrag
		if(operator_manpu.sving > 0){
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <behandle_sving+0xec>)
 800144e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001452:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	dd03      	ble.n	8001464 <behandle_sving+0x4c>
			operator_manpu.sving = 100;
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <behandle_sving+0xec>)
 800145e:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <behandle_sving+0xfc>)
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	e00a      	b.n	800147a <behandle_sving+0x62>
		}
		else if(operator_manpu.sving < 0){
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <behandle_sving+0xec>)
 8001466:	edd3 7a02 	vldr	s15, [r3, #8]
 800146a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	d502      	bpl.n	800147a <behandle_sving+0x62>
			operator_manpu.sving = -100;
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <behandle_sving+0xec>)
 8001476:	4a28      	ldr	r2, [pc, #160]	; (8001518 <behandle_sving+0x100>)
 8001478:	609a      	str	r2, [r3, #8]
/*
		float a = lowpass_manpu_steg.a;
		operator_manpu.sving = (1-a)*operator_manpu_forrige1.sving + a*operator_manpu.sving;
*/

		manu_ARR.sving = beregn_ARR(operator_manpu.sving, 800, 1.0);
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <behandle_sving+0xec>)
 800147c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001480:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001484:	eddf 0a21 	vldr	s1, [pc, #132]	; 800150c <behandle_sving+0xf4>
 8001488:	eeb0 0a67 	vmov.f32	s0, s15
 800148c:	f7ff fe94 	bl	80011b8 <beregn_ARR>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <behandle_sving+0xf8>)
 8001496:	809a      	strh	r2, [r3, #4]
	}

	uint8_t sjekk_var = sjekk_for_forskjellig_fortegn(operator_manpu_int.sving,operator_manpu_forrige1_int.sving);
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <behandle_sving+0x104>)
 800149a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800149e:	4a20      	ldr	r2, [pc, #128]	; (8001520 <behandle_sving+0x108>)
 80014a0:	f992 2002 	ldrsb.w	r2, [r2, #2]
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fddc 	bl	8001064 <sjekk_for_forskjellig_fortegn>
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]

	if(sjekk_var){
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d019      	beq.n	80014ea <behandle_sving+0xd2>
		// rotasjonsretning blir bare satt dersom forrige verdi var 0.
		if(sjekk_var == 10){
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b0a      	cmp	r3, #10
 80014ba:	d109      	bne.n	80014d0 <behandle_sving+0xb8>
			// PC10 sving flipp
			sett_rotasjonsretning(operator_manpu.sving,GPIOC,GPIO_PIN_10);
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <behandle_sving+0xec>)
 80014be:	edd3 7a02 	vldr	s15, [r3, #8]
 80014c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c6:	4817      	ldr	r0, [pc, #92]	; (8001524 <behandle_sving+0x10c>)
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	f7ff fe49 	bl	8001162 <sett_rotasjonsretning>
		}

		/// skriv til timer registere
		TIM15 -> ARR = manu_ARR.sving - 1 ;  // TIM15_CH1-PB14
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <behandle_sving+0xf8>)
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <behandle_sving+0x110>)
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM15 -> CCR1 = (manu_ARR.sving/2) - 1 ;
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <behandle_sving+0xf8>)
 80014dc:	889b      	ldrh	r3, [r3, #4]
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	1e5a      	subs	r2, r3, #1
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <behandle_sving+0x110>)
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.sving = 0;
		//TIM15 -> ARR = 4999 ;
		//TIM15 -> CCR1 = 2499 ;
	}

}
 80014e8:	e006      	b.n	80014f8 <behandle_sving+0xe0>
		TIM15 -> CCR1 = 0;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <behandle_sving+0x110>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.sving = 0;
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <behandle_sving+0xec>)
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	200001a4 	.word	0x200001a4
 8001508:	20000058 	.word	0x20000058
 800150c:	44480000 	.word	0x44480000
 8001510:	200001cc 	.word	0x200001cc
 8001514:	42c80000 	.word	0x42c80000
 8001518:	c2c80000 	.word	0xc2c80000
 800151c:	200001c4 	.word	0x200001c4
 8001520:	200001c8 	.word	0x200001c8
 8001524:	48000800 	.word	0x48000800
 8001528:	40014000 	.word	0x40014000

0800152c <behandle_skyv>:

///// SKYV - teleskop
void behandle_skyv(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	//!(ENDRE_FREKVENS & 0x08)
	if(ENDRE_FREKVENS){
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <behandle_skyv+0xe8>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d012      	beq.n	8001560 <behandle_skyv+0x34>
		float a = lowpass_manpu_steg.a;
		operator_manpu.skyv = (1-a)*operator_manpu_forrige1.skyv + a*operator_manpu.skyv;

*/

		manu_ARR.skyv = beregn_ARR(operator_manpu.skyv, 1100, manpu_sensitivitet.skyv);
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <behandle_skyv+0xec>)
 800153c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001540:	4b36      	ldr	r3, [pc, #216]	; (800161c <behandle_skyv+0xf0>)
 8001542:	ed93 7a03 	vldr	s14, [r3, #12]
 8001546:	eeb0 1a47 	vmov.f32	s2, s14
 800154a:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001620 <behandle_skyv+0xf4>
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	f7ff fe31 	bl	80011b8 <beregn_ARR>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	4b32      	ldr	r3, [pc, #200]	; (8001624 <behandle_skyv+0xf8>)
 800155c:	80da      	strh	r2, [r3, #6]
 800155e:	e025      	b.n	80015ac <behandle_skyv+0x80>
	}
	else{
		/// default paadrag
		/// uansett verdi fra stikke, samme paadrag
		if(operator_manpu.skyv > 0){
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <behandle_skyv+0xec>)
 8001562:	edd3 7a03 	vldr	s15, [r3, #12]
 8001566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	dd03      	ble.n	8001578 <behandle_skyv+0x4c>
			operator_manpu.skyv = 100;
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <behandle_skyv+0xec>)
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <behandle_skyv+0xfc>)
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	e00a      	b.n	800158e <behandle_skyv+0x62>
		}
		else if(operator_manpu.skyv < 0){
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <behandle_skyv+0xec>)
 800157a:	edd3 7a03 	vldr	s15, [r3, #12]
 800157e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	d502      	bpl.n	800158e <behandle_skyv+0x62>
			operator_manpu.skyv = -100;
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <behandle_skyv+0xec>)
 800158a:	4a28      	ldr	r2, [pc, #160]	; (800162c <behandle_skyv+0x100>)
 800158c:	60da      	str	r2, [r3, #12]

		float a = lowpass_manpu_steg.a;
		operator_manpu.skyv = (1-a)*operator_manpu_forrige1.skyv + a*operator_manpu.skyv;

*/
		manu_ARR.skyv = beregn_ARR(operator_manpu.skyv, 1100, 1.0);
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <behandle_skyv+0xec>)
 8001590:	edd3 7a03 	vldr	s15, [r3, #12]
 8001594:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001598:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001620 <behandle_skyv+0xf4>
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	f7ff fe0a 	bl	80011b8 <beregn_ARR>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <behandle_skyv+0xf8>)
 80015aa:	80da      	strh	r2, [r3, #6]
	}

	uint8_t sjekk_var = sjekk_for_forskjellig_fortegn(operator_manpu_int.skyv,operator_manpu_forrige1_int.skyv);
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <behandle_skyv+0x104>)
 80015ae:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <behandle_skyv+0x108>)
 80015b4:	f992 2003 	ldrsb.w	r2, [r2, #3]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd52 	bl	8001064 <sjekk_for_forskjellig_fortegn>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]

	if(sjekk_var){
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d019      	beq.n	80015fe <behandle_skyv+0xd2>
		// rotasjonsretning blir bare satt dersom forrige verdi var 0.
		if(sjekk_var == 10){
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	d109      	bne.n	80015e4 <behandle_skyv+0xb8>
			// PC11 skyv flipp
			sett_rotasjonsretning(operator_manpu.skyv,GPIOC,GPIO_PIN_12);
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <behandle_skyv+0xec>)
 80015d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80015d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015da:	4817      	ldr	r0, [pc, #92]	; (8001638 <behandle_skyv+0x10c>)
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	f7ff fdbf 	bl	8001162 <sett_rotasjonsretning>
		}

		/// skriv til timer registere
		TIM3 -> ARR = manu_ARR.skyv - 1 ;  // PB04 , TIM16_CH1
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <behandle_skyv+0xf8>)
 80015e6:	88db      	ldrh	r3, [r3, #6]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <behandle_skyv+0x110>)
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3 -> CCR2 = (manu_ARR.skyv/2) - 1 ;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <behandle_skyv+0xf8>)
 80015f0:	88db      	ldrh	r3, [r3, #6]
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <behandle_skyv+0x110>)
 80015fa:	639a      	str	r2, [r3, #56]	; 0x38
		operator_manpu.skyv = 0;
		//TIM16 -> ARR = 4999 ;
		//TIM16 -> CCR1 = 2499 ;
	}

}
 80015fc:	e006      	b.n	800160c <behandle_skyv+0xe0>
		TIM3 -> CCR2 = 0;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <behandle_skyv+0x110>)
 8001600:	2200      	movs	r2, #0
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
		operator_manpu.skyv = 0;
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <behandle_skyv+0xec>)
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	200001a4 	.word	0x200001a4
 800161c:	20000058 	.word	0x20000058
 8001620:	44898000 	.word	0x44898000
 8001624:	200001cc 	.word	0x200001cc
 8001628:	42c80000 	.word	0x42c80000
 800162c:	c2c80000 	.word	0xc2c80000
 8001630:	200001c4 	.word	0x200001c4
 8001634:	200001c8 	.word	0x200001c8
 8001638:	48000800 	.word	0x48000800
 800163c:	40000400 	.word	0x40000400

08001640 <behandle_snurr>:

//////////
////// SNURR - BØRSTELØS
void behandle_snurr(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 ///ENDRE_FREKVENS & 0x10
	if(ENDRE_FREKVENS){
 8001646:	4b48      	ldr	r3, [pc, #288]	; (8001768 <behandle_snurr+0x128>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d02c      	beq.n	80016a8 <behandle_snurr+0x68>
		// operator manpu gripe fra operator


 	 	float a = lowpass_manpu_borste.a;
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <behandle_snurr+0x12c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60bb      	str	r3, [r7, #8]
		operator_manpu.snurr = (1-a)*operator_manpu_forrige1.snurr + a*operator_manpu.snurr;
 8001654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001658:	edd7 7a02 	vldr	s15, [r7, #8]
 800165c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <behandle_snurr+0x130>)
 8001662:	edd3 7a01 	vldr	s15, [r3, #4]
 8001666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <behandle_snurr+0x134>)
 800166c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001670:	edd7 7a02 	vldr	s15, [r7, #8]
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167c:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <behandle_snurr+0x134>)
 800167e:	edc3 7a01 	vstr	s15, [r3, #4]


		manu_CCR.snurr = beregn_CCR_snurr(operator_manpu.snurr, 1900, manpu_sensitivitet.snurr);
 8001682:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <behandle_snurr+0x134>)
 8001684:	edd3 7a01 	vldr	s15, [r3, #4]
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <behandle_snurr+0x138>)
 800168a:	ed93 7a01 	vldr	s14, [r3, #4]
 800168e:	eeb0 1a47 	vmov.f32	s2, s14
 8001692:	eddf 0a3a 	vldr	s1, [pc, #232]	; 800177c <behandle_snurr+0x13c>
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	f7ff fde5 	bl	8001268 <beregn_CCR_snurr>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <behandle_snurr+0x140>)
 80016a4:	805a      	strh	r2, [r3, #2]
 80016a6:	e03f      	b.n	8001728 <behandle_snurr+0xe8>
	}
	else{
		/// default paadrag
		/// uansett verdi fra stikke, samme paadrag
		if(operator_manpu.snurr > 0){
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <behandle_snurr+0x134>)
 80016aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	dd03      	ble.n	80016c0 <behandle_snurr+0x80>
			operator_manpu.snurr = 100;
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <behandle_snurr+0x134>)
 80016ba:	4a32      	ldr	r2, [pc, #200]	; (8001784 <behandle_snurr+0x144>)
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	e00a      	b.n	80016d6 <behandle_snurr+0x96>
		}
		else if(operator_manpu.snurr < 0){
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <behandle_snurr+0x134>)
 80016c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d502      	bpl.n	80016d6 <behandle_snurr+0x96>
			operator_manpu.snurr = -100;
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <behandle_snurr+0x134>)
 80016d2:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <behandle_snurr+0x148>)
 80016d4:	605a      	str	r2, [r3, #4]
		}


 	 	float a = lowpass_manpu_borste.a;
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <behandle_snurr+0x12c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]
		operator_manpu.snurr = (1-a)*operator_manpu_forrige1.snurr + a*operator_manpu.snurr;
 80016dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <behandle_snurr+0x130>)
 80016ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <behandle_snurr+0x134>)
 80016f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80016f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <behandle_snurr+0x134>)
 8001706:	edc3 7a01 	vstr	s15, [r3, #4]


		// setter maks bredde som er fast til feks 1700, kan endres.
		manu_CCR.snurr = beregn_CCR_snurr(operator_manpu.snurr, 1900, 1.0);
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <behandle_snurr+0x134>)
 800170c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001710:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001714:	eddf 0a19 	vldr	s1, [pc, #100]	; 800177c <behandle_snurr+0x13c>
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f7ff fda4 	bl	8001268 <beregn_CCR_snurr>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <behandle_snurr+0x140>)
 8001726:	805a      	strh	r2, [r3, #2]
	}

	uint8_t sjekk_var = sjekk_for_forskjellig_fortegn(operator_manpu_int.snurr,operator_manpu_forrige1_int.snurr);
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <behandle_snurr+0x14c>)
 800172a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800172e:	4a18      	ldr	r2, [pc, #96]	; (8001790 <behandle_snurr+0x150>)
 8001730:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc94 	bl	8001064 <sjekk_for_forskjellig_fortegn>
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]

	// dersom endring av fortegn, skrur av motor og skriver til pinne

	/// NB SETT ØNSKET FREKVENS I IOC
	if(sjekk_var){
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <behandle_snurr+0x110>
		/// skriv til timer registere
		TIM8 -> CCR1 = manu_CCR.snurr; // PC06 snurr TIM8_CH1
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <behandle_snurr+0x140>)
 8001748:	885a      	ldrh	r2, [r3, #2]
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <behandle_snurr+0x154>)
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		TIM8 -> CCR1 = 1500;
		operator_manpu.snurr = 0;
	}

}
 800174e:	e007      	b.n	8001760 <behandle_snurr+0x120>
		TIM8 -> CCR1 = 1500;
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <behandle_snurr+0x154>)
 8001752:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.snurr = 0;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <behandle_snurr+0x134>)
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000000 	.word	0x20000000
 800176c:	2000001c 	.word	0x2000001c
 8001770:	200001b4 	.word	0x200001b4
 8001774:	200001a4 	.word	0x200001a4
 8001778:	20000058 	.word	0x20000058
 800177c:	44ed8000 	.word	0x44ed8000
 8001780:	200001d4 	.word	0x200001d4
 8001784:	42c80000 	.word	0x42c80000
 8001788:	c2c80000 	.word	0xc2c80000
 800178c:	200001c4 	.word	0x200001c4
 8001790:	200001c8 	.word	0x200001c8
 8001794:	40013400 	.word	0x40013400

08001798 <behandle_manipulator>:



void behandle_manipulator(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	/// casting
    operator_manpu.gripe = (float) operator_manpu_int.gripe;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <behandle_manipulator+0x6c>)
 800179e:	f993 3000 	ldrsb.w	r3, [r3]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <behandle_manipulator+0x70>)
 80017ac:	edc3 7a00 	vstr	s15, [r3]
    operator_manpu.skyv = (float) operator_manpu_int.skyv;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <behandle_manipulator+0x6c>)
 80017b2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <behandle_manipulator+0x70>)
 80017c0:	edc3 7a03 	vstr	s15, [r3, #12]
    operator_manpu.snurr = (float) operator_manpu_int.snurr;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <behandle_manipulator+0x6c>)
 80017c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <behandle_manipulator+0x70>)
 80017d4:	edc3 7a01 	vstr	s15, [r3, #4]
    operator_manpu.sving = (float) operator_manpu_int.sving;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <behandle_manipulator+0x6c>)
 80017da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <behandle_manipulator+0x70>)
 80017e8:	edc3 7a02 	vstr	s15, [r3, #8]


	behandle_gripe();
 80017ec:	f7ff fd8a 	bl	8001304 <behandle_gripe>
	behandle_skyv();
 80017f0:	f7ff fe9c 	bl	800152c <behandle_skyv>
	behandle_sving();
 80017f4:	f7ff fe10 	bl	8001418 <behandle_sving>

	behandle_snurr();
 80017f8:	f7ff ff22 	bl	8001640 <behandle_snurr>

	manipulator_data_lagring();
 80017fc:	f7ff fbe6 	bl	8000fcc <manipulator_data_lagring>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200001c4 	.word	0x200001c4
 8001808:	200001a4 	.word	0x200001a4

0800180c <null_PID_var>:

//// temperatursensor leses på 500ms

/////////////////////////// REGULERING

void null_PID_var(PID_var *PID){
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

	 PID -> e_1 = 0;// lagre som forrige avvik
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
	 PID -> ui_1 = 0; // lagre som forrige integratorbidrag
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
	 PID -> YF_1 = 0; // lagre som forrige filtrerte verdi
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <beregn_generell_PID>:


void beregn_generell_PID(PID_var *PID, PID_var_felles felles){
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	eeb0 7a40 	vmov.f32	s14, s0
 8001844:	eef0 7a60 	vmov.f32	s15, s1
 8001848:	ed87 7a01 	vstr	s14, [r7, #4]
 800184c:	edc7 7a02 	vstr	s15, [r7, #8]
    float up,ui,ud;
    (PID->e) = (PID->Ref) - (PID->Y); // beregne avvik, error e
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	ed93 7a03 	vldr	s14, [r3, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	edd3 7a08 	vldr	s15, [r3, #32]
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	edc3 7a06 	vstr	s15, [r3, #24]

    up = (PID->Kp) * (PID->e); // proportional action
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	ed93 7a00 	vldr	s14, [r3]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001876:	edc7 7a06 	vstr	s15, [r7, #24]
    ui = PID->ui_1 + ( (PID->Ki * felles.Ts) * (PID->e + PID->e_1)/2 ); // intergal action
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	edd3 6a01 	vldr	s13, [r3, #4]
 8001886:	edd7 7a01 	vldr	s15, [r7, #4]
 800188a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	ed93 6a06 	vldr	s12, [r3, #24]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	edd3 7a07 	vldr	s15, [r3, #28]
 800189a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800189e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018a2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80018a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc7 7a07 	vstr	s15, [r7, #28]

    if (ui > (PID->uimaks)){ // pga integral action akkumulering av error, setter begrensning; anti-windup
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80018b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80018bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	dd03      	ble.n	80018ce <beregn_generell_PID+0x96>
        ui = (PID->uimaks);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	e00c      	b.n	80018e8 <beregn_generell_PID+0xb0>
    }
    else if(ui < (PID->uimin)){
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80018d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80018d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d502      	bpl.n	80018e8 <beregn_generell_PID+0xb0>
        ui = (PID->uimin);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	61fb      	str	r3, [r7, #28]
    }

    PID->YF = ( felles.a * PID->YF_1 ) + ( (1-felles.a) * PID->Y); // filtere måleverdi for derivering
 80018e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	edd3 7a08 	vldr	s15, [r3, #32]
 8001908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    ud = - PID->Kd * ( (PID->YF - PID->YF_1) / felles.Ts ); //derivative action
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edd3 7a02 	vldr	s15, [r3, #8]
 800191c:	eeb1 7a67 	vneg.f32	s14, s15
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800192c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001930:	edd7 6a01 	vldr	s13, [r7, #4]
 8001934:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193c:	edc7 7a05 	vstr	s15, [r7, #20]

    PID->u = up + ui + ud;
 8001940:	ed97 7a06 	vldr	s14, [r7, #24]
 8001944:	edd7 7a07 	vldr	s15, [r7, #28]
 8001948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800194c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	edc3 7a04 	vstr	s15, [r3, #16]
    if (PID->u > (PID->umaks)){ // maksbegrensing
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196e:	dd04      	ble.n	800197a <beregn_generell_PID+0x142>
        PID->u = (PID->umaks);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	e00e      	b.n	8001998 <beregn_generell_PID+0x160>
    }
    else if(PID->u < (PID->umin)){
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	d503      	bpl.n	8001998 <beregn_generell_PID+0x160>
        PID->u = (PID->umin);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	611a      	str	r2, [r3, #16]
    }

    PID -> e_1 = PID -> e;// lagre som forrige avvik
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	61da      	str	r2, [r3, #28]
    PID -> ui_1 = ui; // lagre som forrige integratorbidrag
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
    PID -> YF_1 = PID -> YF; // lagre som forrige filtrerte verdi
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <konverter_kg_paadrag>:

float konverter_kg_paadrag(float kg){
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	ed87 0a01 	vstr	s0, [r7, #4]
    if(kg<0) {return (pos_kr_paa.a*kg + pos_kr_paa.b);}
 80019c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	d50c      	bpl.n	80019ee <konverter_kg_paadrag+0x32>
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <konverter_kg_paadrag+0x6c>)
 80019d6:	ed93 7a00 	vldr	s14, [r3]
 80019da:	edd7 7a01 	vldr	s15, [r7, #4]
 80019de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <konverter_kg_paadrag+0x6c>)
 80019e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	e015      	b.n	8001a1a <konverter_kg_paadrag+0x5e>
    else if(kg>0) {return (neg_kr_paa.a*kg + neg_kr_paa.b);}
 80019ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	dd0c      	ble.n	8001a16 <konverter_kg_paadrag+0x5a>
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <konverter_kg_paadrag+0x70>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <konverter_kg_paadrag+0x70>)
 8001a0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a14:	e001      	b.n	8001a1a <konverter_kg_paadrag+0x5e>
    else {return 0;}
 8001a16:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001a30 <konverter_kg_paadrag+0x74>
}
 8001a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	20000034 	.word	0x20000034
 8001a2c:	2000003c 	.word	0x2000003c
 8001a30:	00000000 	.word	0x00000000

08001a34 <hiv_regulering_init>:

void hiv_regulering_init(void){
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	// oppdater
	PID_hiv.Kp =  4; //1
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a3a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001a3e:	601a      	str	r2, [r3, #0]
	PID_hiv.Ki = 0.8; //2
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <hiv_regulering_init+0x80>)
 8001a44:	605a      	str	r2, [r3, #4]
	PID_hiv.Kd =  3.5; //3
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <hiv_regulering_init+0x84>)
 8001a4a:	609a      	str	r2, [r3, #8]
	PID_hiv.Ref = 0;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
	PID_hiv.u = 0;
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
	PID_hiv.ui_1 = 0;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
	PID_hiv.e = 0;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
	PID_hiv.e_1 = 0;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	61da      	str	r2, [r3, #28]
	PID_hiv.Y = 0;
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
	PID_hiv.YF = 0;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
	PID_hiv.YF_1 = 0;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
	// oppdater

	// med 70 går opp til ca 59 på hver
	// med 100 går opp til rundt 80 på hver
	PID_hiv.uimaks = 70;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <hiv_regulering_init+0x88>)
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_hiv.uimin = -70;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <hiv_regulering_init+0x8c>)
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
	PID_hiv.umaks = 100;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <hiv_regulering_init+0x90>)
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
	PID_hiv.umin = -100;
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <hiv_regulering_init+0x7c>)
 8001aa0:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <hiv_regulering_init+0x94>)
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200001dc 	.word	0x200001dc
 8001ab4:	3f4ccccd 	.word	0x3f4ccccd
 8001ab8:	40600000 	.word	0x40600000
 8001abc:	428c0000 	.word	0x428c0000
 8001ac0:	c28c0000 	.word	0xc28c0000
 8001ac4:	42c80000 	.word	0x42c80000
 8001ac8:	c2c80000 	.word	0xc2c80000

08001acc <rull_regulering_init>:

// kanskje litt aggresiv (?)

void rull_regulering_init(void){
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	// oppdater
	PID_rull.Kp = 0.3; //1
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <rull_regulering_init+0x78>)
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <rull_regulering_init+0x7c>)
 8001ad4:	601a      	str	r2, [r3, #0]
	PID_rull.Ki = 0.2; //2
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <rull_regulering_init+0x78>)
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <rull_regulering_init+0x80>)
 8001ada:	605a      	str	r2, [r3, #4]
	PID_rull.Kd = 0.165; //3
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <rull_regulering_init+0x78>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <rull_regulering_init+0x84>)
 8001ae0:	609a      	str	r2, [r3, #8]
	PID_rull.Ref = 0;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <rull_regulering_init+0x78>)
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
	PID_rull.u = 0;
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <rull_regulering_init+0x78>)
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
	PID_rull.ui_1 = 0;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <rull_regulering_init+0x78>)
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
	PID_rull.e = 0;
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <rull_regulering_init+0x78>)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
	PID_rull.e_1 = 0;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <rull_regulering_init+0x78>)
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
	PID_rull.Y = 0;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <rull_regulering_init+0x78>)
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
	PID_rull.YF = 0;
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <rull_regulering_init+0x78>)
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
	PID_rull.YF_1 = 0;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <rull_regulering_init+0x78>)
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
	// oppdater
	PID_rull.uimaks = 70;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <rull_regulering_init+0x78>)
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <rull_regulering_init+0x88>)
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_rull.uimin = -70;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <rull_regulering_init+0x78>)
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <rull_regulering_init+0x8c>)
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
	PID_rull.umaks = 100;
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <rull_regulering_init+0x78>)
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <rull_regulering_init+0x90>)
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34
	PID_rull.umin = -100;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <rull_regulering_init+0x78>)
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <rull_regulering_init+0x94>)
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000254 	.word	0x20000254
 8001b48:	3e99999a 	.word	0x3e99999a
 8001b4c:	3e4ccccd 	.word	0x3e4ccccd
 8001b50:	3e28f5c3 	.word	0x3e28f5c3
 8001b54:	428c0000 	.word	0x428c0000
 8001b58:	c28c0000 	.word	0xc28c0000
 8001b5c:	42c80000 	.word	0x42c80000
 8001b60:	c2c80000 	.word	0xc2c80000

08001b64 <stamp_regulering_init>:

void stamp_regulering_init(void){
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	// oppdater
	PID_stamp.Kp =  0.33; //1
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <stamp_regulering_init+0x78>)
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <stamp_regulering_init+0x7c>)
 8001b6c:	601a      	str	r2, [r3, #0]
	PID_stamp.Ki = 0.2; //2
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <stamp_regulering_init+0x78>)
 8001b70:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <stamp_regulering_init+0x80>)
 8001b72:	605a      	str	r2, [r3, #4]
	PID_stamp.Kd =  0.162; //3
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <stamp_regulering_init+0x78>)
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <stamp_regulering_init+0x84>)
 8001b78:	609a      	str	r2, [r3, #8]
	PID_stamp.Ref = 0;
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <stamp_regulering_init+0x78>)
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
	PID_stamp.u = 0;
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <stamp_regulering_init+0x78>)
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
	PID_stamp.ui_1 = 0;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <stamp_regulering_init+0x78>)
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
	PID_stamp.e = 0;
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <stamp_regulering_init+0x78>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
	PID_stamp.e_1 = 0;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <stamp_regulering_init+0x78>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
	PID_stamp.Y = 0;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <stamp_regulering_init+0x78>)
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
	PID_stamp.YF = 0;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <stamp_regulering_init+0x78>)
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
	PID_stamp.YF_1 = 0;
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <stamp_regulering_init+0x78>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
	// oppdater
	PID_stamp.uimaks = 70;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <stamp_regulering_init+0x78>)
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <stamp_regulering_init+0x88>)
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_stamp.uimin = -70;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <stamp_regulering_init+0x78>)
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <stamp_regulering_init+0x8c>)
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
	PID_stamp.umaks = 100;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <stamp_regulering_init+0x78>)
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <stamp_regulering_init+0x90>)
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
	PID_stamp.umin = -100;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <stamp_regulering_init+0x78>)
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <stamp_regulering_init+0x94>)
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	20000218 	.word	0x20000218
 8001be0:	3ea8f5c3 	.word	0x3ea8f5c3
 8001be4:	3e4ccccd 	.word	0x3e4ccccd
 8001be8:	3e25e354 	.word	0x3e25e354
 8001bec:	428c0000 	.word	0x428c0000
 8001bf0:	c28c0000 	.word	0xc28c0000
 8001bf4:	42c80000 	.word	0x42c80000
 8001bf8:	c2c80000 	.word	0xc2c80000

08001bfc <hiv_regulering>:


void hiv_regulering(void){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

    PID_hiv.Y = sensordata.dybde;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <hiv_regulering+0x98>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <hiv_regulering+0x9c>)
 8001c06:	6213      	str	r3, [r2, #32]
    beregn_generell_PID(&PID_hiv, PID_felles);
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <hiv_regulering+0xa0>)
 8001c0a:	ed93 7a00 	vldr	s14, [r3]
 8001c0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c12:	eeb0 0a47 	vmov.f32	s0, s14
 8001c16:	eef0 0a67 	vmov.f32	s1, s15
 8001c1a:	481f      	ldr	r0, [pc, #124]	; (8001c98 <hiv_regulering+0x9c>)
 8001c1c:	f7ff fe0c 	bl	8001838 <beregn_generell_PID>

    // fordel på 4 vertikale thrustere, og konverter til paadrag
    // fordeles likt

    reguleringbidrag_hiv.vhf = konverter_kg_paadrag(-PID_hiv.u);
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <hiv_regulering+0x9c>)
 8001c22:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c26:	eef1 7a67 	vneg.f32	s15, s15
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	f7ff fec5 	bl	80019bc <konverter_kg_paadrag>
 8001c32:	eef0 7a40 	vmov.f32	s15, s0
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <hiv_regulering+0xa4>)
 8001c38:	edc3 7a04 	vstr	s15, [r3, #16]
    reguleringbidrag_hiv.vhb = konverter_kg_paadrag(-PID_hiv.u);
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <hiv_regulering+0x9c>)
 8001c3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c42:	eef1 7a67 	vneg.f32	s15, s15
 8001c46:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4a:	f7ff feb7 	bl	80019bc <konverter_kg_paadrag>
 8001c4e:	eef0 7a40 	vmov.f32	s15, s0
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <hiv_regulering+0xa4>)
 8001c54:	edc3 7a05 	vstr	s15, [r3, #20]
    reguleringbidrag_hiv.vvb = konverter_kg_paadrag(-PID_hiv.u);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <hiv_regulering+0x9c>)
 8001c5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c5e:	eef1 7a67 	vneg.f32	s15, s15
 8001c62:	eeb0 0a67 	vmov.f32	s0, s15
 8001c66:	f7ff fea9 	bl	80019bc <konverter_kg_paadrag>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <hiv_regulering+0xa4>)
 8001c70:	edc3 7a06 	vstr	s15, [r3, #24]
    reguleringbidrag_hiv.vvf = konverter_kg_paadrag(-PID_hiv.u);
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <hiv_regulering+0x9c>)
 8001c76:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c7a:	eef1 7a67 	vneg.f32	s15, s15
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	f7ff fe9b 	bl	80019bc <konverter_kg_paadrag>
 8001c86:	eef0 7a40 	vmov.f32	s15, s0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <hiv_regulering+0xa4>)
 8001c8c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000290 	.word	0x20000290
 8001c98:	200001dc 	.word	0x200001dc
 8001c9c:	20000070 	.word	0x20000070
 8001ca0:	20000144 	.word	0x20000144

08001ca4 <stamp_regulering>:

void stamp_regulering(void){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

    PID_stamp.Ref = REF.stamp;
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <stamp_regulering+0x98>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <stamp_regulering+0x9c>)
 8001cae:	60d3      	str	r3, [r2, #12]
    PID_stamp.Y = sensordata.stamp;
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <stamp_regulering+0xa0>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <stamp_regulering+0x9c>)
 8001cb6:	6213      	str	r3, [r2, #32]

    beregn_generell_PID(&PID_stamp, PID_felles);
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <stamp_regulering+0xa4>)
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc6:	eef0 0a67 	vmov.f32	s1, s15
 8001cca:	481d      	ldr	r0, [pc, #116]	; (8001d40 <stamp_regulering+0x9c>)
 8001ccc:	f7ff fdb4 	bl	8001838 <beregn_generell_PID>

    // fordel på 4 vertikale thrustere, fordeles likt på to grupper
    // hhb og hvb , hhf og hvf -> har motsatt fortegn av hverandre

    reguleringbidrag_stamp.vhf = konverter_kg_paadrag(-PID_stamp.u);
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <stamp_regulering+0x9c>)
 8001cd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cd6:	eef1 7a67 	vneg.f32	s15, s15
 8001cda:	eeb0 0a67 	vmov.f32	s0, s15
 8001cde:	f7ff fe6d 	bl	80019bc <konverter_kg_paadrag>
 8001ce2:	eef0 7a40 	vmov.f32	s15, s0
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <stamp_regulering+0xa8>)
 8001ce8:	edc3 7a04 	vstr	s15, [r3, #16]
    reguleringbidrag_stamp.vhb = konverter_kg_paadrag(PID_stamp.u);
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <stamp_regulering+0x9c>)
 8001cee:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf6:	f7ff fe61 	bl	80019bc <konverter_kg_paadrag>
 8001cfa:	eef0 7a40 	vmov.f32	s15, s0
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <stamp_regulering+0xa8>)
 8001d00:	edc3 7a05 	vstr	s15, [r3, #20]
    reguleringbidrag_stamp.vvb = konverter_kg_paadrag(PID_stamp.u);
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <stamp_regulering+0x9c>)
 8001d06:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0e:	f7ff fe55 	bl	80019bc <konverter_kg_paadrag>
 8001d12:	eef0 7a40 	vmov.f32	s15, s0
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <stamp_regulering+0xa8>)
 8001d18:	edc3 7a06 	vstr	s15, [r3, #24]
    reguleringbidrag_stamp.vvf = konverter_kg_paadrag(-PID_stamp.u);
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <stamp_regulering+0x9c>)
 8001d1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d22:	eef1 7a67 	vneg.f32	s15, s15
 8001d26:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2a:	f7ff fe47 	bl	80019bc <konverter_kg_paadrag>
 8001d2e:	eef0 7a40 	vmov.f32	s15, s0
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <stamp_regulering+0xa8>)
 8001d34:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000029c 	.word	0x2000029c
 8001d40:	20000218 	.word	0x20000218
 8001d44:	20000290 	.word	0x20000290
 8001d48:	20000070 	.word	0x20000070
 8001d4c:	20000164 	.word	0x20000164

08001d50 <rull_regulering>:

void rull_regulering(void){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0

    PID_rull.Ref = REF.rull;
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <rull_regulering+0x98>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a24      	ldr	r2, [pc, #144]	; (8001dec <rull_regulering+0x9c>)
 8001d5a:	60d3      	str	r3, [r2, #12]
    PID_rull.Y = sensordata.rull;
 8001d5c:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <rull_regulering+0xa0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <rull_regulering+0x9c>)
 8001d62:	6213      	str	r3, [r2, #32]

    beregn_generell_PID(&PID_rull, PID_felles);
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <rull_regulering+0xa4>)
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d72:	eef0 0a67 	vmov.f32	s1, s15
 8001d76:	481d      	ldr	r0, [pc, #116]	; (8001dec <rull_regulering+0x9c>)
 8001d78:	f7ff fd5e 	bl	8001838 <beregn_generell_PID>

    // fordel på 4 vertikale thrustere, fordeles likt,
    // vhb og vhf , vvb og vvf

    reguleringbidrag_rull.vhf = konverter_kg_paadrag(-PID_rull.u);
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <rull_regulering+0x9c>)
 8001d7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d82:	eef1 7a67 	vneg.f32	s15, s15
 8001d86:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8a:	f7ff fe17 	bl	80019bc <konverter_kg_paadrag>
 8001d8e:	eef0 7a40 	vmov.f32	s15, s0
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <rull_regulering+0xa8>)
 8001d94:	edc3 7a04 	vstr	s15, [r3, #16]
    reguleringbidrag_rull.vhb = konverter_kg_paadrag(-PID_rull.u);
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <rull_regulering+0x9c>)
 8001d9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d9e:	eef1 7a67 	vneg.f32	s15, s15
 8001da2:	eeb0 0a67 	vmov.f32	s0, s15
 8001da6:	f7ff fe09 	bl	80019bc <konverter_kg_paadrag>
 8001daa:	eef0 7a40 	vmov.f32	s15, s0
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <rull_regulering+0xa8>)
 8001db0:	edc3 7a05 	vstr	s15, [r3, #20]
    reguleringbidrag_rull.vvb = konverter_kg_paadrag(PID_rull.u);
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <rull_regulering+0x9c>)
 8001db6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dba:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbe:	f7ff fdfd 	bl	80019bc <konverter_kg_paadrag>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <rull_regulering+0xa8>)
 8001dc8:	edc3 7a06 	vstr	s15, [r3, #24]
    reguleringbidrag_rull.vvf = konverter_kg_paadrag(PID_rull.u);
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <rull_regulering+0x9c>)
 8001dce:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd6:	f7ff fdf1 	bl	80019bc <konverter_kg_paadrag>
 8001dda:	eef0 7a40 	vmov.f32	s15, s0
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <rull_regulering+0xa8>)
 8001de0:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2000029c 	.word	0x2000029c
 8001dec:	20000254 	.word	0x20000254
 8001df0:	20000290 	.word	0x20000290
 8001df4:	20000070 	.word	0x20000070
 8001df8:	20000184 	.word	0x20000184

08001dfc <beregn_reguleringbidrag>:


void beregn_reguleringbidrag(void){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	// konverter int til float for videre beregninger
	// "casting" (ny variabeltype)
	sensordata.rull = (float) sensordata_int.rull/100;
 8001e00:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <beregn_reguleringbidrag+0xc8>)
 8001e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001ec8 <beregn_reguleringbidrag+0xcc>
 8001e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <beregn_reguleringbidrag+0xd0>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
	sensordata.stamp = (float) sensordata_int.stamp/100;
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <beregn_reguleringbidrag+0xc8>)
 8001e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2a:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001ec8 <beregn_reguleringbidrag+0xcc>
 8001e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <beregn_reguleringbidrag+0xd0>)
 8001e34:	edc3 7a01 	vstr	s15, [r3, #4]
	// egentlig være delt på 100, skal sende i cm men sender i mm
	sensordata.dybde = (float) sensordata_int.dybde/1000;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <beregn_reguleringbidrag+0xc8>)
 8001e3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e46:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001ed0 <beregn_reguleringbidrag+0xd4>
 8001e4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <beregn_reguleringbidrag+0xd0>)
 8001e50:	edc3 7a02 	vstr	s15, [r3, #8]
	// sjekke om reguleringsvar skal være aktiv eller ikke.
	// dersom 0 er ikke aktiv

	//////
	if(!(REG_AKTIVER & 0x01)){
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <beregn_reguleringbidrag+0xd8>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <beregn_reguleringbidrag+0x78>
		null_PID_var(&PID_rull);
 8001e60:	481d      	ldr	r0, [pc, #116]	; (8001ed8 <beregn_reguleringbidrag+0xdc>)
 8001e62:	f7ff fcd3 	bl	800180c <null_PID_var>
		null_bidrag_horisontal(&reguleringbidrag_rull);
 8001e66:	481d      	ldr	r0, [pc, #116]	; (8001edc <beregn_reguleringbidrag+0xe0>)
 8001e68:	f000 fc1e 	bl	80026a8 <null_bidrag_horisontal>
		null_bidrag_vertikal(&reguleringbidrag_rull);
 8001e6c:	481b      	ldr	r0, [pc, #108]	; (8001edc <beregn_reguleringbidrag+0xe0>)
 8001e6e:	f000 fc35 	bl	80026dc <null_bidrag_vertikal>
 8001e72:	e001      	b.n	8001e78 <beregn_reguleringbidrag+0x7c>
	}
	else{
		rull_regulering();
 8001e74:	f7ff ff6c 	bl	8001d50 <rull_regulering>
	}
	//////
	if(!(REG_AKTIVER & 0x04)){
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <beregn_reguleringbidrag+0xd8>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <beregn_reguleringbidrag+0x9c>
		null_PID_var(&PID_stamp);
 8001e84:	4816      	ldr	r0, [pc, #88]	; (8001ee0 <beregn_reguleringbidrag+0xe4>)
 8001e86:	f7ff fcc1 	bl	800180c <null_PID_var>
		null_bidrag_horisontal(&reguleringbidrag_stamp);
 8001e8a:	4816      	ldr	r0, [pc, #88]	; (8001ee4 <beregn_reguleringbidrag+0xe8>)
 8001e8c:	f000 fc0c 	bl	80026a8 <null_bidrag_horisontal>
		null_bidrag_vertikal(&reguleringbidrag_stamp);
 8001e90:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <beregn_reguleringbidrag+0xe8>)
 8001e92:	f000 fc23 	bl	80026dc <null_bidrag_vertikal>
 8001e96:	e001      	b.n	8001e9c <beregn_reguleringbidrag+0xa0>
	}
	else{
		stamp_regulering();
 8001e98:	f7ff ff04 	bl	8001ca4 <stamp_regulering>
	}
	//////
	if(!(REG_AKTIVER_DYBDE & 0x08)){
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <beregn_reguleringbidrag+0xec>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <beregn_reguleringbidrag+0xc0>
		null_PID_var(&PID_hiv);
 8001ea8:	4810      	ldr	r0, [pc, #64]	; (8001eec <beregn_reguleringbidrag+0xf0>)
 8001eaa:	f7ff fcaf 	bl	800180c <null_PID_var>
		null_bidrag_horisontal(&reguleringbidrag_hiv);
 8001eae:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <beregn_reguleringbidrag+0xf4>)
 8001eb0:	f000 fbfa 	bl	80026a8 <null_bidrag_horisontal>
		null_bidrag_vertikal(&reguleringbidrag_hiv);
 8001eb4:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <beregn_reguleringbidrag+0xf4>)
 8001eb6:	f000 fc11 	bl	80026dc <null_bidrag_vertikal>
	}
	else{
		hiv_regulering();
	}

}
 8001eba:	e001      	b.n	8001ec0 <beregn_reguleringbidrag+0xc4>
		hiv_regulering();
 8001ebc:	f7ff fe9e 	bl	8001bfc <hiv_regulering>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200002a8 	.word	0x200002a8
 8001ec8:	42c80000 	.word	0x42c80000
 8001ecc:	20000290 	.word	0x20000290
 8001ed0:	447a0000 	.word	0x447a0000
 8001ed4:	200000a5 	.word	0x200000a5
 8001ed8:	20000254 	.word	0x20000254
 8001edc:	20000184 	.word	0x20000184
 8001ee0:	20000218 	.word	0x20000218
 8001ee4:	20000164 	.word	0x20000164
 8001ee8:	200000a4 	.word	0x200000a4
 8001eec:	200001dc 	.word	0x200001dc
 8001ef0:	20000144 	.word	0x20000144

08001ef4 <oppdater_parameter>:



///// OPPDATERING AV PARAMETRE

void oppdater_parameter(uint32_t param_id, float parameter){
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	ed87 0a02 	vstr	s0, [r7, #8]
	switch(param_id){
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f240 1249 	movw	r2, #329	; 0x149
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	f200 8376 	bhi.w	80025fa <oppdater_parameter+0x706>
 8001f0e:	a101      	add	r1, pc, #4	; (adr r1, 8001f14 <oppdater_parameter+0x20>)
 8001f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f14:	0800243d 	.word	0x0800243d
 8001f18:	08002445 	.word	0x08002445
 8001f1c:	0800244d 	.word	0x0800244d
 8001f20:	08002455 	.word	0x08002455
 8001f24:	0800245d 	.word	0x0800245d
 8001f28:	08002465 	.word	0x08002465
 8001f2c:	0800246d 	.word	0x0800246d
 8001f30:	08002475 	.word	0x08002475
 8001f34:	0800247d 	.word	0x0800247d
 8001f38:	08002485 	.word	0x08002485
 8001f3c:	0800248d 	.word	0x0800248d
 8001f40:	080025fb 	.word	0x080025fb
 8001f44:	080025fb 	.word	0x080025fb
 8001f48:	080025fb 	.word	0x080025fb
 8001f4c:	08002495 	.word	0x08002495
 8001f50:	0800249d 	.word	0x0800249d
 8001f54:	080024a5 	.word	0x080024a5
 8001f58:	080024ad 	.word	0x080024ad
 8001f5c:	080024b5 	.word	0x080024b5
 8001f60:	080024bd 	.word	0x080024bd
 8001f64:	080025fb 	.word	0x080025fb
 8001f68:	080025fb 	.word	0x080025fb
 8001f6c:	080025fb 	.word	0x080025fb
 8001f70:	080025fb 	.word	0x080025fb
 8001f74:	080025fb 	.word	0x080025fb
 8001f78:	080025fb 	.word	0x080025fb
 8001f7c:	080025fb 	.word	0x080025fb
 8001f80:	080025fb 	.word	0x080025fb
 8001f84:	080025fb 	.word	0x080025fb
 8001f88:	080024c5 	.word	0x080024c5
 8001f8c:	080024cd 	.word	0x080024cd
 8001f90:	080024d5 	.word	0x080024d5
 8001f94:	080024dd 	.word	0x080024dd
 8001f98:	080024e5 	.word	0x080024e5
 8001f9c:	080024ed 	.word	0x080024ed
 8001fa0:	080024f5 	.word	0x080024f5
 8001fa4:	080025fb 	.word	0x080025fb
 8001fa8:	080025fb 	.word	0x080025fb
 8001fac:	080025fb 	.word	0x080025fb
 8001fb0:	080025fb 	.word	0x080025fb
 8001fb4:	080025fb 	.word	0x080025fb
 8001fb8:	080025fb 	.word	0x080025fb
 8001fbc:	080025fb 	.word	0x080025fb
 8001fc0:	080025fb 	.word	0x080025fb
 8001fc4:	080025fb 	.word	0x080025fb
 8001fc8:	080025fb 	.word	0x080025fb
 8001fcc:	080025fb 	.word	0x080025fb
 8001fd0:	080025fb 	.word	0x080025fb
 8001fd4:	080025fb 	.word	0x080025fb
 8001fd8:	080024fd 	.word	0x080024fd
 8001fdc:	08002505 	.word	0x08002505
 8001fe0:	0800250d 	.word	0x0800250d
 8001fe4:	08002515 	.word	0x08002515
 8001fe8:	0800251d 	.word	0x0800251d
 8001fec:	08002525 	.word	0x08002525
 8001ff0:	080025fb 	.word	0x080025fb
 8001ff4:	080025fb 	.word	0x080025fb
 8001ff8:	080025fb 	.word	0x080025fb
 8001ffc:	080025fb 	.word	0x080025fb
 8002000:	080025fb 	.word	0x080025fb
 8002004:	080025fb 	.word	0x080025fb
 8002008:	080025fb 	.word	0x080025fb
 800200c:	080025fb 	.word	0x080025fb
 8002010:	080025fb 	.word	0x080025fb
 8002014:	080025fb 	.word	0x080025fb
 8002018:	080025fb 	.word	0x080025fb
 800201c:	080025fb 	.word	0x080025fb
 8002020:	080025fb 	.word	0x080025fb
 8002024:	080025fb 	.word	0x080025fb
 8002028:	080025fb 	.word	0x080025fb
 800202c:	080025fb 	.word	0x080025fb
 8002030:	080025fb 	.word	0x080025fb
 8002034:	080025fb 	.word	0x080025fb
 8002038:	080025fb 	.word	0x080025fb
 800203c:	080025fb 	.word	0x080025fb
 8002040:	080025fb 	.word	0x080025fb
 8002044:	080025fb 	.word	0x080025fb
 8002048:	080025fb 	.word	0x080025fb
 800204c:	080025fb 	.word	0x080025fb
 8002050:	080025fb 	.word	0x080025fb
 8002054:	080025fb 	.word	0x080025fb
 8002058:	080025fb 	.word	0x080025fb
 800205c:	080025fb 	.word	0x080025fb
 8002060:	080025fb 	.word	0x080025fb
 8002064:	080025fb 	.word	0x080025fb
 8002068:	080025fb 	.word	0x080025fb
 800206c:	080025fb 	.word	0x080025fb
 8002070:	080025fb 	.word	0x080025fb
 8002074:	080025fb 	.word	0x080025fb
 8002078:	080025fb 	.word	0x080025fb
 800207c:	080025fb 	.word	0x080025fb
 8002080:	080025fb 	.word	0x080025fb
 8002084:	080025fb 	.word	0x080025fb
 8002088:	080025fb 	.word	0x080025fb
 800208c:	080025fb 	.word	0x080025fb
 8002090:	080025fb 	.word	0x080025fb
 8002094:	080025fb 	.word	0x080025fb
 8002098:	080025fb 	.word	0x080025fb
 800209c:	080025fb 	.word	0x080025fb
 80020a0:	0800252d 	.word	0x0800252d
 80020a4:	080025fb 	.word	0x080025fb
 80020a8:	080025fb 	.word	0x080025fb
 80020ac:	080025fb 	.word	0x080025fb
 80020b0:	080025fb 	.word	0x080025fb
 80020b4:	080025fb 	.word	0x080025fb
 80020b8:	080025fb 	.word	0x080025fb
 80020bc:	080025fb 	.word	0x080025fb
 80020c0:	080025fb 	.word	0x080025fb
 80020c4:	080025fb 	.word	0x080025fb
 80020c8:	080025fb 	.word	0x080025fb
 80020cc:	080025fb 	.word	0x080025fb
 80020d0:	080025fb 	.word	0x080025fb
 80020d4:	080025fb 	.word	0x080025fb
 80020d8:	080025fb 	.word	0x080025fb
 80020dc:	080025fb 	.word	0x080025fb
 80020e0:	080025fb 	.word	0x080025fb
 80020e4:	080025fb 	.word	0x080025fb
 80020e8:	080025fb 	.word	0x080025fb
 80020ec:	080025fb 	.word	0x080025fb
 80020f0:	080025fb 	.word	0x080025fb
 80020f4:	080025fb 	.word	0x080025fb
 80020f8:	080025fb 	.word	0x080025fb
 80020fc:	080025fb 	.word	0x080025fb
 8002100:	080025fb 	.word	0x080025fb
 8002104:	080025fb 	.word	0x080025fb
 8002108:	080025fb 	.word	0x080025fb
 800210c:	080025fb 	.word	0x080025fb
 8002110:	080025fb 	.word	0x080025fb
 8002114:	080025fb 	.word	0x080025fb
 8002118:	080025fb 	.word	0x080025fb
 800211c:	080025fb 	.word	0x080025fb
 8002120:	080025fb 	.word	0x080025fb
 8002124:	080025fb 	.word	0x080025fb
 8002128:	080025fb 	.word	0x080025fb
 800212c:	080025fb 	.word	0x080025fb
 8002130:	080025fb 	.word	0x080025fb
 8002134:	080025fb 	.word	0x080025fb
 8002138:	080025fb 	.word	0x080025fb
 800213c:	080025fb 	.word	0x080025fb
 8002140:	080025fb 	.word	0x080025fb
 8002144:	080025fb 	.word	0x080025fb
 8002148:	080025fb 	.word	0x080025fb
 800214c:	080025fb 	.word	0x080025fb
 8002150:	080025fb 	.word	0x080025fb
 8002154:	080025fb 	.word	0x080025fb
 8002158:	080025fb 	.word	0x080025fb
 800215c:	080025fb 	.word	0x080025fb
 8002160:	080025fb 	.word	0x080025fb
 8002164:	080025fb 	.word	0x080025fb
 8002168:	080025fb 	.word	0x080025fb
 800216c:	080025fb 	.word	0x080025fb
 8002170:	080025fb 	.word	0x080025fb
 8002174:	080025fb 	.word	0x080025fb
 8002178:	080025fb 	.word	0x080025fb
 800217c:	080025fb 	.word	0x080025fb
 8002180:	080025fb 	.word	0x080025fb
 8002184:	080025fb 	.word	0x080025fb
 8002188:	080025fb 	.word	0x080025fb
 800218c:	080025fb 	.word	0x080025fb
 8002190:	080025fb 	.word	0x080025fb
 8002194:	080025fb 	.word	0x080025fb
 8002198:	080025fb 	.word	0x080025fb
 800219c:	080025fb 	.word	0x080025fb
 80021a0:	080025fb 	.word	0x080025fb
 80021a4:	080025fb 	.word	0x080025fb
 80021a8:	080025fb 	.word	0x080025fb
 80021ac:	080025fb 	.word	0x080025fb
 80021b0:	080025fb 	.word	0x080025fb
 80021b4:	080025fb 	.word	0x080025fb
 80021b8:	080025fb 	.word	0x080025fb
 80021bc:	080025fb 	.word	0x080025fb
 80021c0:	080025fb 	.word	0x080025fb
 80021c4:	080025fb 	.word	0x080025fb
 80021c8:	080025fb 	.word	0x080025fb
 80021cc:	080025fb 	.word	0x080025fb
 80021d0:	080025fb 	.word	0x080025fb
 80021d4:	080025fb 	.word	0x080025fb
 80021d8:	080025fb 	.word	0x080025fb
 80021dc:	080025fb 	.word	0x080025fb
 80021e0:	080025fb 	.word	0x080025fb
 80021e4:	080025fb 	.word	0x080025fb
 80021e8:	080025fb 	.word	0x080025fb
 80021ec:	080025fb 	.word	0x080025fb
 80021f0:	080025fb 	.word	0x080025fb
 80021f4:	080025fb 	.word	0x080025fb
 80021f8:	080025fb 	.word	0x080025fb
 80021fc:	080025fb 	.word	0x080025fb
 8002200:	080025fb 	.word	0x080025fb
 8002204:	080025fb 	.word	0x080025fb
 8002208:	080025fb 	.word	0x080025fb
 800220c:	080025fb 	.word	0x080025fb
 8002210:	080025fb 	.word	0x080025fb
 8002214:	080025fb 	.word	0x080025fb
 8002218:	080025fb 	.word	0x080025fb
 800221c:	080025fb 	.word	0x080025fb
 8002220:	080025fb 	.word	0x080025fb
 8002224:	080025fb 	.word	0x080025fb
 8002228:	080025fb 	.word	0x080025fb
 800222c:	080025fb 	.word	0x080025fb
 8002230:	08002543 	.word	0x08002543
 8002234:	0800254b 	.word	0x0800254b
 8002238:	08002553 	.word	0x08002553
 800223c:	0800255b 	.word	0x0800255b
 8002240:	08002563 	.word	0x08002563
 8002244:	0800256b 	.word	0x0800256b
 8002248:	08002573 	.word	0x08002573
 800224c:	0800257b 	.word	0x0800257b
 8002250:	080025fb 	.word	0x080025fb
 8002254:	080025fb 	.word	0x080025fb
 8002258:	080025fb 	.word	0x080025fb
 800225c:	080025fb 	.word	0x080025fb
 8002260:	080025fb 	.word	0x080025fb
 8002264:	080025fb 	.word	0x080025fb
 8002268:	080025fb 	.word	0x080025fb
 800226c:	080025fb 	.word	0x080025fb
 8002270:	080025fb 	.word	0x080025fb
 8002274:	080025fb 	.word	0x080025fb
 8002278:	080025fb 	.word	0x080025fb
 800227c:	080025fb 	.word	0x080025fb
 8002280:	080025fb 	.word	0x080025fb
 8002284:	080025fb 	.word	0x080025fb
 8002288:	080025fb 	.word	0x080025fb
 800228c:	080025fb 	.word	0x080025fb
 8002290:	080025fb 	.word	0x080025fb
 8002294:	080025fb 	.word	0x080025fb
 8002298:	080025fb 	.word	0x080025fb
 800229c:	080025fb 	.word	0x080025fb
 80022a0:	080025fb 	.word	0x080025fb
 80022a4:	080025fb 	.word	0x080025fb
 80022a8:	080025fb 	.word	0x080025fb
 80022ac:	080025fb 	.word	0x080025fb
 80022b0:	080025fb 	.word	0x080025fb
 80022b4:	080025fb 	.word	0x080025fb
 80022b8:	080025fb 	.word	0x080025fb
 80022bc:	080025fb 	.word	0x080025fb
 80022c0:	080025fb 	.word	0x080025fb
 80022c4:	080025fb 	.word	0x080025fb
 80022c8:	080025fb 	.word	0x080025fb
 80022cc:	080025fb 	.word	0x080025fb
 80022d0:	080025fb 	.word	0x080025fb
 80022d4:	080025fb 	.word	0x080025fb
 80022d8:	080025fb 	.word	0x080025fb
 80022dc:	080025fb 	.word	0x080025fb
 80022e0:	080025fb 	.word	0x080025fb
 80022e4:	080025fb 	.word	0x080025fb
 80022e8:	080025fb 	.word	0x080025fb
 80022ec:	080025fb 	.word	0x080025fb
 80022f0:	080025fb 	.word	0x080025fb
 80022f4:	080025fb 	.word	0x080025fb
 80022f8:	080025fb 	.word	0x080025fb
 80022fc:	080025fb 	.word	0x080025fb
 8002300:	080025fb 	.word	0x080025fb
 8002304:	080025fb 	.word	0x080025fb
 8002308:	080025fb 	.word	0x080025fb
 800230c:	080025fb 	.word	0x080025fb
 8002310:	080025fb 	.word	0x080025fb
 8002314:	080025fb 	.word	0x080025fb
 8002318:	080025fb 	.word	0x080025fb
 800231c:	080025fb 	.word	0x080025fb
 8002320:	080025fb 	.word	0x080025fb
 8002324:	080025fb 	.word	0x080025fb
 8002328:	080025fb 	.word	0x080025fb
 800232c:	080025fb 	.word	0x080025fb
 8002330:	080025fb 	.word	0x080025fb
 8002334:	080025fb 	.word	0x080025fb
 8002338:	080025fb 	.word	0x080025fb
 800233c:	080025fb 	.word	0x080025fb
 8002340:	080025fb 	.word	0x080025fb
 8002344:	080025fb 	.word	0x080025fb
 8002348:	080025fb 	.word	0x080025fb
 800234c:	080025fb 	.word	0x080025fb
 8002350:	080025fb 	.word	0x080025fb
 8002354:	080025fb 	.word	0x080025fb
 8002358:	080025fb 	.word	0x080025fb
 800235c:	080025fb 	.word	0x080025fb
 8002360:	080025fb 	.word	0x080025fb
 8002364:	080025fb 	.word	0x080025fb
 8002368:	080025fb 	.word	0x080025fb
 800236c:	080025fb 	.word	0x080025fb
 8002370:	080025fb 	.word	0x080025fb
 8002374:	080025fb 	.word	0x080025fb
 8002378:	080025fb 	.word	0x080025fb
 800237c:	080025fb 	.word	0x080025fb
 8002380:	080025fb 	.word	0x080025fb
 8002384:	080025fb 	.word	0x080025fb
 8002388:	080025fb 	.word	0x080025fb
 800238c:	080025fb 	.word	0x080025fb
 8002390:	080025fb 	.word	0x080025fb
 8002394:	080025fb 	.word	0x080025fb
 8002398:	080025fb 	.word	0x080025fb
 800239c:	080025fb 	.word	0x080025fb
 80023a0:	080025fb 	.word	0x080025fb
 80023a4:	080025fb 	.word	0x080025fb
 80023a8:	080025fb 	.word	0x080025fb
 80023ac:	080025fb 	.word	0x080025fb
 80023b0:	080025fb 	.word	0x080025fb
 80023b4:	080025fb 	.word	0x080025fb
 80023b8:	080025fb 	.word	0x080025fb
 80023bc:	080025fb 	.word	0x080025fb
 80023c0:	08002583 	.word	0x08002583
 80023c4:	0800258b 	.word	0x0800258b
 80023c8:	08002593 	.word	0x08002593
 80023cc:	0800259b 	.word	0x0800259b
 80023d0:	080025af 	.word	0x080025af
 80023d4:	080025c3 	.word	0x080025c3
 80023d8:	080025d7 	.word	0x080025d7
 80023dc:	080025fb 	.word	0x080025fb
 80023e0:	080025eb 	.word	0x080025eb
 80023e4:	080025fb 	.word	0x080025fb
 80023e8:	080025fb 	.word	0x080025fb
 80023ec:	080025fb 	.word	0x080025fb
 80023f0:	080025fb 	.word	0x080025fb
 80023f4:	080025fb 	.word	0x080025fb
 80023f8:	080025fb 	.word	0x080025fb
 80023fc:	080025fb 	.word	0x080025fb
 8002400:	080025fb 	.word	0x080025fb
 8002404:	080025fb 	.word	0x080025fb
 8002408:	080025fb 	.word	0x080025fb
 800240c:	080025fb 	.word	0x080025fb
 8002410:	080025fb 	.word	0x080025fb
 8002414:	080025fb 	.word	0x080025fb
 8002418:	080025fb 	.word	0x080025fb
 800241c:	080025fb 	.word	0x080025fb
 8002420:	080025fb 	.word	0x080025fb
 8002424:	080025fb 	.word	0x080025fb
 8002428:	080025fb 	.word	0x080025fb
 800242c:	080025fb 	.word	0x080025fb
 8002430:	080025fb 	.word	0x080025fb
 8002434:	080025fb 	.word	0x080025fb
 8002438:	080025f3 	.word	0x080025f3

///// fra id    til     : regulering av hiv parametre
	case 1:
		PID_rull.Ki = parameter;			break;
 800243c:	4a72      	ldr	r2, [pc, #456]	; (8002608 <oppdater_parameter+0x714>)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6053      	str	r3, [r2, #4]
 8002442:	e0da      	b.n	80025fa <oppdater_parameter+0x706>
	case 2:
		PID_rull.Kd = parameter;			break;
 8002444:	4a70      	ldr	r2, [pc, #448]	; (8002608 <oppdater_parameter+0x714>)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	6093      	str	r3, [r2, #8]
 800244a:	e0d6      	b.n	80025fa <oppdater_parameter+0x706>
	case 3:
		PID_rull.Kp = parameter;			break;
 800244c:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <oppdater_parameter+0x714>)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e0d2      	b.n	80025fa <oppdater_parameter+0x706>
	case 4:
		PID_stamp.Ki = parameter;			break;
 8002454:	4a6d      	ldr	r2, [pc, #436]	; (800260c <oppdater_parameter+0x718>)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	6053      	str	r3, [r2, #4]
 800245a:	e0ce      	b.n	80025fa <oppdater_parameter+0x706>
	case 5:
		PID_stamp.Kd = parameter;			break;
 800245c:	4a6b      	ldr	r2, [pc, #428]	; (800260c <oppdater_parameter+0x718>)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	6093      	str	r3, [r2, #8]
 8002462:	e0ca      	b.n	80025fa <oppdater_parameter+0x706>
	case 6:
		PID_stamp.Kp = parameter;			break;
 8002464:	4a69      	ldr	r2, [pc, #420]	; (800260c <oppdater_parameter+0x718>)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e0c6      	b.n	80025fa <oppdater_parameter+0x706>
	case 7:
		PID_hiv.Ki = parameter;				break;
 800246c:	4a68      	ldr	r2, [pc, #416]	; (8002610 <oppdater_parameter+0x71c>)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6053      	str	r3, [r2, #4]
 8002472:	e0c2      	b.n	80025fa <oppdater_parameter+0x706>
	case 8:
		PID_hiv.Kd = parameter;				break;
 8002474:	4a66      	ldr	r2, [pc, #408]	; (8002610 <oppdater_parameter+0x71c>)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6093      	str	r3, [r2, #8]
 800247a:	e0be      	b.n	80025fa <oppdater_parameter+0x706>
	case 9:
		PID_hiv.Kp = parameter;				break;
 800247c:	4a64      	ldr	r2, [pc, #400]	; (8002610 <oppdater_parameter+0x71c>)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e0ba      	b.n	80025fa <oppdater_parameter+0x706>
	case 10:
		PID_felles.Ts = parameter;			break;
 8002484:	4a63      	ldr	r2, [pc, #396]	; (8002614 <oppdater_parameter+0x720>)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e0b6      	b.n	80025fa <oppdater_parameter+0x706>
	case 11:
		PID_felles.a = parameter;		   break;
 800248c:	4a61      	ldr	r2, [pc, #388]	; (8002614 <oppdater_parameter+0x720>)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	6053      	str	r3, [r2, #4]
 8002492:	e0b2      	b.n	80025fa <oppdater_parameter+0x706>


	/// fra id    til     : lowpass filter parametre
	case 15:
		/// b blir oppdatert automatisk i kode.
		lowpass_thruster.a =  parameter;        	break;
 8002494:	4a60      	ldr	r2, [pc, #384]	; (8002618 <oppdater_parameter+0x724>)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e0ae      	b.n	80025fa <oppdater_parameter+0x706>
	case 16:

		lowpass_manpu_steg.a =  parameter;        break;
 800249c:	4a5f      	ldr	r2, [pc, #380]	; (800261c <oppdater_parameter+0x728>)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e0aa      	b.n	80025fa <oppdater_parameter+0x706>
	case 17:

		lowpass_manpu_borste.a = parameter;       break;
 80024a4:	4a5e      	ldr	r2, [pc, #376]	; (8002620 <oppdater_parameter+0x72c>)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e0a6      	b.n	80025fa <oppdater_parameter+0x706>


	case 18:
		BEGRENSING = parameter; break;
 80024ac:	4a5d      	ldr	r2, [pc, #372]	; (8002624 <oppdater_parameter+0x730>)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e0a2      	b.n	80025fa <oppdater_parameter+0x706>

	case 19:
		d_effekt.horisontal = parameter; break;
 80024b4:	4a5c      	ldr	r2, [pc, #368]	; (8002628 <oppdater_parameter+0x734>)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e09e      	b.n	80025fa <oppdater_parameter+0x706>
	case 20:
		d_effekt.horisontal = parameter; break;
 80024bc:	4a5a      	ldr	r2, [pc, #360]	; (8002628 <oppdater_parameter+0x734>)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e09a      	b.n	80025fa <oppdater_parameter+0x706>


	/// fra id    til     : sensitivitet parametre
	case 30:
		thrust_sensitivitet.gir = (float) parameter;			break;
 80024c4:	4a59      	ldr	r2, [pc, #356]	; (800262c <oppdater_parameter+0x738>)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6093      	str	r3, [r2, #8]
 80024ca:	e096      	b.n	80025fa <oppdater_parameter+0x706>
	case 31:
		thrust_sensitivitet.hiv = (float) parameter;			break;
 80024cc:	4a57      	ldr	r2, [pc, #348]	; (800262c <oppdater_parameter+0x738>)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	60d3      	str	r3, [r2, #12]
 80024d2:	e092      	b.n	80025fa <oppdater_parameter+0x706>
	case 32:
		thrust_sensitivitet.jag = (float) parameter;			break;
 80024d4:	4a55      	ldr	r2, [pc, #340]	; (800262c <oppdater_parameter+0x738>)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e08e      	b.n	80025fa <oppdater_parameter+0x706>
	case 33:
		thrust_sensitivitet.svai = (float) parameter;			break;
 80024dc:	4a53      	ldr	r2, [pc, #332]	; (800262c <oppdater_parameter+0x738>)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6053      	str	r3, [r2, #4]
 80024e2:	e08a      	b.n	80025fa <oppdater_parameter+0x706>

	case 34:
		manpu_sensitivitet.gripe = (float) parameter;		break;
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <oppdater_parameter+0x73c>)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e086      	b.n	80025fa <oppdater_parameter+0x706>
	case 35:
		manpu_sensitivitet.snurr = (float) parameter;		break;
 80024ec:	4a50      	ldr	r2, [pc, #320]	; (8002630 <oppdater_parameter+0x73c>)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6053      	str	r3, [r2, #4]
 80024f2:	e082      	b.n	80025fa <oppdater_parameter+0x706>
	case 36:
		manpu_sensitivitet.sving = (float) parameter;		break;
 80024f4:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <oppdater_parameter+0x73c>)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	6093      	str	r3, [r2, #8]
 80024fa:	e07e      	b.n	80025fa <oppdater_parameter+0x706>
//	case (..):
//			manpu_sensitivitet.skyv = (float) parameter;		break;


	case 50:
		PID_rull.uimaks = parameter;			break;
 80024fc:	4a42      	ldr	r2, [pc, #264]	; (8002608 <oppdater_parameter+0x714>)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002502:	e07a      	b.n	80025fa <oppdater_parameter+0x706>
	case 51:
		PID_rull.uimin = parameter;			   break;
 8002504:	4a40      	ldr	r2, [pc, #256]	; (8002608 <oppdater_parameter+0x714>)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	e076      	b.n	80025fa <oppdater_parameter+0x706>
	case 52:
		PID_stamp.uimaks = parameter;			break;
 800250c:	4a3f      	ldr	r2, [pc, #252]	; (800260c <oppdater_parameter+0x718>)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002512:	e072      	b.n	80025fa <oppdater_parameter+0x706>
	case 53:
		PID_stamp.uimin = parameter;			break;
 8002514:	4a3d      	ldr	r2, [pc, #244]	; (800260c <oppdater_parameter+0x718>)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	e06e      	b.n	80025fa <oppdater_parameter+0x706>
	case 54:
		PID_hiv.uimaks = parameter;			break;
 800251c:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <oppdater_parameter+0x71c>)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002522:	e06a      	b.n	80025fa <oppdater_parameter+0x706>
	case 55:
		PID_hiv.uimin = parameter;			break;
 8002524:	4a3a      	ldr	r2, [pc, #232]	; (8002610 <oppdater_parameter+0x71c>)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	e066      	b.n	80025fa <oppdater_parameter+0x706>

	case 100:
		ENDRE_FREKVENS = (uint8_t) parameter; break;
 800252c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002534:	edc7 7a01 	vstr	s15, [r7, #4]
 8002538:	793b      	ldrb	r3, [r7, #4]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <oppdater_parameter+0x740>)
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e05b      	b.n	80025fa <oppdater_parameter+0x706>


	case 200:
		pos_paa_PWM.a = parameter; break;
 8002542:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <oppdater_parameter+0x744>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e057      	b.n	80025fa <oppdater_parameter+0x706>
	case 201:
		pos_paa_PWM.b = parameter; break;
 800254a:	4a3b      	ldr	r2, [pc, #236]	; (8002638 <oppdater_parameter+0x744>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	6053      	str	r3, [r2, #4]
 8002550:	e053      	b.n	80025fa <oppdater_parameter+0x706>
	case 202:
		neg_paa_PWM.a = parameter; break;
 8002552:	4a3a      	ldr	r2, [pc, #232]	; (800263c <oppdater_parameter+0x748>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e04f      	b.n	80025fa <oppdater_parameter+0x706>
	case 203:
		neg_paa_PWM.b = parameter; break;
 800255a:	4a38      	ldr	r2, [pc, #224]	; (800263c <oppdater_parameter+0x748>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	6053      	str	r3, [r2, #4]
 8002560:	e04b      	b.n	80025fa <oppdater_parameter+0x706>
	case 204:
		pos_kr_paa.a = parameter; break;
 8002562:	4a37      	ldr	r2, [pc, #220]	; (8002640 <oppdater_parameter+0x74c>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e047      	b.n	80025fa <oppdater_parameter+0x706>
	case 205:
		pos_kr_paa.b = parameter; break;
 800256a:	4a35      	ldr	r2, [pc, #212]	; (8002640 <oppdater_parameter+0x74c>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6053      	str	r3, [r2, #4]
 8002570:	e043      	b.n	80025fa <oppdater_parameter+0x706>
	case 206:
		neg_kr_paa.a = parameter; break;
 8002572:	4a34      	ldr	r2, [pc, #208]	; (8002644 <oppdater_parameter+0x750>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e03f      	b.n	80025fa <oppdater_parameter+0x706>
	case 207:
		neg_kr_paa.b = parameter; break;
 800257a:	4a32      	ldr	r2, [pc, #200]	; (8002644 <oppdater_parameter+0x750>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6053      	str	r3, [r2, #4]
 8002580:	e03b      	b.n	80025fa <oppdater_parameter+0x706>


	case 300:
		REF.dybde = parameter; break;
 8002582:	4a31      	ldr	r2, [pc, #196]	; (8002648 <oppdater_parameter+0x754>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6093      	str	r3, [r2, #8]
 8002588:	e037      	b.n	80025fa <oppdater_parameter+0x706>
	case 301:
		REF.rull = parameter; break;
 800258a:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <oppdater_parameter+0x754>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e033      	b.n	80025fa <oppdater_parameter+0x706>
	case 302:
		REF.stamp = parameter; break;
 8002592:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <oppdater_parameter+0x754>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6053      	str	r3, [r2, #4]
 8002598:	e02f      	b.n	80025fa <oppdater_parameter+0x706>

	case 303:
		 manu_ARR_default.gripe = parameter; break;
 800259a:	edd7 7a02 	vldr	s15, [r7, #8]
 800259e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a2:	ee17 3a90 	vmov	r3, s15
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b28      	ldr	r3, [pc, #160]	; (800264c <oppdater_parameter+0x758>)
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	e025      	b.n	80025fa <oppdater_parameter+0x706>
	case 304:
		 manu_ARR_default.skyv = parameter; break;
 80025ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b6:	ee17 3a90 	vmov	r3, s15
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <oppdater_parameter+0x758>)
 80025be:	80da      	strh	r2, [r3, #6]
 80025c0:	e01b      	b.n	80025fa <oppdater_parameter+0x706>
	case 305:
		 manu_ARR_default.snurr= parameter; break;
 80025c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ca:	ee17 3a90 	vmov	r3, s15
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b1e      	ldr	r3, [pc, #120]	; (800264c <oppdater_parameter+0x758>)
 80025d2:	805a      	strh	r2, [r3, #2]
 80025d4:	e011      	b.n	80025fa <oppdater_parameter+0x706>
	case 306:
		 manu_ARR_default.sving= parameter; break;
 80025d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025de:	ee17 3a90 	vmov	r3, s15
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <oppdater_parameter+0x758>)
 80025e6:	809a      	strh	r2, [r3, #4]
 80025e8:	e007      	b.n	80025fa <oppdater_parameter+0x706>

	case 308:
		 motorkar.max_neg_retn = parameter; break;
 80025ea:	4a19      	ldr	r2, [pc, #100]	; (8002650 <oppdater_parameter+0x75c>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e003      	b.n	80025fa <oppdater_parameter+0x706>


	case 330:
		kraftdata.EFFEKT_begrensing = parameter; break;
 80025f2:	4a18      	ldr	r2, [pc, #96]	; (8002654 <oppdater_parameter+0x760>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6113      	str	r3, [r2, #16]
 80025f8:	bf00      	nop
	}
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000254 	.word	0x20000254
 800260c:	20000218 	.word	0x20000218
 8002610:	200001dc 	.word	0x200001dc
 8002614:	20000070 	.word	0x20000070
 8002618:	2000000c 	.word	0x2000000c
 800261c:	20000014 	.word	0x20000014
 8002620:	2000001c 	.word	0x2000001c
 8002624:	20000004 	.word	0x20000004
 8002628:	200002b0 	.word	0x200002b0
 800262c:	20000044 	.word	0x20000044
 8002630:	20000058 	.word	0x20000058
 8002634:	20000000 	.word	0x20000000
 8002638:	20000024 	.word	0x20000024
 800263c:	2000002c 	.word	0x2000002c
 8002640:	20000034 	.word	0x20000034
 8002644:	2000003c 	.word	0x2000003c
 8002648:	2000029c 	.word	0x2000029c
 800264c:	20000068 	.word	0x20000068
 8002650:	20000008 	.word	0x20000008
 8002654:	200002b8 	.word	0x200002b8

08002658 <sjekk_bryter>:

#include <globvariabler_dek.h>
#include <funksjoner_manpu.h>
#include "main.h"

void sjekk_bryter(void){
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
	if (GPIOC->IDR & B1_Pin) { 			// Sjekker om bryteren er trykket inn
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <sjekk_bryter+0x40>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <sjekk_bryter+0x26>
       if(!bryter_forrige_status) { 				// Var bryteren trykket inn sist kontrollsjekk
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <sjekk_bryter+0x44>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <sjekk_bryter+0x2c>
    	   bryter_forrige_status = 1;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <sjekk_bryter+0x44>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
    	   bryter_trykk = 1;      				// Nytt brytertrykk registrert
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <sjekk_bryter+0x48>)
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e002      	b.n	8002684 <sjekk_bryter+0x2c>
       }
	}
	else {
		bryter_forrige_status = 0;
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <sjekk_bryter+0x44>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
	}


	TIM8 -> CCR1 = 1500;
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <sjekk_bryter+0x4c>)
 8002686:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800268a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	48000800 	.word	0x48000800
 800269c:	200002d1 	.word	0x200002d1
 80026a0:	200002d0 	.word	0x200002d0
 80026a4:	40013400 	.word	0x40013400

080026a8 <null_bidrag_horisontal>:
#include <globvariabler_dek.h>
#include "math.h"
/////////////////////////// THUSTER-STRYING

// sette pådragsvariabel til 0
void null_bidrag_horisontal(thruster_struct *bidrag){
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    bidrag->hhb = 0;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
    bidrag->hhf = 0;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
    bidrag->hvb = 0;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
    bidrag->hvf = 0;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	60da      	str	r2, [r3, #12]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <null_bidrag_vertikal>:

void null_bidrag_vertikal(thruster_struct *bidrag){
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    bidrag->vhb = 0;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
    bidrag->vhf = 0;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
    bidrag->vvb = 0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
    bidrag->vvf = 0;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	61da      	str	r2, [r3, #28]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <null_bidrag_alle_regvar>:

//// sette alle regvar-bidrag for prosjekt til 0.
void null_bidrag_alle_regvar(void){
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
    null_bidrag_horisontal(&reguleringbidrag_hiv);
 8002714:	4809      	ldr	r0, [pc, #36]	; (800273c <null_bidrag_alle_regvar+0x2c>)
 8002716:	f7ff ffc7 	bl	80026a8 <null_bidrag_horisontal>
    null_bidrag_vertikal(&reguleringbidrag_hiv);
 800271a:	4808      	ldr	r0, [pc, #32]	; (800273c <null_bidrag_alle_regvar+0x2c>)
 800271c:	f7ff ffde 	bl	80026dc <null_bidrag_vertikal>
    null_bidrag_horisontal(&reguleringbidrag_stamp);
 8002720:	4807      	ldr	r0, [pc, #28]	; (8002740 <null_bidrag_alle_regvar+0x30>)
 8002722:	f7ff ffc1 	bl	80026a8 <null_bidrag_horisontal>
    null_bidrag_vertikal(&reguleringbidrag_stamp);
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <null_bidrag_alle_regvar+0x30>)
 8002728:	f7ff ffd8 	bl	80026dc <null_bidrag_vertikal>
    null_bidrag_horisontal(&reguleringbidrag_rull);
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <null_bidrag_alle_regvar+0x34>)
 800272e:	f7ff ffbb 	bl	80026a8 <null_bidrag_horisontal>
    null_bidrag_vertikal(&reguleringbidrag_rull);
 8002732:	4804      	ldr	r0, [pc, #16]	; (8002744 <null_bidrag_alle_regvar+0x34>)
 8002734:	f7ff ffd2 	bl	80026dc <null_bidrag_vertikal>
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000144 	.word	0x20000144
 8002740:	20000164 	.word	0x20000164
 8002744:	20000184 	.word	0x20000184

08002748 <beregning_operatorbidrag>:

///// BEREGN PÅDRAG STYRING

void beregning_operatorbidrag(void){
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
	operator_referanse.jag = (float) operator_referanse_int.jag;
 800274e:	4b94      	ldr	r3, [pc, #592]	; (80029a0 <beregning_operatorbidrag+0x258>)
 8002750:	f993 3000 	ldrsb.w	r3, [r3]
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800275c:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 800275e:	edc3 7a00 	vstr	s15, [r3]
	operator_referanse.svai = (float) operator_referanse_int.svai;
 8002762:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <beregning_operatorbidrag+0x258>)
 8002764:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002770:	4b8c      	ldr	r3, [pc, #560]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 8002772:	edc3 7a01 	vstr	s15, [r3, #4]
	operator_referanse.gir = (float) operator_referanse_int.gir;
 8002776:	4b8a      	ldr	r3, [pc, #552]	; (80029a0 <beregning_operatorbidrag+0x258>)
 8002778:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	4b87      	ldr	r3, [pc, #540]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 8002786:	edc3 7a02 	vstr	s15, [r3, #8]
	operator_referanse.hiv = (float) operator_referanse_int.hiv;
 800278a:	4b85      	ldr	r3, [pc, #532]	; (80029a0 <beregning_operatorbidrag+0x258>)
 800278c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 800279a:	edc3 7a03 	vstr	s15, [r3, #12]

	static uint32_t teller_til_aktiver_reg_hiv = 0;

	// dersom er jag eller svai i melding
	if (operator_referanse.jag || operator_referanse.svai){
 800279e:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ac:	d107      	bne.n	80027be <beregning_operatorbidrag+0x76>
 80027ae:	4b7d      	ldr	r3, [pc, #500]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 80027b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	d03e      	beq.n	800283c <beregning_operatorbidrag+0xf4>
        float jag = operator_referanse.jag * thrust_sensitivitet.jag;
 80027be:	4b79      	ldr	r3, [pc, #484]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 80027c0:	ed93 7a00 	vldr	s14, [r3]
 80027c4:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <beregning_operatorbidrag+0x260>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a03 	vstr	s15, [r7, #12]
        float svai = operator_referanse.svai * thrust_sensitivitet.svai;
 80027d2:	4b74      	ldr	r3, [pc, #464]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 80027d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80027d8:	4b73      	ldr	r3, [pc, #460]	; (80029a8 <beregning_operatorbidrag+0x260>)
 80027da:	edd3 7a01 	vldr	s15, [r3, #4]
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	edc7 7a02 	vstr	s15, [r7, #8]

        operatorbidrag.hhf = (jag - svai) / sqrtf(2);
 80027e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80027ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027f2:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80029ac <beregning_operatorbidrag+0x264>
 80027f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027fa:	4b6d      	ldr	r3, [pc, #436]	; (80029b0 <beregning_operatorbidrag+0x268>)
 80027fc:	edc3 7a00 	vstr	s15, [r3]
        operatorbidrag.hvf = (jag + svai) / sqrtf(2);
 8002800:	ed97 7a03 	vldr	s14, [r7, #12]
 8002804:	edd7 7a02 	vldr	s15, [r7, #8]
 8002808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800280c:	eddf 6a67 	vldr	s13, [pc, #412]	; 80029ac <beregning_operatorbidrag+0x264>
 8002810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002816:	edc3 7a03 	vstr	s15, [r3, #12]
        operatorbidrag.hhb = - operatorbidrag.hvf;
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <beregning_operatorbidrag+0x268>)
 800281c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002820:	eef1 7a67 	vneg.f32	s15, s15
 8002824:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002826:	edc3 7a01 	vstr	s15, [r3, #4]
        operatorbidrag.hvb = - operatorbidrag.hhf;
 800282a:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <beregning_operatorbidrag+0x268>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	eef1 7a67 	vneg.f32	s15, s15
 8002834:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002836:	edc3 7a02 	vstr	s15, [r3, #8]
	if (operator_referanse.jag || operator_referanse.svai){
 800283a:	e00f      	b.n	800285c <beregning_operatorbidrag+0x114>
    }
    else{
    	// må sette til null hvis melding tom, hvis ikke fortsetter å skrive
    	// forrige verdi
    	operatorbidrag.hhf = 0;
 800283c:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <beregning_operatorbidrag+0x268>)
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
    	operatorbidrag.hvf = 0;
 8002844:	4b5a      	ldr	r3, [pc, #360]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	60da      	str	r2, [r3, #12]
    	operatorbidrag.hhb = 0;
 800284c:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <beregning_operatorbidrag+0x268>)
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	605a      	str	r2, [r3, #4]
    	operatorbidrag.hvb = 0;
 8002854:	4b56      	ldr	r3, [pc, #344]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
    }

    // dersom er gir i melding
    if (operator_referanse.gir){
 800285c:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 800285e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002862:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	d031      	beq.n	80028d0 <beregning_operatorbidrag+0x188>
        // vil ha gir-rotasjon-krefter vesentlig svakere enn de andre
        float gir = operator_referanse.gir * thrust_sensitivitet.gir;
 800286c:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 800286e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002872:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <beregning_operatorbidrag+0x260>)
 8002874:	edd3 7a02 	vldr	s15, [r3, #8]
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	edc7 7a01 	vstr	s15, [r7, #4]
        operatorbidrag.hhf -= gir;
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	edd7 7a01 	vldr	s15, [r7, #4]
 800288a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288e:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002890:	edc3 7a00 	vstr	s15, [r3]
        operatorbidrag.hhb += gir;
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002896:	ed93 7a01 	vldr	s14, [r3, #4]
 800289a:	edd7 7a01 	vldr	s15, [r7, #4]
 800289e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <beregning_operatorbidrag+0x268>)
 80028a4:	edc3 7a01 	vstr	s15, [r3, #4]
        operatorbidrag.hvb -= gir;
 80028a8:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <beregning_operatorbidrag+0x268>)
 80028aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80028ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <beregning_operatorbidrag+0x268>)
 80028b8:	edc3 7a02 	vstr	s15, [r3, #8]
        operatorbidrag.hvf += gir;
 80028bc:	4b3c      	ldr	r3, [pc, #240]	; (80029b0 <beregning_operatorbidrag+0x268>)
 80028be:	ed93 7a03 	vldr	s14, [r3, #12]
 80028c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <beregning_operatorbidrag+0x268>)
 80028cc:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    // Bidrag til vertikale thrustere i tilfelle hiv
    if (operator_referanse.hiv){
 80028d0:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 80028d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80028d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	d020      	beq.n	8002922 <beregning_operatorbidrag+0x1da>

    	// settte flag for reg av hiv til 0
    	REG_AKTIVER_DYBDE = REG_AKTIVER_DYBDE & (~0x08);
 80028e0:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <beregning_operatorbidrag+0x26c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	f023 0308 	bic.w	r3, r3, #8
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <beregning_operatorbidrag+0x26c>)
 80028ec:	701a      	strb	r2, [r3, #0]

    	teller_til_aktiver_reg_hiv = 0;
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <beregning_operatorbidrag+0x270>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        float hiv = operator_referanse.hiv * thrust_sensitivitet.hiv;
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <beregning_operatorbidrag+0x25c>)
 80028f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <beregning_operatorbidrag+0x260>)
 80028fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002904:	edc7 7a00 	vstr	s15, [r7]
        operatorbidrag.vhf = hiv;
 8002908:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <beregning_operatorbidrag+0x268>)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6113      	str	r3, [r2, #16]
        operatorbidrag.vhb = hiv;
 800290e:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6153      	str	r3, [r2, #20]
        operatorbidrag.vvb = hiv;
 8002914:	4a26      	ldr	r2, [pc, #152]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6193      	str	r3, [r2, #24]
        operatorbidrag.vvf = hiv;
 800291a:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <beregning_operatorbidrag+0x268>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	61d3      	str	r3, [r2, #28]
    	operatorbidrag.vhf = 0;
        operatorbidrag.vhb = 0;
        operatorbidrag.vvb = 0;
        operatorbidrag.vvf = 0;
    }
}
 8002920:	e038      	b.n	8002994 <beregning_operatorbidrag+0x24c>
    	if(teller_til_aktiver_reg_hiv == 6){
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <beregning_operatorbidrag+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b06      	cmp	r3, #6
 8002928:	d118      	bne.n	800295c <beregning_operatorbidrag+0x214>
    		if (REG_AKTIVER & (0x08)){
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <beregning_operatorbidrag+0x274>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <beregning_operatorbidrag+0x206>
    			REG_AKTIVER_DYBDE = REG_AKTIVER_DYBDE | (0x08);
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <beregning_operatorbidrag+0x26c>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <beregning_operatorbidrag+0x26c>)
 8002942:	701a      	strb	r2, [r3, #0]
    			PID_hiv.Ref = sensordata.dybde;
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <beregning_operatorbidrag+0x278>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <beregning_operatorbidrag+0x27c>)
 800294a:	60d3      	str	r3, [r2, #12]
 800294c:	e006      	b.n	800295c <beregning_operatorbidrag+0x214>
    			REG_AKTIVER_DYBDE = REG_AKTIVER_DYBDE & (~0x08);
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <beregning_operatorbidrag+0x26c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	f023 0308 	bic.w	r3, r3, #8
 8002956:	b2da      	uxtb	r2, r3
 8002958:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <beregning_operatorbidrag+0x26c>)
 800295a:	701a      	strb	r2, [r3, #0]
    	teller_til_aktiver_reg_hiv++;
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <beregning_operatorbidrag+0x270>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <beregning_operatorbidrag+0x270>)
 8002964:	6013      	str	r3, [r2, #0]
    	if(teller_til_aktiver_reg_hiv>100){
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <beregning_operatorbidrag+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d902      	bls.n	8002974 <beregning_operatorbidrag+0x22c>
    		teller_til_aktiver_reg_hiv = 10;
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <beregning_operatorbidrag+0x270>)
 8002970:	220a      	movs	r2, #10
 8002972:	601a      	str	r2, [r3, #0]
    	operatorbidrag.vhf = 0;
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
        operatorbidrag.vhb = 0;
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <beregning_operatorbidrag+0x268>)
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	615a      	str	r2, [r3, #20]
        operatorbidrag.vvb = 0;
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <beregning_operatorbidrag+0x268>)
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
        operatorbidrag.vvf = 0;
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <beregning_operatorbidrag+0x268>)
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	61da      	str	r2, [r3, #28]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	200000dc 	.word	0x200000dc
 80029a4:	200000c8 	.word	0x200000c8
 80029a8:	20000044 	.word	0x20000044
 80029ac:	3fb504f3 	.word	0x3fb504f3
 80029b0:	200000e4 	.word	0x200000e4
 80029b4:	200000a4 	.word	0x200000a4
 80029b8:	200000a0 	.word	0x200000a0
 80029bc:	200000a5 	.word	0x200000a5
 80029c0:	20000290 	.word	0x20000290
 80029c4:	200001dc 	.word	0x200001dc

080029c8 <beregn_sum_bidrag>:

///// SUMMERE PÅDRAG

void beregn_sum_bidrag(void) {
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
    // horisontal
    sum_bidrag.hhf =
            operatorbidrag.hhf + reguleringbidrag_hiv.hhf + reguleringbidrag_stamp.hhf + reguleringbidrag_rull.hhf;
 80029cc:	4b56      	ldr	r3, [pc, #344]	; (8002b28 <beregn_sum_bidrag+0x160>)
 80029ce:	ed93 7a00 	vldr	s14, [r3]
 80029d2:	4b56      	ldr	r3, [pc, #344]	; (8002b2c <beregn_sum_bidrag+0x164>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029dc:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <beregn_sum_bidrag+0x168>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <beregn_sum_bidrag+0x16c>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.hhf =
 80029f0:	4b51      	ldr	r3, [pc, #324]	; (8002b38 <beregn_sum_bidrag+0x170>)
 80029f2:	edc3 7a00 	vstr	s15, [r3]
    sum_bidrag.hhb =
            operatorbidrag.hhb + reguleringbidrag_hiv.hhb + reguleringbidrag_stamp.hhb + reguleringbidrag_rull.hhb;
 80029f6:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <beregn_sum_bidrag+0x160>)
 80029f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <beregn_sum_bidrag+0x164>)
 80029fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <beregn_sum_bidrag+0x168>)
 8002a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a10:	4b48      	ldr	r3, [pc, #288]	; (8002b34 <beregn_sum_bidrag+0x16c>)
 8002a12:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a16:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.hhb =
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <beregn_sum_bidrag+0x170>)
 8002a1c:	edc3 7a01 	vstr	s15, [r3, #4]
    sum_bidrag.hvf =
            operatorbidrag.hvf + reguleringbidrag_hiv.hvf + reguleringbidrag_stamp.hvf + reguleringbidrag_rull.hvf;
 8002a20:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <beregn_sum_bidrag+0x160>)
 8002a22:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <beregn_sum_bidrag+0x164>)
 8002a28:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <beregn_sum_bidrag+0x168>)
 8002a32:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	; (8002b34 <beregn_sum_bidrag+0x16c>)
 8002a3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.hvf =
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <beregn_sum_bidrag+0x170>)
 8002a46:	edc3 7a03 	vstr	s15, [r3, #12]
    sum_bidrag.hvb =
            operatorbidrag.hvb + reguleringbidrag_hiv.hvb + reguleringbidrag_stamp.hvb + reguleringbidrag_rull.hvb;
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <beregn_sum_bidrag+0x160>)
 8002a4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <beregn_sum_bidrag+0x164>)
 8002a52:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a5a:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <beregn_sum_bidrag+0x168>)
 8002a5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a64:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <beregn_sum_bidrag+0x16c>)
 8002a66:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.hvb =
 8002a6e:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <beregn_sum_bidrag+0x170>)
 8002a70:	edc3 7a02 	vstr	s15, [r3, #8]
    // vertikal
    sum_bidrag.vhf =
            operatorbidrag.vhf + reguleringbidrag_hiv.vhf + reguleringbidrag_stamp.vhf + reguleringbidrag_rull.vhf;
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <beregn_sum_bidrag+0x160>)
 8002a76:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <beregn_sum_bidrag+0x164>)
 8002a7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a84:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <beregn_sum_bidrag+0x168>)
 8002a86:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8e:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <beregn_sum_bidrag+0x16c>)
 8002a90:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a94:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.vhf =
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <beregn_sum_bidrag+0x170>)
 8002a9a:	edc3 7a04 	vstr	s15, [r3, #16]
    sum_bidrag.vhb =
            operatorbidrag.vhb + reguleringbidrag_hiv.vhb + reguleringbidrag_stamp.vhb + reguleringbidrag_rull.vhb;
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <beregn_sum_bidrag+0x160>)
 8002aa0:	ed93 7a05 	vldr	s14, [r3, #20]
 8002aa4:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <beregn_sum_bidrag+0x164>)
 8002aa6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <beregn_sum_bidrag+0x168>)
 8002ab0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <beregn_sum_bidrag+0x16c>)
 8002aba:	edd3 7a05 	vldr	s15, [r3, #20]
 8002abe:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.vhb =
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <beregn_sum_bidrag+0x170>)
 8002ac4:	edc3 7a05 	vstr	s15, [r3, #20]
    sum_bidrag.vvf =
            operatorbidrag.vvf + reguleringbidrag_hiv.vvf + reguleringbidrag_stamp.vvf + reguleringbidrag_rull.vvf;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <beregn_sum_bidrag+0x160>)
 8002aca:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <beregn_sum_bidrag+0x164>)
 8002ad0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <beregn_sum_bidrag+0x168>)
 8002ada:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ade:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <beregn_sum_bidrag+0x16c>)
 8002ae4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.vvf =
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <beregn_sum_bidrag+0x170>)
 8002aee:	edc3 7a07 	vstr	s15, [r3, #28]
    sum_bidrag.vvb =
            operatorbidrag.vvb + reguleringbidrag_hiv.vvb + reguleringbidrag_stamp.vvb + reguleringbidrag_rull.vvb;
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <beregn_sum_bidrag+0x160>)
 8002af4:	ed93 7a06 	vldr	s14, [r3, #24]
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <beregn_sum_bidrag+0x164>)
 8002afa:	edd3 7a06 	vldr	s15, [r3, #24]
 8002afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <beregn_sum_bidrag+0x168>)
 8002b04:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <beregn_sum_bidrag+0x16c>)
 8002b0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b12:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.vvb =
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <beregn_sum_bidrag+0x170>)
 8002b18:	edc3 7a06 	vstr	s15, [r3, #24]

}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	200000e4 	.word	0x200000e4
 8002b2c:	20000144 	.word	0x20000144
 8002b30:	20000164 	.word	0x20000164
 8002b34:	20000184 	.word	0x20000184
 8002b38:	20000104 	.word	0x20000104

08002b3c <sjekk_saturation>:

///// SJEKK 1
///// FOR SATURATION AV SUM PÅDRAG NÅR OVER 100 ELLER MINDRE ENN -100

int8_t sjekk_saturation(void){
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
    // sjekk om sum større enn 100 -> trenger da å skalere ned

    if ( (fabsf(sum_bidrag.hhf) > 100) || (fabsf(sum_bidrag.hhb) > 100) || \
 8002b40:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <sjekk_saturation+0xd4>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	eef0 7ae7 	vabs.f32	s15, s15
 8002b4a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002c14 <sjekk_saturation+0xd8>
 8002b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b56:	dc53      	bgt.n	8002c00 <sjekk_saturation+0xc4>
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <sjekk_saturation+0xd4>)
 8002b5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b5e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b62:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002c14 <sjekk_saturation+0xd8>
 8002b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6e:	dc47      	bgt.n	8002c00 <sjekk_saturation+0xc4>
         (fabsf(sum_bidrag.hvf) > 100) || (fabsf(sum_bidrag.hvb) > 100) || \
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <sjekk_saturation+0xd4>)
 8002b72:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b76:	eef0 7ae7 	vabs.f32	s15, s15
    if ( (fabsf(sum_bidrag.hhf) > 100) || (fabsf(sum_bidrag.hhb) > 100) || \
 8002b7a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002c14 <sjekk_saturation+0xd8>
 8002b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	dc3b      	bgt.n	8002c00 <sjekk_saturation+0xc4>
         (fabsf(sum_bidrag.hvf) > 100) || (fabsf(sum_bidrag.hvb) > 100) || \
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <sjekk_saturation+0xd4>)
 8002b8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b8e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b92:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002c14 <sjekk_saturation+0xd8>
 8002b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	dc2f      	bgt.n	8002c00 <sjekk_saturation+0xc4>
         (fabsf(sum_bidrag.vhf) > 100) || (fabsf(sum_bidrag.vhb) > 100) || \
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <sjekk_saturation+0xd4>)
 8002ba2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ba6:	eef0 7ae7 	vabs.f32	s15, s15
         (fabsf(sum_bidrag.hvf) > 100) || (fabsf(sum_bidrag.hvb) > 100) || \
 8002baa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002c14 <sjekk_saturation+0xd8>
 8002bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	dc23      	bgt.n	8002c00 <sjekk_saturation+0xc4>
         (fabsf(sum_bidrag.vhf) > 100) || (fabsf(sum_bidrag.vhb) > 100) || \
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <sjekk_saturation+0xd4>)
 8002bba:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bbe:	eef0 7ae7 	vabs.f32	s15, s15
 8002bc2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002c14 <sjekk_saturation+0xd8>
 8002bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	dc17      	bgt.n	8002c00 <sjekk_saturation+0xc4>
         (fabsf(sum_bidrag.vvf) > 100) || (fabsf(sum_bidrag.vvb) > 100)) {
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <sjekk_saturation+0xd4>)
 8002bd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bd6:	eef0 7ae7 	vabs.f32	s15, s15
         (fabsf(sum_bidrag.vhf) > 100) || (fabsf(sum_bidrag.vhb) > 100) || \
 8002bda:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002c14 <sjekk_saturation+0xd8>
 8002bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be6:	dc0b      	bgt.n	8002c00 <sjekk_saturation+0xc4>
         (fabsf(sum_bidrag.vvf) > 100) || (fabsf(sum_bidrag.vvb) > 100)) {
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <sjekk_saturation+0xd4>)
 8002bea:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bee:	eef0 7ae7 	vabs.f32	s15, s15
 8002bf2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002c14 <sjekk_saturation+0xd8>
 8002bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	dd01      	ble.n	8002c04 <sjekk_saturation+0xc8>
        return 1;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <sjekk_saturation+0xca>
    }
    return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20000104 	.word	0x20000104
 8002c14:	42c80000 	.word	0x42c80000

08002c18 <skalere_ned_saturation>:

void skalere_ned_saturation(float grense_variabel) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	ed87 0a01 	vstr	s0, [r7, #4]
    grense_variabel = fabsf(grense_variabel);
 8002c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c26:	eef0 7ae7 	vabs.f32	s15, s15
 8002c2a:	edc7 7a01 	vstr	s15, [r7, #4]
    float over_grense[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8002c2e:	f107 0308 	add.w	r3, r7, #8
 8002c32:	2220      	movs	r2, #32
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f006 fdcc 	bl	80097d4 <memset>

    if (fabsf(sum_bidrag.hhf) > grense_variabel) { over_grense[0] = fabsf(sum_bidrag.hhf); }
 8002c3c:	4b8b      	ldr	r3, [pc, #556]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	eef0 7ae7 	vabs.f32	s15, s15
 8002c46:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d506      	bpl.n	8002c62 <skalere_ned_saturation+0x4a>
 8002c54:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c5e:	edc7 7a02 	vstr	s15, [r7, #8]
    if (fabsf(sum_bidrag.hhb) > grense_variabel) { over_grense[1] = fabsf(sum_bidrag.hhb); }
 8002c62:	4b82      	ldr	r3, [pc, #520]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002c64:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c68:	eef0 7ae7 	vabs.f32	s15, s15
 8002c6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	d506      	bpl.n	8002c88 <skalere_ned_saturation+0x70>
 8002c7a:	4b7c      	ldr	r3, [pc, #496]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002c7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c80:	eef0 7ae7 	vabs.f32	s15, s15
 8002c84:	edc7 7a03 	vstr	s15, [r7, #12]
    if (fabsf(sum_bidrag.hvf) > grense_variabel) { over_grense[2] = fabsf(sum_bidrag.hvf) ; }
 8002c88:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002c8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c8e:	eef0 7ae7 	vabs.f32	s15, s15
 8002c92:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	d506      	bpl.n	8002cae <skalere_ned_saturation+0x96>
 8002ca0:	4b72      	ldr	r3, [pc, #456]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002ca2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ca6:	eef0 7ae7 	vabs.f32	s15, s15
 8002caa:	edc7 7a04 	vstr	s15, [r7, #16]
    if (fabsf(sum_bidrag.hvb) > grense_variabel) { over_grense[3] = fabsf(sum_bidrag.hvb); }
 8002cae:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002cb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cb4:	eef0 7ae7 	vabs.f32	s15, s15
 8002cb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	d506      	bpl.n	8002cd4 <skalere_ned_saturation+0xbc>
 8002cc6:	4b69      	ldr	r3, [pc, #420]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002cc8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ccc:	eef0 7ae7 	vabs.f32	s15, s15
 8002cd0:	edc7 7a05 	vstr	s15, [r7, #20]

    if (fabsf(sum_bidrag.vhf) > grense_variabel) { over_grense[4] = fabsf(sum_bidrag.vhf) ; }
 8002cd4:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002cd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cda:	eef0 7ae7 	vabs.f32	s15, s15
 8002cde:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	d506      	bpl.n	8002cfa <skalere_ned_saturation+0xe2>
 8002cec:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002cee:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cf2:	eef0 7ae7 	vabs.f32	s15, s15
 8002cf6:	edc7 7a06 	vstr	s15, [r7, #24]
    if (fabsf(sum_bidrag.vhb) > grense_variabel) { over_grense[5] = fabsf(sum_bidrag.vhb); }
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002cfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d00:	eef0 7ae7 	vabs.f32	s15, s15
 8002d04:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	d506      	bpl.n	8002d20 <skalere_ned_saturation+0x108>
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002d14:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d18:	eef0 7ae7 	vabs.f32	s15, s15
 8002d1c:	edc7 7a07 	vstr	s15, [r7, #28]
    if (fabsf(sum_bidrag.vvf) > grense_variabel) { over_grense[6] = fabsf(sum_bidrag.vvf) ; }
 8002d20:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002d22:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d26:	eef0 7ae7 	vabs.f32	s15, s15
 8002d2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d36:	d506      	bpl.n	8002d46 <skalere_ned_saturation+0x12e>
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002d3a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d3e:	eef0 7ae7 	vabs.f32	s15, s15
 8002d42:	edc7 7a08 	vstr	s15, [r7, #32]
    if (fabsf(sum_bidrag.vvb) > grense_variabel) { over_grense[7] = fabsf(sum_bidrag.vvb);}
 8002d46:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002d48:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d4c:	eef0 7ae7 	vabs.f32	s15, s15
 8002d50:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	d506      	bpl.n	8002d6c <skalere_ned_saturation+0x154>
 8002d5e:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002d60:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d64:	eef0 7ae7 	vabs.f32	s15, s15
 8002d68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    //Calculate length of array arr
    // int length = sizeof(over_grense) / sizeof(over_grense[0]);
    // bedre med fast verdi her, slipper dele operasjon.
    int length = 8;
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

    //Initialize min with first element of array.
    float hoyest = over_grense[0];
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34

    //Loop through the array
    for (int i = 0; i < length; i++) {
 8002d74:	2300      	movs	r3, #0
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
 8002d78:	e017      	b.n	8002daa <skalere_ned_saturation+0x192>
        //Compare elements of array with min
        if (over_grense[i] > hoyest)
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	3338      	adds	r3, #56	; 0x38
 8002d80:	443b      	add	r3, r7
 8002d82:	3b30      	subs	r3, #48	; 0x30
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	d506      	bpl.n	8002da4 <skalere_ned_saturation+0x18c>
            hoyest = over_grense[i];
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	3338      	adds	r3, #56	; 0x38
 8002d9c:	443b      	add	r3, r7
 8002d9e:	3b30      	subs	r3, #48	; 0x30
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < length; i++) {
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	3301      	adds	r3, #1
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
 8002daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	429a      	cmp	r2, r3
 8002db0:	dbe3      	blt.n	8002d7a <skalere_ned_saturation+0x162>
    }

    float skalerings_variabel = grense_variabel/hoyest;
 8002db2:	edd7 6a01 	vldr	s13, [r7, #4]
 8002db6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dbe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    sum_bidrag.hhf *= skalerings_variabel;
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002dc4:	ed93 7a00 	vldr	s14, [r3]
 8002dc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd0:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002dd2:	edc3 7a00 	vstr	s15, [r3]
    sum_bidrag.hhb *= skalerings_variabel;
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002dd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ddc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002de6:	edc3 7a01 	vstr	s15, [r3, #4]
    sum_bidrag.hvf *= skalerings_variabel;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002dec:	ed93 7a03 	vldr	s14, [r3, #12]
 8002df0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002dfa:	edc3 7a03 	vstr	s15, [r3, #12]
    sum_bidrag.hvb *= skalerings_variabel;
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e00:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e0e:	edc3 7a02 	vstr	s15, [r3, #8]

    sum_bidrag.vhf *= skalerings_variabel;
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e14:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e22:	edc3 7a04 	vstr	s15, [r3, #16]
    sum_bidrag.vhb *= skalerings_variabel;
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e28:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e36:	edc3 7a05 	vstr	s15, [r3, #20]
    sum_bidrag.vvf *= skalerings_variabel;
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e3c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002e40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e4a:	edc3 7a07 	vstr	s15, [r3, #28]
    sum_bidrag.vvb *= skalerings_variabel;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e50:	ed93 7a06 	vldr	s14, [r3, #24]
 8002e54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <skalere_ned_saturation+0x254>)
 8002e5e:	edc3 7a06 	vstr	s15, [r3, #24]

}
 8002e62:	bf00      	nop
 8002e64:	3738      	adds	r7, #56	; 0x38
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000104 	.word	0x20000104

08002e70 <horisontal_demping>:

///// SJEKK 2
///// FOR FILTERING


void horisontal_demping(void){
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
	// first order lowpass
	// y[k] = a*y[k-1] + (1-a)*x[k]
	float a =  lowpass_thruster.a;
 8002e76:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <horisontal_demping+0xd0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	607b      	str	r3, [r7, #4]
    sum_bidrag.hhf = (1-a) *sum_bidrag_forrige1.hhf +   a*sum_bidrag.hhf;
 8002e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e88:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <horisontal_demping+0xd4>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <horisontal_demping+0xd8>)
 8002e94:	edd3 6a00 	vldr	s13, [r3]
 8002e98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <horisontal_demping+0xd8>)
 8002ea6:	edc3 7a00 	vstr	s15, [r3]
    sum_bidrag.hhb = (1-a) *sum_bidrag_forrige1.hhb +   a*sum_bidrag.hhb ;
 8002eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <horisontal_demping+0xd4>)
 8002eb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec0:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <horisontal_demping+0xd8>)
 8002ec2:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ec6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <horisontal_demping+0xd8>)
 8002ed4:	edc3 7a01 	vstr	s15, [r3, #4]
    sum_bidrag.hvf = (1-a) *sum_bidrag_forrige1.hvf +   a*sum_bidrag.hvf;
 8002ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ee4:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <horisontal_demping+0xd4>)
 8002ee6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <horisontal_demping+0xd8>)
 8002ef0:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <horisontal_demping+0xd8>)
 8002f02:	edc3 7a03 	vstr	s15, [r3, #12]
    sum_bidrag.hvb = (1-a) *sum_bidrag_forrige1.hvb +   a*sum_bidrag.hvb;
 8002f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <horisontal_demping+0xd4>)
 8002f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <horisontal_demping+0xd8>)
 8002f1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <horisontal_demping+0xd8>)
 8002f30:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	20000124 	.word	0x20000124
 8002f48:	20000104 	.word	0x20000104

08002f4c <vertikal_demping>:

void vertikal_demping(void){
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
	float a =  lowpass_thruster.a;
 8002f52:	4b32      	ldr	r3, [pc, #200]	; (800301c <vertikal_demping+0xd0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	607b      	str	r3, [r7, #4]
    sum_bidrag.vhf = (1-a) *sum_bidrag_forrige1.vhf +   a*sum_bidrag.vhf;
 8002f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f64:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <vertikal_demping+0xd4>)
 8002f66:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <vertikal_demping+0xd8>)
 8002f70:	edd3 6a04 	vldr	s13, [r3, #16]
 8002f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <vertikal_demping+0xd8>)
 8002f82:	edc3 7a04 	vstr	s15, [r3, #16]
    sum_bidrag.vhb = (1-a) *sum_bidrag_forrige1.vhb +   a*sum_bidrag.vhb ;
 8002f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f92:	4b23      	ldr	r3, [pc, #140]	; (8003020 <vertikal_demping+0xd4>)
 8002f94:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <vertikal_demping+0xd8>)
 8002f9e:	edd3 6a05 	vldr	s13, [r3, #20]
 8002fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <vertikal_demping+0xd8>)
 8002fb0:	edc3 7a05 	vstr	s15, [r3, #20]
    sum_bidrag.vvf = (1-a) *sum_bidrag_forrige1.vvf +   a*sum_bidrag.vvf;
 8002fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <vertikal_demping+0xd4>)
 8002fc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fca:	4b16      	ldr	r3, [pc, #88]	; (8003024 <vertikal_demping+0xd8>)
 8002fcc:	edd3 6a07 	vldr	s13, [r3, #28]
 8002fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <vertikal_demping+0xd8>)
 8002fde:	edc3 7a07 	vstr	s15, [r3, #28]
    sum_bidrag.vvb = (1-a) *sum_bidrag_forrige1.vvb +   a*sum_bidrag.vvb;
 8002fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <vertikal_demping+0xd4>)
 8002ff0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <vertikal_demping+0xd8>)
 8002ffa:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <vertikal_demping+0xd8>)
 800300c:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	2000000c 	.word	0x2000000c
 8003020:	20000124 	.word	0x20000124
 8003024:	20000104 	.word	0x20000104

08003028 <differanse_sjekk>:

int differanse_sjekk(float var_forrige, float var_naa,float begrensing) {
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003032:	edc7 0a02 	vstr	s1, [r7, #8]
 8003036:	ed87 1a01 	vstr	s2, [r7, #4]
    if (((var_naa - var_forrige) >= begrensing) || ((var_forrige - var_naa) >= begrensing)) {
 800303a:	ed97 7a02 	vldr	s14, [r7, #8]
 800303e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003046:	ed97 7a01 	vldr	s14, [r7, #4]
 800304a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003052:	d90c      	bls.n	800306e <differanse_sjekk+0x46>
 8003054:	ed97 7a03 	vldr	s14, [r7, #12]
 8003058:	edd7 7a02 	vldr	s15, [r7, #8]
 800305c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003060:	ed97 7a01 	vldr	s14, [r7, #4]
 8003064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	d801      	bhi.n	8003072 <differanse_sjekk+0x4a>
        return 1;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <differanse_sjekk+0x4c>
    }
    return 0;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <horisontal_differanse>:
// sjekker horisontale og vertikale hver for seg, da pådrag på vertikale og horisontale er uavhengige av
// hverandre. Unngår å skalere ned unødvendig mange thrustere.
// NB; må velge verdi for BEGRENSING

// for horisontale
int horisontal_differanse(void){
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
    if (differanse_sjekk(sum_bidrag_forrige1.hhf,sum_bidrag.hhf,BEGRENSING)){
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <horisontal_differanse+0xbc>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <horisontal_differanse+0xc0>)
 800308c:	ed93 7a00 	vldr	s14, [r3]
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <horisontal_differanse+0xc4>)
 8003092:	edd3 6a00 	vldr	s13, [r3]
 8003096:	eeb0 1a66 	vmov.f32	s2, s13
 800309a:	eef0 0a47 	vmov.f32	s1, s14
 800309e:	eeb0 0a67 	vmov.f32	s0, s15
 80030a2:	f7ff ffc1 	bl	8003028 <differanse_sjekk>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <horisontal_differanse+0x30>
        return 1;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e042      	b.n	8003136 <horisontal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.hhb,sum_bidrag.hhb,BEGRENSING)){
 80030b0:	4b22      	ldr	r3, [pc, #136]	; (800313c <horisontal_differanse+0xbc>)
 80030b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <horisontal_differanse+0xc0>)
 80030b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <horisontal_differanse+0xc4>)
 80030be:	edd3 6a00 	vldr	s13, [r3]
 80030c2:	eeb0 1a66 	vmov.f32	s2, s13
 80030c6:	eef0 0a47 	vmov.f32	s1, s14
 80030ca:	eeb0 0a67 	vmov.f32	s0, s15
 80030ce:	f7ff ffab 	bl	8003028 <differanse_sjekk>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <horisontal_differanse+0x5c>
        return 1;
 80030d8:	2301      	movs	r3, #1
 80030da:	e02c      	b.n	8003136 <horisontal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.hvf,sum_bidrag.hvf,BEGRENSING)){
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <horisontal_differanse+0xbc>)
 80030de:	edd3 7a03 	vldr	s15, [r3, #12]
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <horisontal_differanse+0xc0>)
 80030e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80030e8:	4b16      	ldr	r3, [pc, #88]	; (8003144 <horisontal_differanse+0xc4>)
 80030ea:	edd3 6a00 	vldr	s13, [r3]
 80030ee:	eeb0 1a66 	vmov.f32	s2, s13
 80030f2:	eef0 0a47 	vmov.f32	s1, s14
 80030f6:	eeb0 0a67 	vmov.f32	s0, s15
 80030fa:	f7ff ff95 	bl	8003028 <differanse_sjekk>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <horisontal_differanse+0x88>
        return 1;
 8003104:	2301      	movs	r3, #1
 8003106:	e016      	b.n	8003136 <horisontal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.hvb,sum_bidrag.hvb,BEGRENSING)){
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <horisontal_differanse+0xbc>)
 800310a:	edd3 7a02 	vldr	s15, [r3, #8]
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <horisontal_differanse+0xc0>)
 8003110:	ed93 7a02 	vldr	s14, [r3, #8]
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <horisontal_differanse+0xc4>)
 8003116:	edd3 6a00 	vldr	s13, [r3]
 800311a:	eeb0 1a66 	vmov.f32	s2, s13
 800311e:	eef0 0a47 	vmov.f32	s1, s14
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	f7ff ff7f 	bl	8003028 <differanse_sjekk>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <horisontal_differanse+0xb4>
        return 1;
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <horisontal_differanse+0xb6>
    }
    return 0;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000124 	.word	0x20000124
 8003140:	20000104 	.word	0x20000104
 8003144:	20000004 	.word	0x20000004

08003148 <vertikal_differanse>:

// for vertikale
int vertikal_differanse(void){
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
    if (differanse_sjekk(sum_bidrag_forrige1.vhf,sum_bidrag.vhf,BEGRENSING)){
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <vertikal_differanse+0xbc>)
 800314e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003152:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <vertikal_differanse+0xc0>)
 8003154:	ed93 7a04 	vldr	s14, [r3, #16]
 8003158:	4b2c      	ldr	r3, [pc, #176]	; (800320c <vertikal_differanse+0xc4>)
 800315a:	edd3 6a00 	vldr	s13, [r3]
 800315e:	eeb0 1a66 	vmov.f32	s2, s13
 8003162:	eef0 0a47 	vmov.f32	s1, s14
 8003166:	eeb0 0a67 	vmov.f32	s0, s15
 800316a:	f7ff ff5d 	bl	8003028 <differanse_sjekk>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <vertikal_differanse+0x30>
        return 1;
 8003174:	2301      	movs	r3, #1
 8003176:	e042      	b.n	80031fe <vertikal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.vhb,sum_bidrag.vhb,BEGRENSING)){
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <vertikal_differanse+0xbc>)
 800317a:	edd3 7a05 	vldr	s15, [r3, #20]
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <vertikal_differanse+0xc0>)
 8003180:	ed93 7a05 	vldr	s14, [r3, #20]
 8003184:	4b21      	ldr	r3, [pc, #132]	; (800320c <vertikal_differanse+0xc4>)
 8003186:	edd3 6a00 	vldr	s13, [r3]
 800318a:	eeb0 1a66 	vmov.f32	s2, s13
 800318e:	eef0 0a47 	vmov.f32	s1, s14
 8003192:	eeb0 0a67 	vmov.f32	s0, s15
 8003196:	f7ff ff47 	bl	8003028 <differanse_sjekk>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <vertikal_differanse+0x5c>
        return 1;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e02c      	b.n	80031fe <vertikal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.vvf,sum_bidrag.vvf,BEGRENSING)){
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <vertikal_differanse+0xbc>)
 80031a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <vertikal_differanse+0xc0>)
 80031ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <vertikal_differanse+0xc4>)
 80031b2:	edd3 6a00 	vldr	s13, [r3]
 80031b6:	eeb0 1a66 	vmov.f32	s2, s13
 80031ba:	eef0 0a47 	vmov.f32	s1, s14
 80031be:	eeb0 0a67 	vmov.f32	s0, s15
 80031c2:	f7ff ff31 	bl	8003028 <differanse_sjekk>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <vertikal_differanse+0x88>
        return 1;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e016      	b.n	80031fe <vertikal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.vvb,sum_bidrag.vvb,BEGRENSING)){
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <vertikal_differanse+0xbc>)
 80031d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <vertikal_differanse+0xc0>)
 80031d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <vertikal_differanse+0xc4>)
 80031de:	edd3 6a00 	vldr	s13, [r3]
 80031e2:	eeb0 1a66 	vmov.f32	s2, s13
 80031e6:	eef0 0a47 	vmov.f32	s1, s14
 80031ea:	eeb0 0a67 	vmov.f32	s0, s15
 80031ee:	f7ff ff1b 	bl	8003028 <differanse_sjekk>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <vertikal_differanse+0xb4>
        return 1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <vertikal_differanse+0xb6>
    }
    return 0;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000124 	.word	0x20000124
 8003208:	20000104 	.word	0x20000104
 800320c:	20000004 	.word	0x20000004

08003210 <konverter_paadrag_PWM>:

// tilnærmet lineær sammenheng mellom pådrag og pulsbredden på PWM-singalet.
// for pådrag > 0 er sammenhengen pulsbredde = (-1)*pådrag*3.3 + 1500
// for pådrag = 0 er pulsbredden 1500 (us)

int16_t konverter_paadrag_PWM(float paadrag){
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	ed87 0a01 	vstr	s0, [r7, #4]
    if(fabsf(paadrag)>0) {return (int16_t) (neg_paa_PWM.a*(-paadrag) + neg_paa_PWM.b);}
 800321a:	edd7 7a01 	vldr	s15, [r7, #4]
 800321e:	eef0 7ae7 	vabs.f32	s15, s15
 8003222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	dd13      	ble.n	8003254 <konverter_paadrag_PWM+0x44>
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <konverter_paadrag_PWM+0x54>)
 800322e:	ed93 7a00 	vldr	s14, [r3]
 8003232:	edd7 7a01 	vldr	s15, [r7, #4]
 8003236:	eef1 7a67 	vneg.f32	s15, s15
 800323a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <konverter_paadrag_PWM+0x54>)
 8003240:	edd3 7a01 	vldr	s15, [r3, #4]
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800324c:	ee17 3a90 	vmov	r3, s15
 8003250:	b21b      	sxth	r3, r3
 8003252:	e001      	b.n	8003258 <konverter_paadrag_PWM+0x48>
    else {return (int16_t) 1500;}
 8003254:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	2000002c 	.word	0x2000002c

08003268 <konverter_sum_bidrag_PWM>:


void konverter_sum_bidrag_PWM(void){
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
    sum_bidrag_PWM.hhf = konverter_paadrag_PWM(sum_bidrag.hhf);
 800326c:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <konverter_sum_bidrag_PWM+0xb8>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	eeb0 0a67 	vmov.f32	s0, s15
 8003276:	f7ff ffcb 	bl	8003210 <konverter_paadrag_PWM>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <konverter_sum_bidrag_PWM+0xbc>)
 8003280:	801a      	strh	r2, [r3, #0]
    sum_bidrag_PWM.hhb = konverter_paadrag_PWM(sum_bidrag.hhb);
 8003282:	4b27      	ldr	r3, [pc, #156]	; (8003320 <konverter_sum_bidrag_PWM+0xb8>)
 8003284:	edd3 7a01 	vldr	s15, [r3, #4]
 8003288:	eeb0 0a67 	vmov.f32	s0, s15
 800328c:	f7ff ffc0 	bl	8003210 <konverter_paadrag_PWM>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <konverter_sum_bidrag_PWM+0xbc>)
 8003296:	805a      	strh	r2, [r3, #2]
    sum_bidrag_PWM.hvf = konverter_paadrag_PWM(sum_bidrag.hvf);
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <konverter_sum_bidrag_PWM+0xb8>)
 800329a:	edd3 7a03 	vldr	s15, [r3, #12]
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	f7ff ffb5 	bl	8003210 <konverter_paadrag_PWM>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <konverter_sum_bidrag_PWM+0xbc>)
 80032ac:	80da      	strh	r2, [r3, #6]
    sum_bidrag_PWM.hvb = konverter_paadrag_PWM(sum_bidrag.hvb);
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <konverter_sum_bidrag_PWM+0xb8>)
 80032b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	f7ff ffaa 	bl	8003210 <konverter_paadrag_PWM>
 80032bc:	4603      	mov	r3, r0
 80032be:	461a      	mov	r2, r3
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <konverter_sum_bidrag_PWM+0xbc>)
 80032c2:	809a      	strh	r2, [r3, #4]
    //
    sum_bidrag_PWM.vhf = konverter_paadrag_PWM(sum_bidrag.vhf);
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <konverter_sum_bidrag_PWM+0xb8>)
 80032c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80032ca:	eeb0 0a67 	vmov.f32	s0, s15
 80032ce:	f7ff ff9f 	bl	8003210 <konverter_paadrag_PWM>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <konverter_sum_bidrag_PWM+0xbc>)
 80032d8:	811a      	strh	r2, [r3, #8]
    sum_bidrag_PWM.vhb = konverter_paadrag_PWM(sum_bidrag.vhb);
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <konverter_sum_bidrag_PWM+0xb8>)
 80032dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80032e0:	eeb0 0a67 	vmov.f32	s0, s15
 80032e4:	f7ff ff94 	bl	8003210 <konverter_paadrag_PWM>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <konverter_sum_bidrag_PWM+0xbc>)
 80032ee:	815a      	strh	r2, [r3, #10]
    sum_bidrag_PWM.vvf = konverter_paadrag_PWM(sum_bidrag.vvf);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <konverter_sum_bidrag_PWM+0xb8>)
 80032f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80032f6:	eeb0 0a67 	vmov.f32	s0, s15
 80032fa:	f7ff ff89 	bl	8003210 <konverter_paadrag_PWM>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <konverter_sum_bidrag_PWM+0xbc>)
 8003304:	81da      	strh	r2, [r3, #14]
    sum_bidrag_PWM.vvb = konverter_paadrag_PWM(sum_bidrag.vvb);
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <konverter_sum_bidrag_PWM+0xb8>)
 8003308:	edd3 7a06 	vldr	s15, [r3, #24]
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	f7ff ff7e 	bl	8003210 <konverter_paadrag_PWM>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	4b02      	ldr	r3, [pc, #8]	; (8003324 <konverter_sum_bidrag_PWM+0xbc>)
 800331a:	819a      	strh	r2, [r3, #12]
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000104 	.word	0x20000104
 8003324:	200000b8 	.word	0x200000b8

08003328 <send_thruster_PWM>:

///// (..)
///// SKRIVING AV PULSBREDDE TIL TIMER REGISTER

void send_thruster_PWM(void){
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
    TIM2->CCR1 = sum_bidrag_PWM.hhf - 1;  		// HHF: T5-PWM-PA0-TIM2_CH1
 800332c:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <send_thruster_PWM+0x78>)
 800332e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003332:	1e5a      	subs	r2, r3, #1
 8003334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003338:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = sum_bidrag_PWM.hhb - 1;  		// HHB: T6-PWM-PA1-TIM2_CH2
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <send_thruster_PWM+0x78>)
 800333c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
    TIM2->CCR3 = sum_bidrag_PWM.hvb - 1;  		// HVB: T7-PWM-PB10-TIM2_CH3
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <send_thruster_PWM+0x78>)
 800334a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800334e:	1e5a      	subs	r2, r3, #1
 8003350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003354:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM2->CCR4 = sum_bidrag_PWM.hvf - 1;  		// HVF: T8-PWM-PB11-TIM2_CH4
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <send_thruster_PWM+0x78>)
 8003358:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800335c:	1e5a      	subs	r2, r3, #1
 800335e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
    TIM1->CCR1 = sum_bidrag_PWM.vhf - 1;  		// VHF: T1-PWM-PC0-TIM1_CH1
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <send_thruster_PWM+0x78>)
 8003366:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <send_thruster_PWM+0x7c>)
 800336e:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2 = sum_bidrag_PWM.vhb - 1;  		// VHB: T2-PWM-PC1-TIM1_CH2
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <send_thruster_PWM+0x78>)
 8003372:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <send_thruster_PWM+0x7c>)
 800337a:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3 = sum_bidrag_PWM.vvb - 1;  		// VVB: T3-PWM-PC2-TIM1_CH3
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <send_thruster_PWM+0x78>)
 800337e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003382:	1e5a      	subs	r2, r3, #1
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <send_thruster_PWM+0x7c>)
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM1->CCR4 = sum_bidrag_PWM.vvf - 1;  		// VVF: T4-PWM-PC3-TIM1_CH4
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <send_thruster_PWM+0x78>)
 800338a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800338e:	1e5a      	subs	r2, r3, #1
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <send_thruster_PWM+0x7c>)
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	200000b8 	.word	0x200000b8
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <thruster_data_lagring>:


///// (..)
///// DATA LAGRING

void thruster_data_lagring(void){
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0

//	// lagres for å bruke som referanse til regulering av hiv
//	operator_referanse_int_forrige.hiv =  operator_referanse_int.hiv;

    // lagre samplen k-1 for som skal brukes til filtering
    sum_bidrag_forrige1.hhf = sum_bidrag.hhf;
 80033ae:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <thruster_data_lagring+0x104>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a3f      	ldr	r2, [pc, #252]	; (80034b0 <thruster_data_lagring+0x108>)
 80033b4:	6013      	str	r3, [r2, #0]
    sum_bidrag_forrige1.hhb = sum_bidrag.hhb;
 80033b6:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <thruster_data_lagring+0x104>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a3d      	ldr	r2, [pc, #244]	; (80034b0 <thruster_data_lagring+0x108>)
 80033bc:	6053      	str	r3, [r2, #4]
    sum_bidrag_forrige1.hvf = sum_bidrag.hvf;
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <thruster_data_lagring+0x104>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	4a3b      	ldr	r2, [pc, #236]	; (80034b0 <thruster_data_lagring+0x108>)
 80033c4:	60d3      	str	r3, [r2, #12]
    sum_bidrag_forrige1.hvb = sum_bidrag.hvb;
 80033c6:	4b39      	ldr	r3, [pc, #228]	; (80034ac <thruster_data_lagring+0x104>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4a39      	ldr	r2, [pc, #228]	; (80034b0 <thruster_data_lagring+0x108>)
 80033cc:	6093      	str	r3, [r2, #8]
    sum_bidrag_forrige1.vhf = sum_bidrag.vhf;
 80033ce:	4b37      	ldr	r3, [pc, #220]	; (80034ac <thruster_data_lagring+0x104>)
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4a37      	ldr	r2, [pc, #220]	; (80034b0 <thruster_data_lagring+0x108>)
 80033d4:	6113      	str	r3, [r2, #16]
    sum_bidrag_forrige1.vhb = sum_bidrag.vhb;
 80033d6:	4b35      	ldr	r3, [pc, #212]	; (80034ac <thruster_data_lagring+0x104>)
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	4a35      	ldr	r2, [pc, #212]	; (80034b0 <thruster_data_lagring+0x108>)
 80033dc:	6153      	str	r3, [r2, #20]
    sum_bidrag_forrige1.vvf = sum_bidrag.vvf;
 80033de:	4b33      	ldr	r3, [pc, #204]	; (80034ac <thruster_data_lagring+0x104>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <thruster_data_lagring+0x108>)
 80033e4:	61d3      	str	r3, [r2, #28]
    sum_bidrag_forrige1.vvb = sum_bidrag.vvb;
 80033e6:	4b31      	ldr	r3, [pc, #196]	; (80034ac <thruster_data_lagring+0x104>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	4a31      	ldr	r2, [pc, #196]	; (80034b0 <thruster_data_lagring+0x108>)
 80033ec:	6193      	str	r3, [r2, #24]
    // lagre pådrag i int8_t som skal sendes opp til topside.
    sum_bidrag_int8.hhf = (int8_t) sum_bidrag.hhf;
 80033ee:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <thruster_data_lagring+0x104>)
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80033fc:	793b      	ldrb	r3, [r7, #4]
 80033fe:	b25a      	sxtb	r2, r3
 8003400:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <thruster_data_lagring+0x10c>)
 8003402:	701a      	strb	r2, [r3, #0]
    sum_bidrag_int8.hhb = (int8_t) sum_bidrag.hhb;
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <thruster_data_lagring+0x104>)
 8003406:	edd3 7a01 	vldr	s15, [r3, #4]
 800340a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800340e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003412:	793b      	ldrb	r3, [r7, #4]
 8003414:	b25a      	sxtb	r2, r3
 8003416:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <thruster_data_lagring+0x10c>)
 8003418:	705a      	strb	r2, [r3, #1]
    sum_bidrag_int8.hvf = (int8_t) sum_bidrag.hvf;
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <thruster_data_lagring+0x104>)
 800341c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003424:	edc7 7a01 	vstr	s15, [r7, #4]
 8003428:	793b      	ldrb	r3, [r7, #4]
 800342a:	b25a      	sxtb	r2, r3
 800342c:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <thruster_data_lagring+0x10c>)
 800342e:	70da      	strb	r2, [r3, #3]
    sum_bidrag_int8.hvb = (int8_t) sum_bidrag.hvb;
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <thruster_data_lagring+0x104>)
 8003432:	edd3 7a02 	vldr	s15, [r3, #8]
 8003436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800343a:	edc7 7a01 	vstr	s15, [r7, #4]
 800343e:	793b      	ldrb	r3, [r7, #4]
 8003440:	b25a      	sxtb	r2, r3
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <thruster_data_lagring+0x10c>)
 8003444:	709a      	strb	r2, [r3, #2]
    sum_bidrag_int8.vhf = (int8_t) sum_bidrag.vhf;
 8003446:	4b19      	ldr	r3, [pc, #100]	; (80034ac <thruster_data_lagring+0x104>)
 8003448:	edd3 7a04 	vldr	s15, [r3, #16]
 800344c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003450:	edc7 7a01 	vstr	s15, [r7, #4]
 8003454:	793b      	ldrb	r3, [r7, #4]
 8003456:	b25a      	sxtb	r2, r3
 8003458:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <thruster_data_lagring+0x10c>)
 800345a:	711a      	strb	r2, [r3, #4]
    sum_bidrag_int8.vhb = (int8_t) sum_bidrag.vhb;
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <thruster_data_lagring+0x104>)
 800345e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003466:	edc7 7a01 	vstr	s15, [r7, #4]
 800346a:	793b      	ldrb	r3, [r7, #4]
 800346c:	b25a      	sxtb	r2, r3
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <thruster_data_lagring+0x10c>)
 8003470:	715a      	strb	r2, [r3, #5]
    sum_bidrag_int8.vvf = (int8_t) sum_bidrag.vvf;
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <thruster_data_lagring+0x104>)
 8003474:	edd3 7a07 	vldr	s15, [r3, #28]
 8003478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800347c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003480:	793b      	ldrb	r3, [r7, #4]
 8003482:	b25a      	sxtb	r2, r3
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <thruster_data_lagring+0x10c>)
 8003486:	71da      	strb	r2, [r3, #7]
    sum_bidrag_int8.vvb = (int8_t) sum_bidrag.vvb;
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <thruster_data_lagring+0x104>)
 800348a:	edd3 7a06 	vldr	s15, [r3, #24]
 800348e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003492:	edc7 7a01 	vstr	s15, [r7, #4]
 8003496:	793b      	ldrb	r3, [r7, #4]
 8003498:	b25a      	sxtb	r2, r3
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <thruster_data_lagring+0x10c>)
 800349c:	719a      	strb	r2, [r3, #6]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000104 	.word	0x20000104
 80034b0:	20000124 	.word	0x20000124
 80034b4:	200000b0 	.word	0x200000b0

080034b8 <behandle_sum_bidrag>:


void behandle_sum_bidrag(void){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0

	// SJEKK 1
    // Sjekke om sum pådrag er større en 100 eller mindre enn -100, dersom er tilfelle, skalerer.
    if (sjekk_saturation()){
 80034bc:	f7ff fb3e 	bl	8002b3c <sjekk_saturation>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <behandle_sum_bidrag+0x16>
        skalere_ned_saturation(100);
 80034c6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80034fc <behandle_sum_bidrag+0x44>
 80034ca:	f7ff fba5 	bl	8002c18 <skalere_ned_saturation>
    }

    // SJEKK 2
    /// må finne variabler slik at ikke blir hakkete
    // sjekker om så stor differanse at må filtrere for motorene sin del (horisontal)
    if (horisontal_differanse()){
 80034ce:	f7ff fdd7 	bl	8003080 <horisontal_differanse>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <behandle_sum_bidrag+0x24>
        horisontal_demping();
 80034d8:	f7ff fcca 	bl	8002e70 <horisontal_demping>
    }

    // sjekker om så stor differanse at må filtrere for motorene sin del (vertikal)
    if (vertikal_differanse()){
 80034dc:	f7ff fe34 	bl	8003148 <vertikal_differanse>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <behandle_sum_bidrag+0x32>
        vertikal_demping();
 80034e6:	f7ff fd31 	bl	8002f4c <vertikal_demping>

//    if (effekt_sjekk()){
//    	effekt_begrensing();
//    }

    konverter_sum_bidrag_PWM();
 80034ea:	f7ff febd 	bl	8003268 <konverter_sum_bidrag_PWM>
    send_thruster_PWM();
 80034ee:	f7ff ff1b 	bl	8003328 <send_thruster_PWM>
    thruster_data_lagring();
 80034f2:	f7ff ff59 	bl	80033a8 <thruster_data_lagring>

}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	42c80000 	.word	0x42c80000

08003500 <oppstartCAN>:
/* USER CODE BEGIN 0 */


/* ----------------Funksjoner for CAN-Bus kommunikasjonsgruppe-----------*/

void oppstartCAN(FDCAN_HandleTypeDef *canPort) { // Konfigurerer CAN-bussen
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
// Configure filter for FDCAN1

			  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8003508:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <oppstartCAN+0x84>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
			  sFilterConfig.FilterIndex = 0;
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <oppstartCAN+0x84>)
 8003510:	2200      	movs	r2, #0
 8003512:	605a      	str	r2, [r3, #4]
			  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <oppstartCAN+0x84>)
 8003516:	2202      	movs	r2, #2
 8003518:	609a      	str	r2, [r3, #8]
			  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <oppstartCAN+0x84>)
 800351c:	2201      	movs	r2, #1
 800351e:	60da      	str	r2, [r3, #12]
			  sFilterConfig.FilterID1 = 0x20; // FilterID1 fra listen nedenfor settes her. Definerer filterID
 8003520:	4b18      	ldr	r3, [pc, #96]	; (8003584 <oppstartCAN+0x84>)
 8003522:	2220      	movs	r2, #32
 8003524:	611a      	str	r2, [r3, #16]
			  sFilterConfig.FilterID2 = 0xE0; // FilterID2 fra listen nedenfor settes her. Definerer maskeID
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <oppstartCAN+0x84>)
 8003528:	22e0      	movs	r2, #224	; 0xe0
 800352a:	615a      	str	r2, [r3, #20]
			  // Kraftkort: FilterID1 = 0x60, FilterID2 = 0xE0 --> Slipper gjennom ideer mellom 96-127 (0x60 - 0x7F)
			  // Kommunikasjonskort: FilterID1 = 0x80, FilterID2 = 0xE0 --> Slipper gjennom ideer mellom 128-159 (0x80 - 0x9F)
			  // Sett inn rett ID-er for din gruppe

			  // Configure TX Header for FDCAN1
			TxHeader.Identifier = 0x00;
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <oppstartCAN+0x88>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
			TxHeader.IdType = FDCAN_STANDARD_ID;
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <oppstartCAN+0x88>)
 8003534:	2200      	movs	r2, #0
 8003536:	605a      	str	r2, [r3, #4]
			TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <oppstartCAN+0x88>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
			TxHeader.DataLength = FDCAN_DLC_BYTES_8; // Antall byte som sendes
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <oppstartCAN+0x88>)
 8003540:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003544:	60da      	str	r2, [r3, #12]
			TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <oppstartCAN+0x88>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
			TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <oppstartCAN+0x88>)
 800354e:	2200      	movs	r2, #0
 8003550:	615a      	str	r2, [r3, #20]
			TxHeader.FDFormat = FDCAN_CLASSIC_CAN; // Bruker CAN og ikke FDCAN
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <oppstartCAN+0x88>)
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]
			TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <oppstartCAN+0x88>)
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
			TxHeader.MessageMarker = 0;
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <oppstartCAN+0x88>)
 8003560:	2200      	movs	r2, #0
 8003562:	621a      	str	r2, [r3, #32]

			HAL_FDCAN_ConfigFilter(canPort, &sFilterConfig);
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <oppstartCAN+0x84>)
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f001 fe8a 	bl	8005280 <HAL_FDCAN_ConfigFilter>
			HAL_FDCAN_Start(canPort);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f001 fee1 	bl	8005334 <HAL_FDCAN_Start>
			HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2101      	movs	r1, #1
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <oppstartCAN+0x8c>)
 8003578:	f002 f822 	bl	80055c0 <HAL_FDCAN_ActivateNotification>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000648 	.word	0x20000648
 8003588:	20000660 	.word	0x20000660
 800358c:	200002dc 	.word	0x200002dc

08003590 <sendCAN>:

void sendCAN(uint16_t id, FDCAN_HandleTypeDef *canPort) { // For sending av melding på CAN-bussen
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	80fb      	strh	r3, [r7, #6]

	TxHeader.Identifier = id;
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <sendCAN+0x24>)
 80035a0:	6013      	str	r3, [r2, #0]
	HAL_FDCAN_AddMessageToTxFifoQ(canPort, &TxHeader, TxData);
 80035a2:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <sendCAN+0x28>)
 80035a4:	4903      	ldr	r1, [pc, #12]	; (80035b4 <sendCAN+0x24>)
 80035a6:	6838      	ldr	r0, [r7, #0]
 80035a8:	f001 feec 	bl	8005384 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000660 	.word	0x20000660
 80035b8:	200006ac 	.word	0x200006ac

080035bc <TX_kopier_thrustpaadrag>:
/* ---------------- Andre funksjoner for CAN-Bus, kopier og skriv til RxData og TxData -----------------------------*/



// funksjon for å sende thrustpaadrag til topside
void TX_kopier_thrustpaadrag(void){
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <TX_kopier_thrustpaadrag+0x50>)
 80035c2:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData,   &sum_bidrag_int8.hhf, 1); // Kopierer 1 byte, sum_bidrag_int8.hhf til første byte i TxData
 80035c4:	4b12      	ldr	r3, [pc, #72]	; (8003610 <TX_kopier_thrustpaadrag+0x54>)
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <TX_kopier_thrustpaadrag+0x50>)
 80035ca:	785a      	ldrb	r2, [r3, #1]
	memcpy(&TxData[1],&sum_bidrag_int8.hhb, 1); // Kopierer 1 byte, sum_bidrag_int8.hhb til andre byte i TxData
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <TX_kopier_thrustpaadrag+0x54>)
 80035ce:	705a      	strb	r2, [r3, #1]
 80035d0:	4b0e      	ldr	r3, [pc, #56]	; (800360c <TX_kopier_thrustpaadrag+0x50>)
 80035d2:	789a      	ldrb	r2, [r3, #2]
	memcpy(&TxData[2],&sum_bidrag_int8.hvb, 1); // ..
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <TX_kopier_thrustpaadrag+0x54>)
 80035d6:	709a      	strb	r2, [r3, #2]
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <TX_kopier_thrustpaadrag+0x50>)
 80035da:	78da      	ldrb	r2, [r3, #3]
	memcpy(&TxData[3],&sum_bidrag_int8.hvf, 1);
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <TX_kopier_thrustpaadrag+0x54>)
 80035de:	70da      	strb	r2, [r3, #3]
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <TX_kopier_thrustpaadrag+0x50>)
 80035e2:	791a      	ldrb	r2, [r3, #4]
	memcpy(&TxData[4],&sum_bidrag_int8.vhf, 1);
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <TX_kopier_thrustpaadrag+0x54>)
 80035e6:	711a      	strb	r2, [r3, #4]
 80035e8:	4b08      	ldr	r3, [pc, #32]	; (800360c <TX_kopier_thrustpaadrag+0x50>)
 80035ea:	795a      	ldrb	r2, [r3, #5]
	memcpy(&TxData[5],&sum_bidrag_int8.vhb, 1);
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <TX_kopier_thrustpaadrag+0x54>)
 80035ee:	715a      	strb	r2, [r3, #5]
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <TX_kopier_thrustpaadrag+0x50>)
 80035f2:	799a      	ldrb	r2, [r3, #6]
	memcpy(&TxData[6],&sum_bidrag_int8.vvb, 1);
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <TX_kopier_thrustpaadrag+0x54>)
 80035f6:	719a      	strb	r2, [r3, #6]
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <TX_kopier_thrustpaadrag+0x50>)
 80035fa:	79da      	ldrb	r2, [r3, #7]
	memcpy(&TxData[7],&sum_bidrag_int8.vvf, 1);
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <TX_kopier_thrustpaadrag+0x54>)
 80035fe:	71da      	strb	r2, [r3, #7]
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200000b0 	.word	0x200000b0
 8003610:	200006ac 	.word	0x200006ac

08003614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800361a:	f001 fb34 	bl	8004c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800361e:	f000 f8f1 	bl	8003804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003622:	f000 fd6b 	bl	80040fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8003626:	f000 f9bf 	bl	80039a8 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 800362a:	f000 f937 	bl	800389c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 800362e:	f000 fafb 	bl	8003c28 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003632:	f000 fa41 	bl	8003ab8 <MX_TIM1_Init>
  MX_TIM16_Init();
 8003636:	f000 fce7 	bl	8004008 <MX_TIM16_Init>
  MX_TIM15_Init();
 800363a:	f000 fc5f 	bl	8003efc <MX_TIM15_Init>
  MX_TIM8_Init();
 800363e:	f000 fbc9 	bl	8003dd4 <MX_TIM8_Init>
  MX_I2C3_Init();
 8003642:	f000 f971 	bl	8003928 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003646:	f000 f9f9 	bl	8003a3c <MX_SPI1_Init>
  MX_TIM3_Init();
 800364a:	f000 fb69 	bl	8003d20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  /* Starter CAN-buseen */

  oppstartCAN(&hfdcan1);
 800364e:	485b      	ldr	r0, [pc, #364]	; (80037bc <main+0x1a8>)
 8003650:	f7ff ff56 	bl	8003500 <oppstartCAN>


  /* NB! starte timere */

  // TIMERE FOR THRUSTER
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003654:	2100      	movs	r1, #0
 8003656:	485a      	ldr	r0, [pc, #360]	; (80037c0 <main+0x1ac>)
 8003658:	f004 fbd4 	bl	8007e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800365c:	2104      	movs	r1, #4
 800365e:	4858      	ldr	r0, [pc, #352]	; (80037c0 <main+0x1ac>)
 8003660:	f004 fbd0 	bl	8007e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003664:	2108      	movs	r1, #8
 8003666:	4856      	ldr	r0, [pc, #344]	; (80037c0 <main+0x1ac>)
 8003668:	f004 fbcc 	bl	8007e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800366c:	210c      	movs	r1, #12
 800366e:	4854      	ldr	r0, [pc, #336]	; (80037c0 <main+0x1ac>)
 8003670:	f004 fbc8 	bl	8007e04 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003674:	2100      	movs	r1, #0
 8003676:	4853      	ldr	r0, [pc, #332]	; (80037c4 <main+0x1b0>)
 8003678:	f004 fbc4 	bl	8007e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800367c:	2104      	movs	r1, #4
 800367e:	4851      	ldr	r0, [pc, #324]	; (80037c4 <main+0x1b0>)
 8003680:	f004 fbc0 	bl	8007e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003684:	2108      	movs	r1, #8
 8003686:	484f      	ldr	r0, [pc, #316]	; (80037c4 <main+0x1b0>)
 8003688:	f004 fbbc 	bl	8007e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800368c:	210c      	movs	r1, #12
 800368e:	484d      	ldr	r0, [pc, #308]	; (80037c4 <main+0x1b0>)
 8003690:	f004 fbb8 	bl	8007e04 <HAL_TIM_PWM_Start>
  // TIMEREI  FOR MANIUPLATOR

  //ENDRE_FREKVENS = 0XFF;

  //  PA4 GRIP
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003694:	2104      	movs	r1, #4
 8003696:	484c      	ldr	r0, [pc, #304]	; (80037c8 <main+0x1b4>)
 8003698:	f004 fbb4 	bl	8007e04 <HAL_TIM_PWM_Start>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);


  // PC6 SNURR --> BØRSTELØSE
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800369c:	2100      	movs	r1, #0
 800369e:	484b      	ldr	r0, [pc, #300]	; (80037cc <main+0x1b8>)
 80036a0:	f004 fbb0 	bl	8007e04 <HAL_TIM_PWM_Start>
  // må være delay slik at boot sekvensen rekker å kjøres
  HAL_Delay(5000);
 80036a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80036a8:	f001 fb5e 	bl	8004d68 <HAL_Delay>

  // PB14 SVING
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80036ac:	2100      	movs	r1, #0
 80036ae:	4848      	ldr	r0, [pc, #288]	; (80037d0 <main+0x1bc>)
 80036b0:	f004 fba8 	bl	8007e04 <HAL_TIM_PWM_Start>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

  // PB4 SKYV
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80036b4:	2100      	movs	r1, #0
 80036b6:	4847      	ldr	r0, [pc, #284]	; (80037d4 <main+0x1c0>)
 80036b8:	f004 fba4 	bl	8007e04 <HAL_TIM_PWM_Start>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80036bc:	2201      	movs	r2, #1
 80036be:	2104      	movs	r1, #4
 80036c0:	4845      	ldr	r0, [pc, #276]	; (80037d8 <main+0x1c4>)
 80036c2:	f002 fc59 	bl	8005f78 <HAL_GPIO_WritePin>

  //init av temp sens
  STTS75 temp_sensor = {0};
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	2220      	movs	r2, #32
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f006 f880 	bl	80097d4 <memset>

  STTS75_Init(&temp_sensor, &hi2c3, STTS75_9BIT);
 80036d4:	f107 0308 	add.w	r3, r7, #8
 80036d8:	2200      	movs	r2, #0
 80036da:	4940      	ldr	r1, [pc, #256]	; (80037dc <main+0x1c8>)
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fb63 	bl	8000da8 <STTS75_Init>

  //REG_AKTIVER = 0;
  // init av reguleringsvariabler
  hiv_regulering_init();
 80036e2:	f7fe f9a7 	bl	8001a34 <hiv_regulering_init>
  stamp_regulering_init();
 80036e6:	f7fe fa3d 	bl	8001b64 <stamp_regulering_init>
  rull_regulering_init();
 80036ea:	f7fe f9ef 	bl	8001acc <rull_regulering_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//////// LESING OG SENDING TEMPERATUR SENSOR
	if(LES_SEND_TEMP){
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <main+0x1cc>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d027      	beq.n	8003746 <main+0x132>
		LES_SEND_TEMP = 0;
 80036f6:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <main+0x1cc>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
		// leser to temperatursensorer, reg og driver og lagrer i structen STTS75
		STTS75_Read_Temp(&temp_sensor);
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd fb83 	bl	8000e0c <STTS75_Read_Temp>
 8003706:	8b3a      	ldrh	r2, [r7, #24]

	  	// kopierer temp_16bit_reg, og temp_16bit_driv til Txdata
		memcpy(&TxData,&temp_sensor.temp_16bit_reg, 2);
 8003708:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <main+0x1d0>)
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	8b7a      	ldrh	r2, [r7, #26]
		memcpy(&TxData[2],&temp_sensor.temp_16bit_driv, 2);
 800370e:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <main+0x1d0>)
 8003710:	805a      	strh	r2, [r3, #2]
		// sende settpunkt til topside
		int16_t settpunkt = (int16_t) (PID_hiv.Ref*1000.0);
 8003712:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <main+0x1d4>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fc fee2 	bl	80004e0 <__aeabi_f2d>
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	4b32      	ldr	r3, [pc, #200]	; (80037ec <main+0x1d8>)
 8003722:	f7fc ff35 	bl	8000590 <__aeabi_dmul>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f7fd f941 	bl	80009b4 <__aeabi_d2iz>
 8003732:	4603      	mov	r3, r0
 8003734:	b21b      	sxth	r3, r3
 8003736:	80fb      	strh	r3, [r7, #6]
 8003738:	88fa      	ldrh	r2, [r7, #6]
		memcpy(&TxData[4],&settpunkt, 2);
 800373a:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <main+0x1d0>)
 800373c:	809a      	strh	r2, [r3, #4]
		// sende om regulering er aktivert til topside

	  // sender over CAN med id 130
		sendCAN(130,&hfdcan1);
 800373e:	491f      	ldr	r1, [pc, #124]	; (80037bc <main+0x1a8>)
 8003740:	2082      	movs	r0, #130	; 0x82
 8003742:	f7ff ff25 	bl	8003590 <sendCAN>
	}

	/////////// SENDING AV CAN MELDING

	 //// ID 129 thrustpaadrag
	 if (THRUST_TOPSIDE){
 8003746:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <main+0x1dc>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <main+0x14c>
		THRUST_TOPSIDE = 0;
 800374e:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <main+0x1dc>)
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]

		TX_kopier_thrustpaadrag();
 8003754:	f7ff ff32 	bl	80035bc <TX_kopier_thrustpaadrag>
		// sender over CAN med id 129
		sendCAN(129, &hfdcan1);
 8003758:	4918      	ldr	r1, [pc, #96]	; (80037bc <main+0x1a8>)
 800375a:	2081      	movs	r0, #129	; 0x81
 800375c:	f7ff ff18 	bl	8003590 <sendCAN>
	/////////// STYRING OG REGULERING

	static uint8_t condition_evaluated = 0;
	
	/// KODE FOR BARE STYRING UTEN REGULERING
	if (SUM_BIDRAG_STYRING){
 8003760:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <main+0x1e0>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <main+0x166>
		SUM_BIDRAG_STYRING = 0;
 8003768:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <main+0x1e0>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
		//// all regulering deaktivert, må sette alle reguleringsbidrag til 0.
		 /// sum_bidrag vil da være lik operatorbidrag 
		null_bidrag_alle_regvar();
 800376e:	f7fe ffcf 	bl	8002710 <null_bidrag_alle_regvar>
		/////
		condition_evaluated = 1;
 8003772:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <main+0x1e4>)
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e00b      	b.n	8003792 <main+0x17e>
	}

/////// KODE FOR STYRING MED REGULERING

	else if (SUM_BIDRAG_INKL_REG){
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <main+0x1e8>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <main+0x17e>
		SUM_BIDRAG_INKL_REG = 0;
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <main+0x1e8>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]

		beregn_reguleringbidrag();
 8003788:	f7fe fb38 	bl	8001dfc <beregn_reguleringbidrag>

		//////
		condition_evaluated = 1;
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <main+0x1e4>)
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]

	}

	// FELLES FOR BEGGE TILFELLER
	/// operasjoner som blir utført i begge tilfellene 
	if (condition_evaluated){
 8003792:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <main+0x1e4>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <main+0x198>
		condition_evaluated = 0;
 800379a:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <main+0x1e4>)
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]

		beregning_operatorbidrag();
 80037a0:	f7fe ffd2 	bl	8002748 <beregning_operatorbidrag>

		beregn_sum_bidrag();
 80037a4:	f7ff f910 	bl	80029c8 <beregn_sum_bidrag>
		behandle_sum_bidrag();
 80037a8:	f7ff fe86 	bl	80034b8 <behandle_sum_bidrag>
	}
		
	// KODE FOR MANIPULATOR
	if (MOTTATT_MANIPULATOR){
 80037ac:	4b14      	ldr	r3, [pc, #80]	; (8003800 <main+0x1ec>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d09c      	beq.n	80036ee <main+0xda>
		behandle_manipulator();
 80037b4:	f7fd fff0 	bl	8001798 <behandle_manipulator>
  {
 80037b8:	e799      	b.n	80036ee <main+0xda>
 80037ba:	bf00      	nop
 80037bc:	200002dc 	.word	0x200002dc
 80037c0:	20000480 	.word	0x20000480
 80037c4:	200004cc 	.word	0x200004cc
 80037c8:	20000518 	.word	0x20000518
 80037cc:	20000564 	.word	0x20000564
 80037d0:	200005b0 	.word	0x200005b0
 80037d4:	200005fc 	.word	0x200005fc
 80037d8:	48000c00 	.word	0x48000c00
 80037dc:	20000340 	.word	0x20000340
 80037e0:	200000ad 	.word	0x200000ad
 80037e4:	200006ac 	.word	0x200006ac
 80037e8:	200001dc 	.word	0x200001dc
 80037ec:	408f4000 	.word	0x408f4000
 80037f0:	200000ac 	.word	0x200000ac
 80037f4:	200000aa 	.word	0x200000aa
 80037f8:	200006bc 	.word	0x200006bc
 80037fc:	200000ab 	.word	0x200000ab
 8003800:	200000a8 	.word	0x200000a8

08003804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b094      	sub	sp, #80	; 0x50
 8003808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800380a:	f107 0318 	add.w	r3, r7, #24
 800380e:	2238      	movs	r2, #56	; 0x38
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f005 ffde 	bl	80097d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003826:	2000      	movs	r0, #0
 8003828:	f003 f9ba 	bl	8006ba0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800382c:	2302      	movs	r3, #2
 800382e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003836:	2340      	movs	r3, #64	; 0x40
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800383a:	2302      	movs	r3, #2
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800383e:	2302      	movs	r3, #2
 8003840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003842:	2304      	movs	r3, #4
 8003844:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003846:	2355      	movs	r3, #85	; 0x55
 8003848:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800384a:	2302      	movs	r3, #2
 800384c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800384e:	2302      	movs	r3, #2
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003852:	2302      	movs	r3, #2
 8003854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003856:	f107 0318 	add.w	r3, r7, #24
 800385a:	4618      	mov	r0, r3
 800385c:	f003 fa54 	bl	8006d08 <HAL_RCC_OscConfig>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003866:	f000 fdd7 	bl	8004418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800386a:	230f      	movs	r3, #15
 800386c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800386e:	2303      	movs	r3, #3
 8003870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	2104      	movs	r1, #4
 8003882:	4618      	mov	r0, r3
 8003884:	f003 fd58 	bl	8007338 <HAL_RCC_ClockConfig>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800388e:	f000 fdc3 	bl	8004418 <Error_Handler>
  }
}
 8003892:	bf00      	nop
 8003894:	3750      	adds	r7, #80	; 0x50
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038a2:	4a20      	ldr	r2, [pc, #128]	; (8003924 <MX_FDCAN1_Init+0x88>)
 80038a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80038a6:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80038ac:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038cc:	2214      	movs	r2, #20
 80038ce:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038d8:	220e      	movs	r2, #14
 80038da:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038de:	2202      	movs	r2, #2
 80038e0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038e4:	2214      	movs	r2, #20
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80038e8:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038f0:	220e      	movs	r2, #14
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038f6:	2202      	movs	r2, #2
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <MX_FDCAN1_Init+0x84>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003900:	4b07      	ldr	r3, [pc, #28]	; (8003920 <MX_FDCAN1_Init+0x84>)
 8003902:	2200      	movs	r2, #0
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <MX_FDCAN1_Init+0x84>)
 8003908:	2200      	movs	r2, #0
 800390a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800390c:	4804      	ldr	r0, [pc, #16]	; (8003920 <MX_FDCAN1_Init+0x84>)
 800390e:	f001 fb5d 	bl	8004fcc <HAL_FDCAN_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003918:	f000 fd7e 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200002dc 	.word	0x200002dc
 8003924:	40006400 	.word	0x40006400

08003928 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <MX_I2C3_Init+0x74>)
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <MX_I2C3_Init+0x78>)
 8003930:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 8003932:	4b1a      	ldr	r3, [pc, #104]	; (800399c <MX_I2C3_Init+0x74>)
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <MX_I2C3_Init+0x7c>)
 8003936:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003938:	4b18      	ldr	r3, [pc, #96]	; (800399c <MX_I2C3_Init+0x74>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800393e:	4b17      	ldr	r3, [pc, #92]	; (800399c <MX_I2C3_Init+0x74>)
 8003940:	2201      	movs	r2, #1
 8003942:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <MX_I2C3_Init+0x74>)
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <MX_I2C3_Init+0x74>)
 800394c:	2200      	movs	r2, #0
 800394e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <MX_I2C3_Init+0x74>)
 8003952:	2200      	movs	r2, #0
 8003954:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <MX_I2C3_Init+0x74>)
 8003958:	2200      	movs	r2, #0
 800395a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <MX_I2C3_Init+0x74>)
 800395e:	2200      	movs	r2, #0
 8003960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003962:	480e      	ldr	r0, [pc, #56]	; (800399c <MX_I2C3_Init+0x74>)
 8003964:	f002 fb20 	bl	8005fa8 <HAL_I2C_Init>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800396e:	f000 fd53 	bl	8004418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003972:	2100      	movs	r1, #0
 8003974:	4809      	ldr	r0, [pc, #36]	; (800399c <MX_I2C3_Init+0x74>)
 8003976:	f003 f87b 	bl	8006a70 <HAL_I2CEx_ConfigAnalogFilter>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003980:	f000 fd4a 	bl	8004418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003984:	2100      	movs	r1, #0
 8003986:	4805      	ldr	r0, [pc, #20]	; (800399c <MX_I2C3_Init+0x74>)
 8003988:	f003 f8bd 	bl	8006b06 <HAL_I2CEx_ConfigDigitalFilter>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003992:	f000 fd41 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000340 	.word	0x20000340
 80039a0:	40007800 	.word	0x40007800
 80039a4:	30a0a7fb 	.word	0x30a0a7fb

080039a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039ae:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <MX_LPUART1_UART_Init+0x8c>)
 80039b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039b4:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <MX_LPUART1_UART_Init+0x90>)
 80039b6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039cc:	220c      	movs	r2, #12
 80039ce:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80039e8:	4811      	ldr	r0, [pc, #68]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039ea:	f005 f8ed 	bl	8008bc8 <HAL_UART_Init>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80039f4:	f000 fd10 	bl	8004418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039f8:	2100      	movs	r1, #0
 80039fa:	480d      	ldr	r0, [pc, #52]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 80039fc:	f005 fdee 	bl	80095dc <HAL_UARTEx_SetTxFifoThreshold>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8003a06:	f000 fd07 	bl	8004418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4808      	ldr	r0, [pc, #32]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 8003a0e:	f005 fe23 	bl	8009658 <HAL_UARTEx_SetRxFifoThreshold>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8003a18:	f000 fcfe 	bl	8004418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003a1c:	4804      	ldr	r0, [pc, #16]	; (8003a30 <MX_LPUART1_UART_Init+0x88>)
 8003a1e:	f005 fda4 	bl	800956a <HAL_UARTEx_DisableFifoMode>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8003a28:	f000 fcf6 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2000038c 	.word	0x2000038c
 8003a34:	40008000 	.word	0x40008000
 8003a38:	00033324 	.word	0x00033324

08003a3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a42:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <MX_SPI1_Init+0x78>)
 8003a44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a46:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a5c:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a72:	2210      	movs	r2, #16
 8003a74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a96:	2208      	movs	r2, #8
 8003a98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a9a:	4805      	ldr	r0, [pc, #20]	; (8003ab0 <MX_SPI1_Init+0x74>)
 8003a9c:	f004 f858 	bl	8007b50 <HAL_SPI_Init>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003aa6:	f000 fcb7 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2000041c 	.word	0x2000041c
 8003ab4:	40013000 	.word	0x40013000

08003ab8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b098      	sub	sp, #96	; 0x60
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003abe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	611a      	str	r2, [r3, #16]
 8003ada:	615a      	str	r2, [r3, #20]
 8003adc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	2234      	movs	r2, #52	; 0x34
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f005 fe75 	bl	80097d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003aea:	4b4d      	ldr	r3, [pc, #308]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003aec:	4a4d      	ldr	r2, [pc, #308]	; (8003c24 <MX_TIM1_Init+0x16c>)
 8003aee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8003af0:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003af2:	22a9      	movs	r2, #169	; 0xa9
 8003af4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003af6:	4b4a      	ldr	r3, [pc, #296]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8003afc:	4b48      	ldr	r3, [pc, #288]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003afe:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003b02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b04:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b0a:	4b45      	ldr	r3, [pc, #276]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b10:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b16:	4842      	ldr	r0, [pc, #264]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003b18:	f004 f91c 	bl	8007d54 <HAL_TIM_PWM_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003b22:	f000 fc79 	bl	8004418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b36:	4619      	mov	r1, r3
 8003b38:	4839      	ldr	r0, [pc, #228]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003b3a:	f004 ff23 	bl	8008984 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003b44:	f000 fc68 	bl	8004418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b48:	2360      	movs	r3, #96	; 0x60
 8003b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1499;
 8003b4c:	f240 53db 	movw	r3, #1499	; 0x5db
 8003b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b52:	2300      	movs	r3, #0
 8003b54:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b56:	2300      	movs	r3, #0
 8003b58:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	482c      	ldr	r0, [pc, #176]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003b70:	f004 fa48 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003b7a:	f000 fc4d 	bl	8004418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b82:	2204      	movs	r2, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4826      	ldr	r0, [pc, #152]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003b88:	f004 fa3c 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8003b92:	f000 fc41 	bl	8004418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4820      	ldr	r0, [pc, #128]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003ba0:	f004 fa30 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003baa:	f000 fc35 	bl	8004418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003bb2:	220c      	movs	r2, #12
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	481a      	ldr	r0, [pc, #104]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003bb8:	f004 fa24 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003bc2:	f000 fc29 	bl	8004418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003be4:	2300      	movs	r3, #0
 8003be6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4807      	ldr	r0, [pc, #28]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003c04:	f004 ff40 	bl	8008a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8003c0e:	f000 fc03 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c12:	4803      	ldr	r0, [pc, #12]	; (8003c20 <MX_TIM1_Init+0x168>)
 8003c14:	f000 fe0e 	bl	8004834 <HAL_TIM_MspPostInit>

}
 8003c18:	bf00      	nop
 8003c1a:	3760      	adds	r7, #96	; 0x60
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000480 	.word	0x20000480
 8003c24:	40012c00 	.word	0x40012c00

08003c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c2e:	f107 031c 	add.w	r3, r7, #28
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	611a      	str	r2, [r3, #16]
 8003c48:	615a      	str	r2, [r3, #20]
 8003c4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c4c:	4b33      	ldr	r3, [pc, #204]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003c54:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003c56:	22a9      	movs	r2, #169	; 0xa9
 8003c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5a:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8003c60:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003c62:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003c66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c68:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c6e:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c74:	4829      	ldr	r0, [pc, #164]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003c76:	f004 f86d 	bl	8007d54 <HAL_TIM_PWM_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003c80:	f000 fbca 	bl	8004418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c8c:	f107 031c 	add.w	r3, r7, #28
 8003c90:	4619      	mov	r1, r3
 8003c92:	4822      	ldr	r0, [pc, #136]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003c94:	f004 fe76 	bl	8008984 <HAL_TIMEx_MasterConfigSynchronization>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003c9e:	f000 fbbb 	bl	8004418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ca2:	2360      	movs	r3, #96	; 0x60
 8003ca4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1499;
 8003ca6:	f240 53db 	movw	r3, #1499	; 0x5db
 8003caa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4818      	ldr	r0, [pc, #96]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003cbc:	f004 f9a2 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003cc6:	f000 fba7 	bl	8004418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cca:	463b      	mov	r3, r7
 8003ccc:	2204      	movs	r2, #4
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4812      	ldr	r0, [pc, #72]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003cd2:	f004 f997 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003cdc:	f000 fb9c 	bl	8004418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	480d      	ldr	r0, [pc, #52]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003ce8:	f004 f98c 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8003cf2:	f000 fb91 	bl	8004418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cf6:	463b      	mov	r3, r7
 8003cf8:	220c      	movs	r2, #12
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4807      	ldr	r0, [pc, #28]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003cfe:	f004 f981 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8003d08:	f000 fb86 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003d0c:	4803      	ldr	r0, [pc, #12]	; (8003d1c <MX_TIM2_Init+0xf4>)
 8003d0e:	f000 fd91 	bl	8004834 <HAL_TIM_MspPostInit>

}
 8003d12:	bf00      	nop
 8003d14:	3728      	adds	r7, #40	; 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200004cc 	.word	0x200004cc

08003d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d26:	f107 031c 	add.w	r3, r7, #28
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d32:	463b      	mov	r3, r7
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
 8003d40:	615a      	str	r2, [r3, #20]
 8003d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d44:	4b21      	ldr	r3, [pc, #132]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003d46:	4a22      	ldr	r2, [pc, #136]	; (8003dd0 <MX_TIM3_Init+0xb0>)
 8003d48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003d4c:	22a9      	movs	r2, #169	; 0xa9
 8003d4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d50:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003d58:	f241 3287 	movw	r2, #4999	; 0x1387
 8003d5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d6a:	4818      	ldr	r0, [pc, #96]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003d6c:	f003 fff2 	bl	8007d54 <HAL_TIM_PWM_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003d76:	f000 fb4f 	bl	8004418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	4619      	mov	r1, r3
 8003d88:	4810      	ldr	r0, [pc, #64]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003d8a:	f004 fdfb 	bl	8008984 <HAL_TIMEx_MasterConfigSynchronization>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003d94:	f000 fb40 	bl	8004418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d98:	2360      	movs	r3, #96	; 0x60
 8003d9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003da8:	463b      	mov	r3, r7
 8003daa:	2204      	movs	r2, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4807      	ldr	r0, [pc, #28]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003db0:	f004 f928 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003dba:	f000 fb2d 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003dbe:	4803      	ldr	r0, [pc, #12]	; (8003dcc <MX_TIM3_Init+0xac>)
 8003dc0:	f000 fd38 	bl	8004834 <HAL_TIM_MspPostInit>

}
 8003dc4:	bf00      	nop
 8003dc6:	3728      	adds	r7, #40	; 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000518 	.word	0x20000518
 8003dd0:	40000400 	.word	0x40000400

08003dd4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b098      	sub	sp, #96	; 0x60
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	60da      	str	r2, [r3, #12]
 8003df4:	611a      	str	r2, [r3, #16]
 8003df6:	615a      	str	r2, [r3, #20]
 8003df8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	2234      	movs	r2, #52	; 0x34
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f005 fce7 	bl	80097d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e08:	4a3b      	ldr	r2, [pc, #236]	; (8003ef8 <MX_TIM8_Init+0x124>)
 8003e0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8003e0c:	4b39      	ldr	r3, [pc, #228]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e0e:	22a9      	movs	r2, #169	; 0xa9
 8003e10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e12:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8003e18:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8003e1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e20:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e26:	4b33      	ldr	r3, [pc, #204]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003e32:	4830      	ldr	r0, [pc, #192]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e34:	f003 ff8e 	bl	8007d54 <HAL_TIM_PWM_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003e3e:	f000 faeb 	bl	8004418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e46:	2300      	movs	r3, #0
 8003e48:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e52:	4619      	mov	r1, r3
 8003e54:	4827      	ldr	r0, [pc, #156]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e56:	f004 fd95 	bl	8008984 <HAL_TIMEx_MasterConfigSynchronization>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8003e60:	f000 fada 	bl	8004418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e64:	2360      	movs	r3, #96	; 0x60
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1499;
 8003e68:	f240 53db 	movw	r3, #1499	; 0x5db
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e72:	2300      	movs	r3, #0
 8003e74:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e86:	2200      	movs	r2, #0
 8003e88:	4619      	mov	r1, r3
 8003e8a:	481a      	ldr	r0, [pc, #104]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003e8c:	f004 f8ba 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8003e96:	f000 fabf 	bl	8004418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ec0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4807      	ldr	r0, [pc, #28]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003ed8:	f004 fdd6 	bl	8008a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8003ee2:	f000 fa99 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003ee6:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <MX_TIM8_Init+0x120>)
 8003ee8:	f000 fca4 	bl	8004834 <HAL_TIM_MspPostInit>

}
 8003eec:	bf00      	nop
 8003eee:	3760      	adds	r7, #96	; 0x60
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000564 	.word	0x20000564
 8003ef8:	40013400 	.word	0x40013400

08003efc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b098      	sub	sp, #96	; 0x60
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	609a      	str	r2, [r3, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	611a      	str	r2, [r3, #16]
 8003f1e:	615a      	str	r2, [r3, #20]
 8003f20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	2234      	movs	r2, #52	; 0x34
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f005 fc53 	bl	80097d4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f30:	4a34      	ldr	r2, [pc, #208]	; (8004004 <MX_TIM15_Init+0x108>)
 8003f32:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8003f34:	4b32      	ldr	r3, [pc, #200]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f36:	22a9      	movs	r2, #169	; 0xa9
 8003f38:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3a:	4b31      	ldr	r3, [pc, #196]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4999;
 8003f40:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f42:	f241 3287 	movw	r2, #4999	; 0x1387
 8003f46:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f48:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f54:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003f5a:	4829      	ldr	r0, [pc, #164]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f5c:	f003 fefa 	bl	8007d54 <HAL_TIM_PWM_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8003f66:	f000 fa57 	bl	8004418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003f72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f76:	4619      	mov	r1, r3
 8003f78:	4821      	ldr	r0, [pc, #132]	; (8004000 <MX_TIM15_Init+0x104>)
 8003f7a:	f004 fd03 	bl	8008984 <HAL_TIMEx_MasterConfigSynchronization>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8003f84:	f000 fa48 	bl	8004418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f88:	2360      	movs	r3, #96	; 0x60
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f90:	2300      	movs	r3, #0
 8003f92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f94:	2300      	movs	r3, #0
 8003f96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4619      	mov	r1, r3
 8003fac:	4814      	ldr	r0, [pc, #80]	; (8004000 <MX_TIM15_Init+0x104>)
 8003fae:	f004 f829 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8003fb8:	f000 fa2e 	bl	8004418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4807      	ldr	r0, [pc, #28]	; (8004000 <MX_TIM15_Init+0x104>)
 8003fe4:	f004 fd50 	bl	8008a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8003fee:	f000 fa13 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003ff2:	4803      	ldr	r0, [pc, #12]	; (8004000 <MX_TIM15_Init+0x104>)
 8003ff4:	f000 fc1e 	bl	8004834 <HAL_TIM_MspPostInit>

}
 8003ff8:	bf00      	nop
 8003ffa:	3760      	adds	r7, #96	; 0x60
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200005b0 	.word	0x200005b0
 8004004:	40014000 	.word	0x40014000

08004008 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b094      	sub	sp, #80	; 0x50
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800400e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	611a      	str	r2, [r3, #16]
 800401e:	615a      	str	r2, [r3, #20]
 8004020:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004022:	463b      	mov	r3, r7
 8004024:	2234      	movs	r2, #52	; 0x34
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f005 fbd3 	bl	80097d4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800402e:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <MX_TIM16_Init+0xec>)
 8004030:	4a31      	ldr	r2, [pc, #196]	; (80040f8 <MX_TIM16_Init+0xf0>)
 8004032:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004034:	4b2f      	ldr	r3, [pc, #188]	; (80040f4 <MX_TIM16_Init+0xec>)
 8004036:	22a9      	movs	r2, #169	; 0xa9
 8004038:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403a:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <MX_TIM16_Init+0xec>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 8004040:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <MX_TIM16_Init+0xec>)
 8004042:	f241 3287 	movw	r2, #4999	; 0x1387
 8004046:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004048:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <MX_TIM16_Init+0xec>)
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800404e:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <MX_TIM16_Init+0xec>)
 8004050:	2200      	movs	r2, #0
 8004052:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <MX_TIM16_Init+0xec>)
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800405a:	4826      	ldr	r0, [pc, #152]	; (80040f4 <MX_TIM16_Init+0xec>)
 800405c:	f003 fe23 	bl	8007ca6 <HAL_TIM_Base_Init>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8004066:	f000 f9d7 	bl	8004418 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800406a:	4822      	ldr	r0, [pc, #136]	; (80040f4 <MX_TIM16_Init+0xec>)
 800406c:	f003 fe72 	bl	8007d54 <HAL_TIM_PWM_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8004076:	f000 f9cf 	bl	8004418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800407a:	2360      	movs	r3, #96	; 0x60
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004082:	2300      	movs	r3, #0
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004086:	2300      	movs	r3, #0
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800408a:	2300      	movs	r3, #0
 800408c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004096:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800409a:	2200      	movs	r2, #0
 800409c:	4619      	mov	r1, r3
 800409e:	4815      	ldr	r0, [pc, #84]	; (80040f4 <MX_TIM16_Init+0xec>)
 80040a0:	f003 ffb0 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80040aa:	f000 f9b5 	bl	8004418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80040d0:	463b      	mov	r3, r7
 80040d2:	4619      	mov	r1, r3
 80040d4:	4807      	ldr	r0, [pc, #28]	; (80040f4 <MX_TIM16_Init+0xec>)
 80040d6:	f004 fcd7 	bl	8008a88 <HAL_TIMEx_ConfigBreakDeadTime>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80040e0:	f000 f99a 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80040e4:	4803      	ldr	r0, [pc, #12]	; (80040f4 <MX_TIM16_Init+0xec>)
 80040e6:	f000 fba5 	bl	8004834 <HAL_TIM_MspPostInit>

}
 80040ea:	bf00      	nop
 80040ec:	3750      	adds	r7, #80	; 0x50
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	200005fc 	.word	0x200005fc
 80040f8:	40014400 	.word	0x40014400

080040fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004102:	f107 0314 	add.w	r3, r7, #20
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004112:	4b44      	ldr	r3, [pc, #272]	; (8004224 <MX_GPIO_Init+0x128>)
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	4a43      	ldr	r2, [pc, #268]	; (8004224 <MX_GPIO_Init+0x128>)
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <MX_GPIO_Init+0x128>)
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800412a:	4b3e      	ldr	r3, [pc, #248]	; (8004224 <MX_GPIO_Init+0x128>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	4a3d      	ldr	r2, [pc, #244]	; (8004224 <MX_GPIO_Init+0x128>)
 8004130:	f043 0320 	orr.w	r3, r3, #32
 8004134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <MX_GPIO_Init+0x128>)
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004142:	4b38      	ldr	r3, [pc, #224]	; (8004224 <MX_GPIO_Init+0x128>)
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	4a37      	ldr	r2, [pc, #220]	; (8004224 <MX_GPIO_Init+0x128>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800414e:	4b35      	ldr	r3, [pc, #212]	; (8004224 <MX_GPIO_Init+0x128>)
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800415a:	4b32      	ldr	r3, [pc, #200]	; (8004224 <MX_GPIO_Init+0x128>)
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	4a31      	ldr	r2, [pc, #196]	; (8004224 <MX_GPIO_Init+0x128>)
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <MX_GPIO_Init+0x128>)
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	607b      	str	r3, [r7, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <MX_GPIO_Init+0x128>)
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <MX_GPIO_Init+0x128>)
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800417e:	4b29      	ldr	r3, [pc, #164]	; (8004224 <MX_GPIO_Init+0x128>)
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800418a:	2200      	movs	r2, #0
 800418c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004190:	4825      	ldr	r0, [pc, #148]	; (8004228 <MX_GPIO_Init+0x12c>)
 8004192:	f001 fef1 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004196:	2200      	movs	r2, #0
 8004198:	2104      	movs	r1, #4
 800419a:	4824      	ldr	r0, [pc, #144]	; (800422c <MX_GPIO_Init+0x130>)
 800419c:	f001 feec 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80041a0:	2200      	movs	r2, #0
 80041a2:	2180      	movs	r1, #128	; 0x80
 80041a4:	4822      	ldr	r0, [pc, #136]	; (8004230 <MX_GPIO_Init+0x134>)
 80041a6:	f001 fee7 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80041aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80041b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041ba:	f107 0314 	add.w	r3, r7, #20
 80041be:	4619      	mov	r1, r3
 80041c0:	4819      	ldr	r0, [pc, #100]	; (8004228 <MX_GPIO_Init+0x12c>)
 80041c2:	f001 fd57 	bl	8005c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80041c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80041ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041cc:	2301      	movs	r3, #1
 80041ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d4:	2300      	movs	r3, #0
 80041d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4619      	mov	r1, r3
 80041de:	4812      	ldr	r0, [pc, #72]	; (8004228 <MX_GPIO_Init+0x12c>)
 80041e0:	f001 fd48 	bl	8005c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041e4:	2304      	movs	r3, #4
 80041e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e8:	2301      	movs	r3, #1
 80041ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f0:	2300      	movs	r3, #0
 80041f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4619      	mov	r1, r3
 80041fa:	480c      	ldr	r0, [pc, #48]	; (800422c <MX_GPIO_Init+0x130>)
 80041fc:	f001 fd3a 	bl	8005c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004204:	2301      	movs	r3, #1
 8004206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420c:	2300      	movs	r3, #0
 800420e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004210:	f107 0314 	add.w	r3, r7, #20
 8004214:	4619      	mov	r1, r3
 8004216:	4806      	ldr	r0, [pc, #24]	; (8004230 <MX_GPIO_Init+0x134>)
 8004218:	f001 fd2c 	bl	8005c74 <HAL_GPIO_Init>

}
 800421c:	bf00      	nop
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	48000800 	.word	0x48000800
 800422c:	48000c00 	.word	0x48000c00
 8004230:	48000400 	.word	0x48000400

08004234 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80c4 	beq.w	80043d2 <HAL_FDCAN_RxFifo0Callback+0x19e>
  {


    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800424a:	4b64      	ldr	r3, [pc, #400]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800424c:	4a64      	ldr	r2, [pc, #400]	; (80043e0 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800424e:	2140      	movs	r1, #64	; 0x40
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f001 f8db 	bl	800540c <HAL_FDCAN_GetRxMessage>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    /* Reception Error */
    Error_Handler();
 800425c:	f000 f8dc 	bl	8004418 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004260:	2200      	movs	r2, #0
 8004262:	2101      	movs	r1, #1
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f001 f9ab 	bl	80055c0 <HAL_FDCAN_ActivateNotification>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_FDCAN_RxFifo0Callback+0x40>
    {
      /* Notification Error */
      Error_Handler();
 8004270:	f000 f8d2 	bl	8004418 <Error_Handler>
    }

    switch (RxHeader.Identifier) { // Leser ID på motatt melding. Casene må lages ut fra ID-er enn mottar. (Sjekk "Interface-Overview" under "Overordnet prosjekt")
 8004274:	4b5a      	ldr	r3, [pc, #360]	; (80043e0 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3b20      	subs	r3, #32
 800427a:	2b1f      	cmp	r3, #31
 800427c:	f200 80aa 	bhi.w	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	08004309 	.word	0x08004309
 800428c:	08004313 	.word	0x08004313
 8004290:	0800433b 	.word	0x0800433b
 8004294:	08004363 	.word	0x08004363
 8004298:	08004383 	.word	0x08004383
 800429c:	0800438d 	.word	0x0800438d
 80042a0:	080043d5 	.word	0x080043d5
 80042a4:	080043d5 	.word	0x080043d5
 80042a8:	080043d5 	.word	0x080043d5
 80042ac:	080043d5 	.word	0x080043d5
 80042b0:	08004397 	.word	0x08004397
 80042b4:	080043d5 	.word	0x080043d5
 80042b8:	080043d5 	.word	0x080043d5
 80042bc:	080043d5 	.word	0x080043d5
 80042c0:	080043d5 	.word	0x080043d5
 80042c4:	080043d5 	.word	0x080043d5
 80042c8:	080043d5 	.word	0x080043d5
 80042cc:	080043d5 	.word	0x080043d5
 80042d0:	080043d5 	.word	0x080043d5
 80042d4:	080043d5 	.word	0x080043d5
 80042d8:	080043d5 	.word	0x080043d5
 80042dc:	080043d5 	.word	0x080043d5
 80042e0:	080043d5 	.word	0x080043d5
 80042e4:	080043d5 	.word	0x080043d5
 80042e8:	080043d5 	.word	0x080043d5
 80042ec:	080043d5 	.word	0x080043d5
 80042f0:	080043d5 	.word	0x080043d5
 80042f4:	080043d5 	.word	0x080043d5
 80042f8:	080043d5 	.word	0x080043d5
 80042fc:	080043d5 	.word	0x080043d5
 8004300:	080043d5 	.word	0x080043d5
 8004304:	080043b9 	.word	0x080043b9
 8004308:	4b34      	ldr	r3, [pc, #208]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800430a:	781a      	ldrb	r2, [r3, #0]
		case 32: // BYTE FOR AKTIVERING ELLER DEAKTIVERING AV REGULERING

			//REG_AKTIVER || RxData[0];
			// kan ikke kopiere direkte inn, må ha en operasjon på

			memcpy(&REG_AKTIVER,  &RxData,1);
 800430c:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 800430e:	701a      	strb	r2, [r3, #0]
			break;
 8004310:	e060      	b.n	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>

		case 33:  // STYREPAKKE THRUSTER
			MOTTATT_THRUST=1;
 8004312:	4b35      	ldr	r3, [pc, #212]	; (80043e8 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	4b30      	ldr	r3, [pc, #192]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800431a:	781a      	ldrb	r2, [r3, #0]

			// memcpy(. , . , .) Last place is the number of bytes to be copied.
			// Tx[B0,B1,B2,B3,B4,B5,B6,B7]
			memcpy(&operator_referanse_int.jag, &RxData, 1);  // B0
 800431c:	4b33      	ldr	r3, [pc, #204]	; (80043ec <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004322:	785a      	ldrb	r2, [r3, #1]
			memcpy(&operator_referanse_int.svai, &RxData[1], 1); // B1
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004326:	705a      	strb	r2, [r3, #1]
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800432a:	789a      	ldrb	r2, [r3, #2]
			memcpy(&operator_referanse_int.hiv, &RxData[2], 1); // B2
 800432c:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800432e:	70da      	strb	r2, [r3, #3]
 8004330:	4b2a      	ldr	r3, [pc, #168]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004332:	78da      	ldrb	r2, [r3, #3]
			memcpy(&operator_referanse_int.gir, &RxData[3], 1); // B3
 8004334:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004336:	709a      	strb	r2, [r3, #2]

			break;
 8004338:	e04c      	b.n	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>

		case 34:  // STYREPAKKE MANIPULATOR
			MOTTATT_MANIPULATOR = 1;
 800433a:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	4b26      	ldr	r3, [pc, #152]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004342:	781a      	ldrb	r2, [r3, #0]
//
//			// memcpy(. , . , .) Last place is the number of bytes to be copied.
//			// Tx[B0,B1,B2,B3,B4,B5,B6,B7]
			memcpy(&operator_manpu_int.skyv,  &RxData,    1);  // B0
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8004346:	70da      	strb	r2, [r3, #3]
 8004348:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800434a:	785a      	ldrb	r2, [r3, #1]
			memcpy(&operator_manpu_int.snurr, &RxData[1], 1); // B1
 800434c:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800434e:	705a      	strb	r2, [r3, #1]
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004352:	789a      	ldrb	r2, [r3, #2]
			memcpy(&operator_manpu_int.sving, &RxData[2], 1); // B2
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8004356:	709a      	strb	r2, [r3, #2]
 8004358:	4b20      	ldr	r3, [pc, #128]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800435a:	78da      	ldrb	r2, [r3, #3]
			memcpy(&operator_manpu_int.gripe, &RxData[3], 1); // B3
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800435e:	701a      	strb	r2, [r3, #0]

			 // sende sensitivitet som sensitivitet*10?
			// manu_sensitivitet.gripe = (float) manu_sensitivitet_int.gripe.sensitivitet / 10;
			break;
 8004360:	e038      	b.n	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>


		case 35:  // SENSOR
			MOTTATT_SENSOR = 1; // Sett flagg for mottagelse.
 8004362:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800436a:	881a      	ldrh	r2, [r3, #0]

			memcpy(&sensordata_int.rull,  &RxData,    2);  // B0-B1
 800436c:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004372:	885a      	ldrh	r2, [r3, #2]
			memcpy(&sensordata_int.stamp, &RxData[2], 2); // B2-B3
 8004374:	4b21      	ldr	r3, [pc, #132]	; (80043fc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8004376:	805a      	strh	r2, [r3, #2]
 8004378:	4b18      	ldr	r3, [pc, #96]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800437a:	889a      	ldrh	r2, [r3, #4]
			memcpy(&sensordata_int.dybde, &RxData[4], 2); // B4-B5
 800437c:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800437e:	809a      	strh	r2, [r3, #4]
			break;
 8004380:	e028      	b.n	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004384:	881a      	ldrh	r2, [r3, #0]

		case 36: // FORM FOR STRØMFORBRUK KRAFT, SENDER IDX_KRAFT
			memcpy(&kraftdata_int.stromforbruk_hoyre, &RxData, 2);  // B0-B1
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8004388:	801a      	strh	r2, [r3, #0]
			break;
 800438a:	e023      	b.n	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800438e:	881a      	ldrh	r2, [r3, #0]
		case 37:
			memcpy(&kraftdata_int.stromforbruk_venstre, &RxData, 2);  // B0-B1
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8004392:	805a      	strh	r2, [r3, #2]
			break;
 8004394:	e01e      	b.n	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>

		case 42: /// OPPDATER PARAMETRE
			memcpy(&ny_param, &RxData, sizeof(can_param));
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8004398:	4a10      	ldr	r2, [pc, #64]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800439a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800439e:	e883 0003 	stmia.w	r3, {r0, r1}
			oppdater_parameter(ny_param.param_id, ny_param.parameter);
 80043a2:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	; (8004404 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80043a8:	edd2 7a01 	vldr	s15, [r2, #4]
 80043ac:	eeb0 0a67 	vmov.f32	s0, s15
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fd fd9f 	bl	8001ef4 <oppdater_parameter>
			break;
 80043b6:	e00d      	b.n	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>

		case 63: // IKKE FJERN DENNE // Endres til 63 for Regulering, til 95 for Sensor og til 127 for Kraft.
			// mister denne disable allt (3s)
			MARCO = 1;
 80043b8:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
			memcpy(&TxData, (uint8_t *) &"polo!\n", 6);
 80043be:	2206      	movs	r2, #6
 80043c0:	4912      	ldr	r1, [pc, #72]	; (800440c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80043c2:	4813      	ldr	r0, [pc, #76]	; (8004410 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80043c4:	f005 f9f8 	bl	80097b8 <memcpy>
			sendCAN(155, &hfdcan1); // Endres til 155 for Regulering, til 156 for Sensor, til 157/158/159 for Kraft1/2/3.
 80043c8:	4912      	ldr	r1, [pc, #72]	; (8004414 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80043ca:	209b      	movs	r0, #155	; 0x9b
 80043cc:	f7ff f8e0 	bl	8003590 <sendCAN>
			break;
 80043d0:	e000      	b.n	80043d4 <HAL_FDCAN_RxFifo0Callback+0x1a0>

    }
  }
 80043d2:	bf00      	nop

}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	200006b4 	.word	0x200006b4
 80043e0:	20000684 	.word	0x20000684
 80043e4:	200000a5 	.word	0x200000a5
 80043e8:	200000a7 	.word	0x200000a7
 80043ec:	200000dc 	.word	0x200000dc
 80043f0:	200000a8 	.word	0x200000a8
 80043f4:	200001c4 	.word	0x200001c4
 80043f8:	200000a9 	.word	0x200000a9
 80043fc:	200002a8 	.word	0x200002a8
 8004400:	200002cc 	.word	0x200002cc
 8004404:	200002d4 	.word	0x200002d4
 8004408:	200000a6 	.word	0x200000a6
 800440c:	080097fc 	.word	0x080097fc
 8004410:	200006ac 	.word	0x200006ac
 8004414:	200002dc 	.word	0x200002dc

08004418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800441c:	b672      	cpsid	i
}
 800441e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004420:	e7fe      	b.n	8004420 <Error_Handler+0x8>
	...

08004424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <HAL_MspInit+0x44>)
 800442c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442e:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <HAL_MspInit+0x44>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6613      	str	r3, [r2, #96]	; 0x60
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <HAL_MspInit+0x44>)
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_MspInit+0x44>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <HAL_MspInit+0x44>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444c:	6593      	str	r3, [r2, #88]	; 0x58
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_MspInit+0x44>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800445a:	f002 fc45 	bl	8006ce8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000

0800446c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b09a      	sub	sp, #104	; 0x68
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004474:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	2244      	movs	r2, #68	; 0x44
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f005 f9a1 	bl	80097d4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a24      	ldr	r2, [pc, #144]	; (8004528 <HAL_FDCAN_MspInit+0xbc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d141      	bne.n	8004520 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800449c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80044a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	4618      	mov	r0, r3
 80044ae:	f003 f95f 	bl	8007770 <HAL_RCCEx_PeriphCLKConfig>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80044b8:	f7ff ffae 	bl	8004418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80044bc:	4b1b      	ldr	r3, [pc, #108]	; (800452c <HAL_FDCAN_MspInit+0xc0>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	4a1a      	ldr	r2, [pc, #104]	; (800452c <HAL_FDCAN_MspInit+0xc0>)
 80044c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044c6:	6593      	str	r3, [r2, #88]	; 0x58
 80044c8:	4b18      	ldr	r3, [pc, #96]	; (800452c <HAL_FDCAN_MspInit+0xc0>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d4:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_FDCAN_MspInit+0xc0>)
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <HAL_FDCAN_MspInit+0xc0>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044e0:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_FDCAN_MspInit+0xc0>)
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80044ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80044f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80044fe:	2309      	movs	r3, #9
 8004500:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004502:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004506:	4619      	mov	r1, r3
 8004508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800450c:	f001 fbb2 	bl	8005c74 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004510:	2200      	movs	r2, #0
 8004512:	2100      	movs	r1, #0
 8004514:	2015      	movs	r0, #21
 8004516:	f000 fd24 	bl	8004f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800451a:	2015      	movs	r0, #21
 800451c:	f000 fd3b 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004520:	bf00      	nop
 8004522:	3768      	adds	r7, #104	; 0x68
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40006400 	.word	0x40006400
 800452c:	40021000 	.word	0x40021000

08004530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b09a      	sub	sp, #104	; 0x68
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004538:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004548:	f107 0310 	add.w	r3, r7, #16
 800454c:	2244      	movs	r2, #68	; 0x44
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f005 f93f 	bl	80097d4 <memset>
  if(hi2c->Instance==I2C3)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_I2C_MspInit+0xa8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d137      	bne.n	80045d0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004564:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004566:	2300      	movs	r3, #0
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800456a:	f107 0310 	add.w	r3, r7, #16
 800456e:	4618      	mov	r0, r3
 8004570:	f003 f8fe 	bl	8007770 <HAL_RCCEx_PeriphCLKConfig>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800457a:	f7ff ff4d 	bl	8004418 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457e:	4b17      	ldr	r3, [pc, #92]	; (80045dc <HAL_I2C_MspInit+0xac>)
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	4a16      	ldr	r2, [pc, #88]	; (80045dc <HAL_I2C_MspInit+0xac>)
 8004584:	f043 0304 	orr.w	r3, r3, #4
 8004588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800458a:	4b14      	ldr	r3, [pc, #80]	; (80045dc <HAL_I2C_MspInit+0xac>)
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004596:	f44f 7340 	mov.w	r3, #768	; 0x300
 800459a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800459c:	2312      	movs	r3, #18
 800459e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a4:	2300      	movs	r3, #0
 80045a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80045a8:	2308      	movs	r3, #8
 80045aa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045b0:	4619      	mov	r1, r3
 80045b2:	480b      	ldr	r0, [pc, #44]	; (80045e0 <HAL_I2C_MspInit+0xb0>)
 80045b4:	f001 fb5e 	bl	8005c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <HAL_I2C_MspInit+0xac>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	4a07      	ldr	r2, [pc, #28]	; (80045dc <HAL_I2C_MspInit+0xac>)
 80045be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045c2:	6593      	str	r3, [r2, #88]	; 0x58
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_I2C_MspInit+0xac>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80045d0:	bf00      	nop
 80045d2:	3768      	adds	r7, #104	; 0x68
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40007800 	.word	0x40007800
 80045dc:	40021000 	.word	0x40021000
 80045e0:	48000800 	.word	0x48000800

080045e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b09a      	sub	sp, #104	; 0x68
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	2244      	movs	r2, #68	; 0x44
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f005 f8e5 	bl	80097d4 <memset>
  if(huart->Instance==LPUART1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1f      	ldr	r2, [pc, #124]	; (800468c <HAL_UART_MspInit+0xa8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d136      	bne.n	8004682 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004614:	2320      	movs	r3, #32
 8004616:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800461c:	f107 0310 	add.w	r3, r7, #16
 8004620:	4618      	mov	r0, r3
 8004622:	f003 f8a5 	bl	8007770 <HAL_RCCEx_PeriphCLKConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800462c:	f7ff fef4 	bl	8004418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <HAL_UART_MspInit+0xac>)
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	4a16      	ldr	r2, [pc, #88]	; (8004690 <HAL_UART_MspInit+0xac>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <HAL_UART_MspInit+0xac>)
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <HAL_UART_MspInit+0xac>)
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	4a10      	ldr	r2, [pc, #64]	; (8004690 <HAL_UART_MspInit+0xac>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <HAL_UART_MspInit+0xac>)
 8004656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|LPUART1_RX_Pin;
 8004660:	230c      	movs	r3, #12
 8004662:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004664:	2302      	movs	r3, #2
 8004666:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466c:	2300      	movs	r3, #0
 800466e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004670:	230c      	movs	r3, #12
 8004672:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004674:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004678:	4619      	mov	r1, r3
 800467a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800467e:	f001 faf9 	bl	8005c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004682:	bf00      	nop
 8004684:	3768      	adds	r7, #104	; 0x68
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40008000 	.word	0x40008000
 8004690:	40021000 	.word	0x40021000

08004694 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a17      	ldr	r2, [pc, #92]	; (8004710 <HAL_SPI_MspInit+0x7c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d128      	bne.n	8004708 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <HAL_SPI_MspInit+0x80>)
 80046b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ba:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_SPI_MspInit+0x80>)
 80046bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046c0:	6613      	str	r3, [r2, #96]	; 0x60
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <HAL_SPI_MspInit+0x80>)
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_SPI_MspInit+0x80>)
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <HAL_SPI_MspInit+0x80>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <HAL_SPI_MspInit+0x80>)
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80046e6:	23a0      	movs	r3, #160	; 0xa0
 80046e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ea:	2302      	movs	r3, #2
 80046ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f2:	2300      	movs	r3, #0
 80046f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046f6:	2305      	movs	r3, #5
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fa:	f107 0314 	add.w	r3, r7, #20
 80046fe:	4619      	mov	r1, r3
 8004700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004704:	f001 fab6 	bl	8005c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004708:	bf00      	nop
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40013000 	.word	0x40013000
 8004714:	40021000 	.word	0x40021000

08004718 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2e      	ldr	r2, [pc, #184]	; (80047e0 <HAL_TIM_PWM_MspInit+0xc8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10c      	bne.n	8004744 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800472a:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 800472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472e:	4a2d      	ldr	r2, [pc, #180]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 8004730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004734:	6613      	str	r3, [r2, #96]	; 0x60
 8004736:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 8004738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004742:	e046      	b.n	80047d2 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474c:	d10c      	bne.n	8004768 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800474e:	4b25      	ldr	r3, [pc, #148]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	4a24      	ldr	r2, [pc, #144]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6593      	str	r3, [r2, #88]	; 0x58
 800475a:	4b22      	ldr	r3, [pc, #136]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	69bb      	ldr	r3, [r7, #24]
}
 8004766:	e034      	b.n	80047d2 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <HAL_TIM_PWM_MspInit+0xd0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10c      	bne.n	800478c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004772:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	4a1b      	ldr	r2, [pc, #108]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 8004778:	f043 0302 	orr.w	r3, r3, #2
 800477c:	6593      	str	r3, [r2, #88]	; 0x58
 800477e:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	697b      	ldr	r3, [r7, #20]
}
 800478a:	e022      	b.n	80047d2 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_TIM_PWM_MspInit+0xd4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10c      	bne.n	80047b0 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 8004798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479a:	4a12      	ldr	r2, [pc, #72]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 800479c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047a0:	6613      	str	r3, [r2, #96]	; 0x60
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 80047a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	693b      	ldr	r3, [r7, #16]
}
 80047ae:	e010      	b.n	80047d2 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM15)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0e      	ldr	r2, [pc, #56]	; (80047f0 <HAL_TIM_PWM_MspInit+0xd8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d10b      	bne.n	80047d2 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 80047bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 80047c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c4:	6613      	str	r3, [r2, #96]	; 0x60
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_TIM_PWM_MspInit+0xcc>)
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
}
 80047d2:	bf00      	nop
 80047d4:	3724      	adds	r7, #36	; 0x24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40013400 	.word	0x40013400
 80047f0:	40014000 	.word	0x40014000

080047f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0a      	ldr	r2, [pc, #40]	; (800482c <HAL_TIM_Base_MspInit+0x38>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10b      	bne.n	800481e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_TIM_Base_MspInit+0x3c>)
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	4a09      	ldr	r2, [pc, #36]	; (8004830 <HAL_TIM_Base_MspInit+0x3c>)
 800480c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004810:	6613      	str	r3, [r2, #96]	; 0x60
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <HAL_TIM_Base_MspInit+0x3c>)
 8004814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40014400 	.word	0x40014400
 8004830:	40021000 	.word	0x40021000

08004834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08e      	sub	sp, #56	; 0x38
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a76      	ldr	r2, [pc, #472]	; (8004a2c <HAL_TIM_MspPostInit+0x1f8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d11c      	bne.n	8004890 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004856:	4b76      	ldr	r3, [pc, #472]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	4a75      	ldr	r2, [pc, #468]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004862:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	6a3b      	ldr	r3, [r7, #32]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800486e:	230f      	movs	r3, #15
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	2302      	movs	r3, #2
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487a:	2300      	movs	r3, #0
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800487e:	2302      	movs	r3, #2
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004886:	4619      	mov	r1, r3
 8004888:	486a      	ldr	r0, [pc, #424]	; (8004a34 <HAL_TIM_MspPostInit+0x200>)
 800488a:	f001 f9f3 	bl	8005c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800488e:	e0c8      	b.n	8004a22 <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d13a      	bne.n	8004910 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800489a:	4b65      	ldr	r3, [pc, #404]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	4a64      	ldr	r2, [pc, #400]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048a6:	4b62      	ldr	r3, [pc, #392]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b2:	4b5f      	ldr	r3, [pc, #380]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	4a5e      	ldr	r2, [pc, #376]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048be:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048ca:	2303      	movs	r3, #3
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	2302      	movs	r3, #2
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048da:	2301      	movs	r3, #1
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e2:	4619      	mov	r1, r3
 80048e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048e8:	f001 f9c4 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80048ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f2:	2302      	movs	r3, #2
 80048f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fa:	2300      	movs	r3, #0
 80048fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048fe:	2301      	movs	r3, #1
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004906:	4619      	mov	r1, r3
 8004908:	484b      	ldr	r0, [pc, #300]	; (8004a38 <HAL_TIM_MspPostInit+0x204>)
 800490a:	f001 f9b3 	bl	8005c74 <HAL_GPIO_Init>
}
 800490e:	e088      	b.n	8004a22 <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM3)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a49      	ldr	r2, [pc, #292]	; (8004a3c <HAL_TIM_MspPostInit+0x208>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d11d      	bne.n	8004956 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491a:	4b45      	ldr	r3, [pc, #276]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	4a44      	ldr	r2, [pc, #272]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004926:	4b42      	ldr	r3, [pc, #264]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004932:	2310      	movs	r3, #16
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004936:	2302      	movs	r3, #2
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493a:	2300      	movs	r3, #0
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493e:	2300      	movs	r3, #0
 8004940:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004942:	2302      	movs	r3, #2
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800494a:	4619      	mov	r1, r3
 800494c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004950:	f001 f990 	bl	8005c74 <HAL_GPIO_Init>
}
 8004954:	e065      	b.n	8004a22 <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a39      	ldr	r2, [pc, #228]	; (8004a40 <HAL_TIM_MspPostInit+0x20c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d11c      	bne.n	800499a <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004960:	4b33      	ldr	r3, [pc, #204]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 8004962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004964:	4a32      	ldr	r2, [pc, #200]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 8004966:	f043 0304 	orr.w	r3, r3, #4
 800496a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800496c:	4b30      	ldr	r3, [pc, #192]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 800496e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497c:	2302      	movs	r3, #2
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004984:	2300      	movs	r3, #0
 8004986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004988:	2304      	movs	r3, #4
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800498c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004990:	4619      	mov	r1, r3
 8004992:	4828      	ldr	r0, [pc, #160]	; (8004a34 <HAL_TIM_MspPostInit+0x200>)
 8004994:	f001 f96e 	bl	8005c74 <HAL_GPIO_Init>
}
 8004998:	e043      	b.n	8004a22 <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM15)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <HAL_TIM_MspPostInit+0x210>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d11d      	bne.n	80049e0 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a4:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80049bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c2:	2302      	movs	r3, #2
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ca:	2300      	movs	r3, #0
 80049cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80049ce:	2301      	movs	r3, #1
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d6:	4619      	mov	r1, r3
 80049d8:	4817      	ldr	r0, [pc, #92]	; (8004a38 <HAL_TIM_MspPostInit+0x204>)
 80049da:	f001 f94b 	bl	8005c74 <HAL_GPIO_Init>
}
 80049de:	e020      	b.n	8004a22 <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM16)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <HAL_TIM_MspPostInit+0x214>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d11b      	bne.n	8004a22 <HAL_TIM_MspPostInit+0x1ee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	4a10      	ldr	r2, [pc, #64]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80049f0:	f043 0302 	orr.w	r3, r3, #2
 80049f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049f6:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <HAL_TIM_MspPostInit+0x1fc>)
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004a02:	2310      	movs	r3, #16
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a06:	2302      	movs	r3, #2
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8004a12:	2301      	movs	r3, #1
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4806      	ldr	r0, [pc, #24]	; (8004a38 <HAL_TIM_MspPostInit+0x204>)
 8004a1e:	f001 f929 	bl	8005c74 <HAL_GPIO_Init>
}
 8004a22:	bf00      	nop
 8004a24:	3738      	adds	r7, #56	; 0x38
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40021000 	.word	0x40021000
 8004a34:	48000800 	.word	0x48000800
 8004a38:	48000400 	.word	0x48000400
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40013400 	.word	0x40013400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40014400 	.word	0x40014400

08004a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a50:	e7fe      	b.n	8004a50 <NMI_Handler+0x4>

08004a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a56:	e7fe      	b.n	8004a56 <HardFault_Handler+0x4>

08004a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a5c:	e7fe      	b.n	8004a5c <MemManage_Handler+0x4>

08004a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a62:	e7fe      	b.n	8004a62 <BusFault_Handler+0x4>

08004a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a68:	e7fe      	b.n	8004a68 <UsageFault_Handler+0x4>

08004a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	///////////// FOR TESTING

	static uint32_t teller_bryter = 0;
	teller_bryter++;
 8004a98:	4b49      	ldr	r3, [pc, #292]	; (8004bc0 <SysTick_Handler+0x12c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	4a48      	ldr	r2, [pc, #288]	; (8004bc0 <SysTick_Handler+0x12c>)
 8004aa0:	6013      	str	r3, [r2, #0]
	if (teller_bryter >= 10){
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <SysTick_Handler+0x12c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b09      	cmp	r3, #9
 8004aa8:	d904      	bls.n	8004ab4 <SysTick_Handler+0x20>
		teller_bryter = 0;
 8004aaa:	4b45      	ldr	r3, [pc, #276]	; (8004bc0 <SysTick_Handler+0x12c>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
		sjekk_bryter();		// Sjekker om det har vært et brukertrykk siden sist sjekk.
 8004ab0:	f7fd fdd2 	bl	8002658 <sjekk_bryter>
	}

	///////////// FEILSJEKKING

	static uint32_t teller_siden_marco = 0;
	teller_siden_marco++;
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <SysTick_Handler+0x130>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	4a42      	ldr	r2, [pc, #264]	; (8004bc4 <SysTick_Handler+0x130>)
 8004abc:	6013      	str	r3, [r2, #0]

	// MARCO blir aldri satt til 0 noe sted, løkke >= 3000 vil aldri være sann
	if (MARCO){
 8004abe:	4b42      	ldr	r3, [pc, #264]	; (8004bc8 <SysTick_Handler+0x134>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <SysTick_Handler+0x38>
		teller_siden_marco = 0;
 8004ac6:	4b3f      	ldr	r3, [pc, #252]	; (8004bc4 <SysTick_Handler+0x130>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
	}

	if (teller_siden_marco >= 3000){
 8004acc:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <SysTick_Handler+0x130>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d909      	bls.n	8004aec <SysTick_Handler+0x58>
		// sette alle motorer til idle dersom mister kontakt med topside
		null_bidrag_horisontal(&sum_bidrag);
 8004ad8:	483c      	ldr	r0, [pc, #240]	; (8004bcc <SysTick_Handler+0x138>)
 8004ada:	f7fd fde5 	bl	80026a8 <null_bidrag_horisontal>
		null_bidrag_vertikal(&sum_bidrag);
 8004ade:	483b      	ldr	r0, [pc, #236]	; (8004bcc <SysTick_Handler+0x138>)
 8004ae0:	f7fd fdfc 	bl	80026dc <null_bidrag_vertikal>
		konverter_sum_bidrag_PWM();
 8004ae4:	f7fe fbc0 	bl	8003268 <konverter_sum_bidrag_PWM>
		send_thruster_PWM();
 8004ae8:	f7fe fc1e 	bl	8003328 <send_thruster_PWM>


	// teller for om CAN styring feiler, denne telleren skal ikke nå et alt for høyt nivå dersom
	// får thrust meldinger kontinuerlig, vil da bli satt til 0 for hver melding.
	static uint32_t teller_feil_CAN_styring = 0;
	teller_feil_CAN_styring++;
 8004aec:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <SysTick_Handler+0x13c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <SysTick_Handler+0x13c>)
 8004af4:	6013      	str	r3, [r2, #0]

	// dersom når feks 60ms, vil si at CAN styring har feilet, ønsker da at alle paadrag skal settes
	// til 0, siden har mistet kontroll over ROV-en

	if(teller_feil_CAN_styring >= 3000){
 8004af6:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <SysTick_Handler+0x13c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d909      	bls.n	8004b16 <SysTick_Handler+0x82>
		// CAN THRUSTER FEILET
		null_bidrag_horisontal(&sum_bidrag);
 8004b02:	4832      	ldr	r0, [pc, #200]	; (8004bcc <SysTick_Handler+0x138>)
 8004b04:	f7fd fdd0 	bl	80026a8 <null_bidrag_horisontal>
		null_bidrag_vertikal(&sum_bidrag);
 8004b08:	4830      	ldr	r0, [pc, #192]	; (8004bcc <SysTick_Handler+0x138>)
 8004b0a:	f7fd fde7 	bl	80026dc <null_bidrag_vertikal>
		konverter_sum_bidrag_PWM();
 8004b0e:	f7fe fbab 	bl	8003268 <konverter_sum_bidrag_PWM>
		send_thruster_PWM();
 8004b12:	f7fe fc09 	bl	8003328 <send_thruster_PWM>

	}


	static uint32_t teller_feil_CAN_manpu = 0;
	teller_feil_CAN_manpu++;
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <SysTick_Handler+0x140>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <SysTick_Handler+0x140>)
 8004b1e:	6013      	str	r3, [r2, #0]
	}


	////////// STYRING

	if (MOTTATT_THRUST){
 8004b20:	4b2d      	ldr	r3, [pc, #180]	; (8004bd8 <SysTick_Handler+0x144>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d028      	beq.n	8004b7a <SysTick_Handler+0xe6>
		static uint32_t teller_timeout_send;
		teller_timeout_send++;
 8004b28:	4b2c      	ldr	r3, [pc, #176]	; (8004bdc <SysTick_Handler+0x148>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	4a2b      	ldr	r2, [pc, #172]	; (8004bdc <SysTick_Handler+0x148>)
 8004b30:	6013      	str	r3, [r2, #0]
		// roven skrus på, må sendes aktiveringsmelding først.
		// !(REG_AKTIVER & 0x01) -> dersom bit 0 er 0, ingen regulering
		// !(REG_AKTIVER & 0x01)

		//|| !(REG_AKTIVER & 0x01
		if ( (teller_timeout_send >= 250)){
 8004b32:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <SysTick_Handler+0x148>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2bf9      	cmp	r3, #249	; 0xf9
 8004b38:	d90c      	bls.n	8004b54 <SysTick_Handler+0xc0>
			SUM_BIDRAG_STYRING = 1;
 8004b3a:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <SysTick_Handler+0x14c>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]

			teller_timeout_send = 0;
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <SysTick_Handler+0x148>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
			// hopp ut av if
			MOTTATT_THRUST = 0;
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <SysTick_Handler+0x144>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]

			//har mottatt thrust melding en gang dersom her, setter teller for feil i styremelding
			//til 0.
			teller_feil_CAN_styring = 0;
 8004b4c:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <SysTick_Handler+0x13c>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e012      	b.n	8004b7a <SysTick_Handler+0xe6>
		}
		// else if slik at denne ikke vil bli testet. Dersom if blir utført i tillegg(vil da overskrive forrige sum_bidrag)

		else if (MOTTATT_SENSOR){
 8004b54:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <SysTick_Handler+0x150>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00e      	beq.n	8004b7a <SysTick_Handler+0xe6>
			SUM_BIDRAG_INKL_REG = 1;
 8004b5c:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <SysTick_Handler+0x154>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]

			teller_timeout_send = 0;
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <SysTick_Handler+0x148>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
			MOTTATT_SENSOR = 0;
 8004b68:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <SysTick_Handler+0x150>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
			MOTTATT_THRUST= 0;
 8004b6e:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <SysTick_Handler+0x144>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]

			teller_feil_CAN_styring = 0;
 8004b74:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <SysTick_Handler+0x13c>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
	}

	///////////// SENDING OVER CAN

	static uint32_t teller_temp_topside = 0;
	teller_temp_topside++;
 8004b7a:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <SysTick_Handler+0x158>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <SysTick_Handler+0x158>)
 8004b82:	6013      	str	r3, [r2, #0]

	// både hente temperatursensordata og sende til topside på 500ms går fint ()
	if (teller_temp_topside >= 500){ // 500 ms
 8004b84:	4b19      	ldr	r3, [pc, #100]	; (8004bec <SysTick_Handler+0x158>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b8c:	d305      	bcc.n	8004b9a <SysTick_Handler+0x106>
		teller_temp_topside = 0;
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <SysTick_Handler+0x158>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
		LES_SEND_TEMP = 1;
 8004b94:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <SysTick_Handler+0x15c>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]

		//teller_ID_129 = 0;
	}

	static uint32_t teller_thrust_topside = 0;
	teller_thrust_topside++;
 8004b9a:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <SysTick_Handler+0x160>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <SysTick_Handler+0x160>)
 8004ba2:	6013      	str	r3, [r2, #0]
	if (teller_thrust_topside >= 100){
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <SysTick_Handler+0x160>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b63      	cmp	r3, #99	; 0x63
 8004baa:	d905      	bls.n	8004bb8 <SysTick_Handler+0x124>
		teller_thrust_topside = 0;
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <SysTick_Handler+0x160>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
		THRUST_TOPSIDE = 1;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <SysTick_Handler+0x164>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
	}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bb8:	f000 f8b8 	bl	8004d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bbc:	bf00      	nop
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	200006c0 	.word	0x200006c0
 8004bc4:	200006c4 	.word	0x200006c4
 8004bc8:	200000a6 	.word	0x200000a6
 8004bcc:	20000104 	.word	0x20000104
 8004bd0:	200006c8 	.word	0x200006c8
 8004bd4:	200006cc 	.word	0x200006cc
 8004bd8:	200000a7 	.word	0x200000a7
 8004bdc:	200006d0 	.word	0x200006d0
 8004be0:	200000aa 	.word	0x200000aa
 8004be4:	200000a9 	.word	0x200000a9
 8004be8:	200000ab 	.word	0x200000ab
 8004bec:	200006d4 	.word	0x200006d4
 8004bf0:	200000ad 	.word	0x200000ad
 8004bf4:	200006d8 	.word	0x200006d8
 8004bf8:	200000ac 	.word	0x200000ac

08004bfc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004c00:	4802      	ldr	r0, [pc, #8]	; (8004c0c <FDCAN1_IT0_IRQHandler+0x10>)
 8004c02:	f000 fdc3 	bl	800578c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	200002dc 	.word	0x200002dc

08004c10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <SystemInit+0x20>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	4a05      	ldr	r2, [pc, #20]	; (8004c30 <SystemInit+0x20>)
 8004c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c34:	480d      	ldr	r0, [pc, #52]	; (8004c6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c38:	480d      	ldr	r0, [pc, #52]	; (8004c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c3a:	490e      	ldr	r1, [pc, #56]	; (8004c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <LoopForever+0xe>)
  movs r3, #0
 8004c3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004c40:	e002      	b.n	8004c48 <LoopCopyDataInit>

08004c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c46:	3304      	adds	r3, #4

08004c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c4c:	d3f9      	bcc.n	8004c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c4e:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c50:	4c0b      	ldr	r4, [pc, #44]	; (8004c80 <LoopForever+0x16>)
  movs r3, #0
 8004c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c54:	e001      	b.n	8004c5a <LoopFillZerobss>

08004c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c58:	3204      	adds	r2, #4

08004c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c5c:	d3fb      	bcc.n	8004c56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c5e:	f7ff ffd7 	bl	8004c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c62:	f004 fd85 	bl	8009770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c66:	f7fe fcd5 	bl	8003614 <main>

08004c6a <LoopForever>:

LoopForever:
    b LoopForever
 8004c6a:	e7fe      	b.n	8004c6a <LoopForever>
  ldr   r0, =_estack
 8004c6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c74:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004c78:	08009864 	.word	0x08009864
  ldr r2, =_sbss
 8004c7c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004c80:	200006e0 	.word	0x200006e0

08004c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c84:	e7fe      	b.n	8004c84 <ADC1_2_IRQHandler>

08004c86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c90:	2003      	movs	r0, #3
 8004c92:	f000 f95b 	bl	8004f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c96:	200f      	movs	r0, #15
 8004c98:	f000 f80e 	bl	8004cb8 <HAL_InitTick>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	71fb      	strb	r3, [r7, #7]
 8004ca6:	e001      	b.n	8004cac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ca8:	f7ff fbbc 	bl	8004424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004cac:	79fb      	ldrb	r3, [r7, #7]

}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004cc4:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <HAL_InitTick+0x68>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d022      	beq.n	8004d12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_InitTick+0x6c>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <HAL_InitTick+0x68>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f966 	bl	8004fb2 <HAL_SYSTICK_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10f      	bne.n	8004d0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b0f      	cmp	r3, #15
 8004cf0:	d809      	bhi.n	8004d06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfa:	f000 f932 	bl	8004f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cfe:	4a0a      	ldr	r2, [pc, #40]	; (8004d28 <HAL_InitTick+0x70>)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e007      	b.n	8004d16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	e004      	b.n	8004d16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e001      	b.n	8004d16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000080 	.word	0x20000080
 8004d24:	20000078 	.word	0x20000078
 8004d28:	2000007c 	.word	0x2000007c

08004d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <HAL_IncTick+0x1c>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_IncTick+0x20>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	4a03      	ldr	r2, [pc, #12]	; (8004d48 <HAL_IncTick+0x1c>)
 8004d3c:	6013      	str	r3, [r2, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	200006dc 	.word	0x200006dc
 8004d4c:	20000080 	.word	0x20000080

08004d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return uwTick;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_GetTick+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	200006dc 	.word	0x200006dc

08004d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d70:	f7ff ffee 	bl	8004d50 <HAL_GetTick>
 8004d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d80:	d004      	beq.n	8004d8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <HAL_Delay+0x40>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d8c:	bf00      	nop
 8004d8e:	f7ff ffdf 	bl	8004d50 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d8f7      	bhi.n	8004d8e <HAL_Delay+0x26>
  {
  }
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000080 	.word	0x20000080

08004dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dde:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <__NVIC_SetPriorityGrouping+0x44>)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	60d3      	str	r3, [r2, #12]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df8:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <__NVIC_GetPriorityGrouping+0x18>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f003 0307 	and.w	r3, r3, #7
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	db0b      	blt.n	8004e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	f003 021f 	and.w	r2, r3, #31
 8004e28:	4907      	ldr	r1, [pc, #28]	; (8004e48 <__NVIC_EnableIRQ+0x38>)
 8004e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	2001      	movs	r0, #1
 8004e32:	fa00 f202 	lsl.w	r2, r0, r2
 8004e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000e100 	.word	0xe000e100

08004e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	6039      	str	r1, [r7, #0]
 8004e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	db0a      	blt.n	8004e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	490c      	ldr	r1, [pc, #48]	; (8004e98 <__NVIC_SetPriority+0x4c>)
 8004e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6a:	0112      	lsls	r2, r2, #4
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e74:	e00a      	b.n	8004e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	4908      	ldr	r1, [pc, #32]	; (8004e9c <__NVIC_SetPriority+0x50>)
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	3b04      	subs	r3, #4
 8004e84:	0112      	lsls	r2, r2, #4
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	440b      	add	r3, r1
 8004e8a:	761a      	strb	r2, [r3, #24]
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	e000e100 	.word	0xe000e100
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	; 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f1c3 0307 	rsb	r3, r3, #7
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	bf28      	it	cs
 8004ebe:	2304      	movcs	r3, #4
 8004ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2b06      	cmp	r3, #6
 8004ec8:	d902      	bls.n	8004ed0 <NVIC_EncodePriority+0x30>
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3b03      	subs	r3, #3
 8004ece:	e000      	b.n	8004ed2 <NVIC_EncodePriority+0x32>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	43d9      	mvns	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef8:	4313      	orrs	r3, r2
         );
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3724      	adds	r7, #36	; 0x24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f18:	d301      	bcc.n	8004f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e00f      	b.n	8004f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <SysTick_Config+0x40>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f26:	210f      	movs	r1, #15
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f2c:	f7ff ff8e 	bl	8004e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <SysTick_Config+0x40>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f36:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <SysTick_Config+0x40>)
 8004f38:	2207      	movs	r2, #7
 8004f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	e000e010 	.word	0xe000e010

08004f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff ff29 	bl	8004dac <__NVIC_SetPriorityGrouping>
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b086      	sub	sp, #24
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	4603      	mov	r3, r0
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f70:	f7ff ff40 	bl	8004df4 <__NVIC_GetPriorityGrouping>
 8004f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	6978      	ldr	r0, [r7, #20]
 8004f7c:	f7ff ff90 	bl	8004ea0 <NVIC_EncodePriority>
 8004f80:	4602      	mov	r2, r0
 8004f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f86:	4611      	mov	r1, r2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ff5f 	bl	8004e4c <__NVIC_SetPriority>
}
 8004f8e:	bf00      	nop
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff33 	bl	8004e10 <__NVIC_EnableIRQ>
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff ffa4 	bl	8004f08 <SysTick_Config>
 8004fc0:	4603      	mov	r3, r0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e147      	b.n	800526e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fa3a 	bl	800446c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0210 	bic.w	r2, r2, #16
 8005006:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005008:	f7ff fea2 	bl	8004d50 <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800500e:	e012      	b.n	8005036 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005010:	f7ff fe9e 	bl	8004d50 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b0a      	cmp	r3, #10
 800501c:	d90b      	bls.n	8005036 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2203      	movs	r2, #3
 800502e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e11b      	b.n	800526e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b08      	cmp	r3, #8
 8005042:	d0e5      	beq.n	8005010 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005054:	f7ff fe7c 	bl	8004d50 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800505a:	e012      	b.n	8005082 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800505c:	f7ff fe78 	bl	8004d50 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b0a      	cmp	r3, #10
 8005068:	d90b      	bls.n	8005082 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2203      	movs	r2, #3
 800507a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0f5      	b.n	800526e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0e5      	beq.n	800505c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0202 	orr.w	r2, r2, #2
 800509e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a74      	ldr	r2, [pc, #464]	; (8005278 <HAL_FDCAN_Init+0x2ac>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d103      	bne.n	80050b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80050aa:	4a74      	ldr	r2, [pc, #464]	; (800527c <HAL_FDCAN_Init+0x2b0>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7c1b      	ldrb	r3, [r3, #16]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d108      	bne.n	80050cc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c8:	619a      	str	r2, [r3, #24]
 80050ca:	e007      	b.n	80050dc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050da:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	7c5b      	ldrb	r3, [r3, #17]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d108      	bne.n	80050f6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f2:	619a      	str	r2, [r3, #24]
 80050f4:	e007      	b.n	8005106 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005104:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	7c9b      	ldrb	r3, [r3, #18]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d108      	bne.n	8005120 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800511c:	619a      	str	r2, [r3, #24]
 800511e:	e007      	b.n	8005130 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800512e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005154:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0210 	bic.w	r2, r2, #16
 8005164:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d108      	bne.n	8005180 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0204 	orr.w	r2, r2, #4
 800517c:	619a      	str	r2, [r3, #24]
 800517e:	e02c      	b.n	80051da <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d028      	beq.n	80051da <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d01c      	beq.n	80051ca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800519e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0210 	orr.w	r2, r2, #16
 80051ae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d110      	bne.n	80051da <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0220 	orr.w	r2, r2, #32
 80051c6:	619a      	str	r2, [r3, #24]
 80051c8:	e007      	b.n	80051da <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0220 	orr.w	r2, r2, #32
 80051d8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	3b01      	subs	r3, #1
 80051e0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051ea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051f2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005202:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005204:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800520e:	d115      	bne.n	800523c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	3b01      	subs	r3, #1
 800521c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800521e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	3b01      	subs	r3, #1
 8005226:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005228:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	3b01      	subs	r3, #1
 8005232:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005238:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800523a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fc3c 	bl	8005ad0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40006400 	.word	0x40006400
 800527c:	40006500 	.word	0x40006500

08005280 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005290:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d002      	beq.n	800529e <HAL_FDCAN_ConfigFilter+0x1e>
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d13d      	bne.n	800531a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d119      	bne.n	80052da <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052b2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80052ba:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e01d      	b.n	8005316 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	075a      	lsls	r2, r3, #29
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	079a      	lsls	r2, r3, #30
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	3304      	adds	r3, #4
 800530e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e006      	b.n	8005328 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531e:	f043 0202 	orr.w	r2, r3, #2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
  }
}
 8005328:	4618      	mov	r0, r3
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d110      	bne.n	800536a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	e006      	b.n	8005378 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536e:	f043 0204 	orr.w	r2, r3, #4
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
  }
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d12c      	bne.n	80053f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80053a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e023      	b.n	8005404 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fbd2 	bl	8005b7c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	fa01 f202 	lsl.w	r2, r1, r2
 80053e4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80053e8:	2201      	movs	r2, #1
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	409a      	lsls	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e006      	b.n	8005404 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	f043 0208 	orr.w	r2, r3, #8
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
  }
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800540c:	b480      	push	{r7}
 800540e:	b08b      	sub	sp, #44	; 0x2c
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005420:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005422:	7efb      	ldrb	r3, [r7, #27]
 8005424:	2b02      	cmp	r3, #2
 8005426:	f040 80bc 	bne.w	80055a2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d121      	bne.n	8005474 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0af      	b.n	80055b0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	4613      	mov	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4413      	add	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	440b      	add	r3, r1
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
 8005472:	e020      	b.n	80054b6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2b00      	cmp	r3, #0
 8005482:	d107      	bne.n	8005494 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e08d      	b.n	80055b0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800549c:	0a1b      	lsrs	r3, r3, #8
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	440b      	add	r3, r1
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d107      	bne.n	80054da <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	0c9b      	lsrs	r3, r3, #18
 80054d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e005      	b.n	80054e6 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	3304      	adds	r3, #4
 8005502:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	b29a      	uxth	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	0e1b      	lsrs	r3, r3, #24
 8005538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0fda      	lsrs	r2, r3, #31
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	3304      	adds	r3, #4
 800554e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005554:	2300      	movs	r3, #0
 8005556:	623b      	str	r3, [r7, #32]
 8005558:	e00a      	b.n	8005570 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	441a      	add	r2, r3
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	440b      	add	r3, r1
 8005566:	7812      	ldrb	r2, [r2, #0]
 8005568:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	3301      	adds	r3, #1
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	4a11      	ldr	r2, [pc, #68]	; (80055bc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8005578:	5cd3      	ldrb	r3, [r2, r3]
 800557a:	461a      	mov	r2, r3
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	4293      	cmp	r3, r2
 8005580:	d3eb      	bcc.n	800555a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d105      	bne.n	8005594 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005592:	e004      	b.n	800559e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e006      	b.n	80055b0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a6:	f043 0208 	orr.w	r2, r3, #8
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	372c      	adds	r7, #44	; 0x2c
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	0800981c 	.word	0x0800981c

080055c0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055d2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d003      	beq.n	80055e2 <HAL_FDCAN_ActivateNotification+0x22>
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	f040 80c8 	bne.w	8005772 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d03b      	beq.n	8005676 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005604:	2b00      	cmp	r3, #0
 8005606:	d004      	beq.n	8005612 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d031      	beq.n	8005676 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d027      	beq.n	8005676 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01d      	beq.n	8005676 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d013      	beq.n	8005676 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00c      	beq.n	8005686 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d13b      	bne.n	8005712 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d131      	bne.n	8005712 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d127      	bne.n	8005712 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d11d      	bne.n	8005712 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d113      	bne.n	8005712 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0202 	orr.w	r2, r2, #2
 8005720:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d009      	beq.n	8005740 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	430a      	orrs	r2, r1
 800573c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	430a      	orrs	r2, r1
 800575a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	430a      	orrs	r2, r1
 800576c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e006      	b.n	8005780 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005776:	f043 0202 	orr.w	r2, r3, #2
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a8:	4013      	ands	r3, r2
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	6a3a      	ldr	r2, [r7, #32]
 80057c0:	4013      	ands	r3, r2
 80057c2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ce:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	4013      	ands	r3, r2
 80057da:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80057e6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80057fe:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4013      	ands	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d006      	beq.n	8005836 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2240      	movs	r2, #64	; 0x40
 800582e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f92e 	bl	8005a92 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01b      	beq.n	800587c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d014      	beq.n	800587c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800585a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4013      	ands	r3, r2
 8005868:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005872:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005874:	6939      	ldr	r1, [r7, #16]
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8ec 	bl	8005a54 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800588a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f8b6 	bl	80059fe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a3a      	ldr	r2, [r7, #32]
 800589e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80058a0:	6a39      	ldr	r1, [r7, #32]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fe fcc6 	bl	8004234 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80058b6:	69f9      	ldr	r1, [r7, #28]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f8ab 	bl	8005a14 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f8a0 	bl	8005a2a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01a      	beq.n	800592e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d013      	beq.n	800592e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800590e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4013      	ands	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f888 	bl	8005a3e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00e      	beq.n	800595a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005952:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f888 	bl	8005a6a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800597e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f87c 	bl	8005a7e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d011      	beq.n	80059b8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80059c6:	6979      	ldr	r1, [r7, #20]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f876 	bl	8005aba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d009      	beq.n	80059e8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f858 	bl	8005aa6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80059f6:	bf00      	nop
 80059f8:	3728      	adds	r7, #40	; 0x28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005ada:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	041a      	lsls	r2, r3, #16
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b10:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	061a      	lsls	r2, r3, #24
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e005      	b.n	8005b5e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d3f3      	bcc.n	8005b52 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	4000a400 	.word	0x4000a400

08005b7c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b089      	sub	sp, #36	; 0x24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005b9a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	e00a      	b.n	8005bbe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005bb0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005bb6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bbc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005bc8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005bce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005bd4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	440b      	add	r3, r1
 8005bee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	3304      	adds	r3, #4
 8005c06:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	e020      	b.n	8005c50 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	3303      	adds	r3, #3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	440b      	add	r3, r1
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c26:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	440b      	add	r3, r1
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005c34:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005c3e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	3304      	adds	r3, #4
 8005c48:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	4a06      	ldr	r2, [pc, #24]	; (8005c70 <FDCAN_CopyMessageToRAM+0xf4>)
 8005c58:	5cd3      	ldrb	r3, [r2, r3]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d3d5      	bcc.n	8005c0e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	3724      	adds	r7, #36	; 0x24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	0800981c 	.word	0x0800981c

08005c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c82:	e15a      	b.n	8005f3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	4013      	ands	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 814c 	beq.w	8005f34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d005      	beq.n	8005cb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d130      	bne.n	8005d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cea:	2201      	movs	r2, #1
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 0201 	and.w	r2, r3, #1
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d017      	beq.n	8005d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43db      	mvns	r3, r3
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4013      	ands	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d123      	bne.n	8005da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	08da      	lsrs	r2, r3, #3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3208      	adds	r2, #8
 8005d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	220f      	movs	r2, #15
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	08da      	lsrs	r2, r3, #3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3208      	adds	r2, #8
 8005da0:	6939      	ldr	r1, [r7, #16]
 8005da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	2203      	movs	r2, #3
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 0203 	and.w	r2, r3, #3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80a6 	beq.w	8005f34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005de8:	4b5b      	ldr	r3, [pc, #364]	; (8005f58 <HAL_GPIO_Init+0x2e4>)
 8005dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dec:	4a5a      	ldr	r2, [pc, #360]	; (8005f58 <HAL_GPIO_Init+0x2e4>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	6613      	str	r3, [r2, #96]	; 0x60
 8005df4:	4b58      	ldr	r3, [pc, #352]	; (8005f58 <HAL_GPIO_Init+0x2e4>)
 8005df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e00:	4a56      	ldr	r2, [pc, #344]	; (8005f5c <HAL_GPIO_Init+0x2e8>)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	089b      	lsrs	r3, r3, #2
 8005e06:	3302      	adds	r3, #2
 8005e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	220f      	movs	r2, #15
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4013      	ands	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e2a:	d01f      	beq.n	8005e6c <HAL_GPIO_Init+0x1f8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a4c      	ldr	r2, [pc, #304]	; (8005f60 <HAL_GPIO_Init+0x2ec>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d019      	beq.n	8005e68 <HAL_GPIO_Init+0x1f4>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a4b      	ldr	r2, [pc, #300]	; (8005f64 <HAL_GPIO_Init+0x2f0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <HAL_GPIO_Init+0x1f0>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a4a      	ldr	r2, [pc, #296]	; (8005f68 <HAL_GPIO_Init+0x2f4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00d      	beq.n	8005e60 <HAL_GPIO_Init+0x1ec>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a49      	ldr	r2, [pc, #292]	; (8005f6c <HAL_GPIO_Init+0x2f8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d007      	beq.n	8005e5c <HAL_GPIO_Init+0x1e8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a48      	ldr	r2, [pc, #288]	; (8005f70 <HAL_GPIO_Init+0x2fc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d101      	bne.n	8005e58 <HAL_GPIO_Init+0x1e4>
 8005e54:	2305      	movs	r3, #5
 8005e56:	e00a      	b.n	8005e6e <HAL_GPIO_Init+0x1fa>
 8005e58:	2306      	movs	r3, #6
 8005e5a:	e008      	b.n	8005e6e <HAL_GPIO_Init+0x1fa>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	e006      	b.n	8005e6e <HAL_GPIO_Init+0x1fa>
 8005e60:	2303      	movs	r3, #3
 8005e62:	e004      	b.n	8005e6e <HAL_GPIO_Init+0x1fa>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e002      	b.n	8005e6e <HAL_GPIO_Init+0x1fa>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <HAL_GPIO_Init+0x1fa>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	f002 0203 	and.w	r2, r2, #3
 8005e74:	0092      	lsls	r2, r2, #2
 8005e76:	4093      	lsls	r3, r2
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e7e:	4937      	ldr	r1, [pc, #220]	; (8005f5c <HAL_GPIO_Init+0x2e8>)
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	3302      	adds	r3, #2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e8c:	4b39      	ldr	r3, [pc, #228]	; (8005f74 <HAL_GPIO_Init+0x300>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005eb0:	4a30      	ldr	r2, [pc, #192]	; (8005f74 <HAL_GPIO_Init+0x300>)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005eb6:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <HAL_GPIO_Init+0x300>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005eda:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <HAL_GPIO_Init+0x300>)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ee0:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <HAL_GPIO_Init+0x300>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4013      	ands	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f04:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_GPIO_Init+0x300>)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_GPIO_Init+0x300>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	43db      	mvns	r3, r3
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4013      	ands	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f2e:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <HAL_GPIO_Init+0x300>)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3301      	adds	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	fa22 f303 	lsr.w	r3, r2, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f47f ae9d 	bne.w	8005c84 <HAL_GPIO_Init+0x10>
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	48000400 	.word	0x48000400
 8005f64:	48000800 	.word	0x48000800
 8005f68:	48000c00 	.word	0x48000c00
 8005f6c:	48001000 	.word	0x48001000
 8005f70:	48001400 	.word	0x48001400
 8005f74:	40010400 	.word	0x40010400

08005f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	807b      	strh	r3, [r7, #2]
 8005f84:	4613      	mov	r3, r2
 8005f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f88:	787b      	ldrb	r3, [r7, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f8e:	887a      	ldrh	r2, [r7, #2]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f94:	e002      	b.n	8005f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f96:	887a      	ldrh	r2, [r7, #2]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e081      	b.n	80060be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fe faae 	bl	8004530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2224      	movs	r2, #36	; 0x24
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d107      	bne.n	8006022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800601e:	609a      	str	r2, [r3, #8]
 8006020:	e006      	b.n	8006030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800602e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d104      	bne.n	8006042 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69d9      	ldr	r1, [r3, #28]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1a      	ldr	r2, [r3, #32]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	4608      	mov	r0, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	817b      	strh	r3, [r7, #10]
 80060da:	460b      	mov	r3, r1
 80060dc:	813b      	strh	r3, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	f040 80f9 	bne.w	80062e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_I2C_Mem_Write+0x34>
 80060f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d105      	bne.n	8006108 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006102:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e0ed      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_I2C_Mem_Write+0x4e>
 8006112:	2302      	movs	r3, #2
 8006114:	e0e6      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800611e:	f7fe fe17 	bl	8004d50 <HAL_GetTick>
 8006122:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	2319      	movs	r3, #25
 800612a:	2201      	movs	r2, #1
 800612c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fac3 	bl	80066bc <I2C_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0d1      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2221      	movs	r2, #33	; 0x21
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2240      	movs	r2, #64	; 0x40
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a3a      	ldr	r2, [r7, #32]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006168:	88f8      	ldrh	r0, [r7, #6]
 800616a:	893a      	ldrh	r2, [r7, #8]
 800616c:	8979      	ldrh	r1, [r7, #10]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4603      	mov	r3, r0
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f9d3 	bl	8006524 <I2C_RequestMemoryWrite>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0a9      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2bff      	cmp	r3, #255	; 0xff
 8006198:	d90e      	bls.n	80061b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	22ff      	movs	r2, #255	; 0xff
 800619e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	8979      	ldrh	r1, [r7, #10]
 80061a8:	2300      	movs	r3, #0
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fc2b 	bl	8006a0c <I2C_TransferConfig>
 80061b6:	e00f      	b.n	80061d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	8979      	ldrh	r1, [r7, #10]
 80061ca:	2300      	movs	r3, #0
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fc1a 	bl	8006a0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 faad 	bl	800673c <I2C_WaitOnTXISFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e07b      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d034      	beq.n	8006290 <HAL_I2C_Mem_Write+0x1c8>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d130      	bne.n	8006290 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	2200      	movs	r2, #0
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fa3f 	bl	80066bc <I2C_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e04d      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624c:	b29b      	uxth	r3, r3
 800624e:	2bff      	cmp	r3, #255	; 0xff
 8006250:	d90e      	bls.n	8006270 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	22ff      	movs	r2, #255	; 0xff
 8006256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625c:	b2da      	uxtb	r2, r3
 800625e:	8979      	ldrh	r1, [r7, #10]
 8006260:	2300      	movs	r3, #0
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fbcf 	bl	8006a0c <I2C_TransferConfig>
 800626e:	e00f      	b.n	8006290 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627e:	b2da      	uxtb	r2, r3
 8006280:	8979      	ldrh	r1, [r7, #10]
 8006282:	2300      	movs	r3, #0
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fbbe 	bl	8006a0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d19e      	bne.n	80061d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fa8c 	bl	80067bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e01a      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2220      	movs	r2, #32
 80062b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <HAL_I2C_Mem_Write+0x224>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e000      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	fe00e800 	.word	0xfe00e800

080062f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	461a      	mov	r2, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	817b      	strh	r3, [r7, #10]
 8006302:	460b      	mov	r3, r1
 8006304:	813b      	strh	r3, [r7, #8]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b20      	cmp	r3, #32
 8006314:	f040 80fd 	bne.w	8006512 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_I2C_Mem_Read+0x34>
 800631e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d105      	bne.n	8006330 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800632a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0f1      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_I2C_Mem_Read+0x4e>
 800633a:	2302      	movs	r3, #2
 800633c:	e0ea      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006346:	f7fe fd03 	bl	8004d50 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2319      	movs	r3, #25
 8006352:	2201      	movs	r2, #1
 8006354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f9af 	bl	80066bc <I2C_WaitOnFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e0d5      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2222      	movs	r2, #34	; 0x22
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2240      	movs	r2, #64	; 0x40
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a3a      	ldr	r2, [r7, #32]
 8006382:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006388:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006390:	88f8      	ldrh	r0, [r7, #6]
 8006392:	893a      	ldrh	r2, [r7, #8]
 8006394:	8979      	ldrh	r1, [r7, #10]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	4603      	mov	r3, r0
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f913 	bl	80065cc <I2C_RequestMemoryRead>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0ad      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2bff      	cmp	r3, #255	; 0xff
 80063c0:	d90e      	bls.n	80063e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	22ff      	movs	r2, #255	; 0xff
 80063c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	8979      	ldrh	r1, [r7, #10]
 80063d0:	4b52      	ldr	r3, [pc, #328]	; (800651c <HAL_I2C_Mem_Read+0x22c>)
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fb17 	bl	8006a0c <I2C_TransferConfig>
 80063de:	e00f      	b.n	8006400 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	8979      	ldrh	r1, [r7, #10]
 80063f2:	4b4a      	ldr	r3, [pc, #296]	; (800651c <HAL_I2C_Mem_Read+0x22c>)
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fb06 	bl	8006a0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	2200      	movs	r2, #0
 8006408:	2104      	movs	r1, #4
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f956 	bl	80066bc <I2C_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e07c      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d034      	beq.n	80064c0 <HAL_I2C_Mem_Read+0x1d0>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d130      	bne.n	80064c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	2200      	movs	r2, #0
 8006466:	2180      	movs	r1, #128	; 0x80
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f927 	bl	80066bc <I2C_WaitOnFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e04d      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647c:	b29b      	uxth	r3, r3
 800647e:	2bff      	cmp	r3, #255	; 0xff
 8006480:	d90e      	bls.n	80064a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	b2da      	uxtb	r2, r3
 800648e:	8979      	ldrh	r1, [r7, #10]
 8006490:	2300      	movs	r3, #0
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fab7 	bl	8006a0c <I2C_TransferConfig>
 800649e:	e00f      	b.n	80064c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	8979      	ldrh	r1, [r7, #10]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 faa6 	bl	8006a0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d19a      	bne.n	8006400 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f974 	bl	80067bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e01a      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2220      	movs	r2, #32
 80064e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6859      	ldr	r1, [r3, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_I2C_Mem_Read+0x230>)
 80064f2:	400b      	ands	r3, r1
 80064f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e000      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006512:	2302      	movs	r3, #2
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	80002400 	.word	0x80002400
 8006520:	fe00e800 	.word	0xfe00e800

08006524 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	4608      	mov	r0, r1
 800652e:	4611      	mov	r1, r2
 8006530:	461a      	mov	r2, r3
 8006532:	4603      	mov	r3, r0
 8006534:	817b      	strh	r3, [r7, #10]
 8006536:	460b      	mov	r3, r1
 8006538:	813b      	strh	r3, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	8979      	ldrh	r1, [r7, #10]
 8006544:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <I2C_RequestMemoryWrite+0xa4>)
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fa5d 	bl	8006a0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	69b9      	ldr	r1, [r7, #24]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f8f0 	bl	800673c <I2C_WaitOnTXISFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e02c      	b.n	80065c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d105      	bne.n	8006578 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800656c:	893b      	ldrh	r3, [r7, #8]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	629a      	str	r2, [r3, #40]	; 0x28
 8006576:	e015      	b.n	80065a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006578:	893b      	ldrh	r3, [r7, #8]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	b29b      	uxth	r3, r3
 800657e:	b2da      	uxtb	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	69b9      	ldr	r1, [r7, #24]
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f8d6 	bl	800673c <I2C_WaitOnTXISFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e012      	b.n	80065c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800659a:	893b      	ldrh	r3, [r7, #8]
 800659c:	b2da      	uxtb	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2180      	movs	r1, #128	; 0x80
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f884 	bl	80066bc <I2C_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	80002000 	.word	0x80002000

080065cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	4608      	mov	r0, r1
 80065d6:	4611      	mov	r1, r2
 80065d8:	461a      	mov	r2, r3
 80065da:	4603      	mov	r3, r0
 80065dc:	817b      	strh	r3, [r7, #10]
 80065de:	460b      	mov	r3, r1
 80065e0:	813b      	strh	r3, [r7, #8]
 80065e2:	4613      	mov	r3, r2
 80065e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	8979      	ldrh	r1, [r7, #10]
 80065ec:	4b20      	ldr	r3, [pc, #128]	; (8006670 <I2C_RequestMemoryRead+0xa4>)
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	2300      	movs	r3, #0
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fa0a 	bl	8006a0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	69b9      	ldr	r1, [r7, #24]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f89d 	bl	800673c <I2C_WaitOnTXISFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e02c      	b.n	8006666 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d105      	bne.n	800661e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006612:	893b      	ldrh	r3, [r7, #8]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28
 800661c:	e015      	b.n	800664a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800661e:	893b      	ldrh	r3, [r7, #8]
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	b29b      	uxth	r3, r3
 8006624:	b2da      	uxtb	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	69b9      	ldr	r1, [r7, #24]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f883 	bl	800673c <I2C_WaitOnTXISFlagUntilTimeout>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e012      	b.n	8006666 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006640:	893b      	ldrh	r3, [r7, #8]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2200      	movs	r2, #0
 8006652:	2140      	movs	r1, #64	; 0x40
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f831 	bl	80066bc <I2C_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e000      	b.n	8006666 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	80002000 	.word	0x80002000

08006674 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	d103      	bne.n	8006692 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2200      	movs	r2, #0
 8006690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	d007      	beq.n	80066b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	619a      	str	r2, [r3, #24]
  }
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066cc:	e022      	b.n	8006714 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d4:	d01e      	beq.n	8006714 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d6:	f7fe fb3b 	bl	8004d50 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d302      	bcc.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d113      	bne.n	8006714 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f0:	f043 0220 	orr.w	r2, r3, #32
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e00f      	b.n	8006734 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4013      	ands	r3, r2
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	429a      	cmp	r2, r3
 8006722:	bf0c      	ite	eq
 8006724:	2301      	moveq	r3, #1
 8006726:	2300      	movne	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	461a      	mov	r2, r3
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	429a      	cmp	r2, r3
 8006730:	d0cd      	beq.n	80066ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006748:	e02c      	b.n	80067a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f870 	bl	8006834 <I2C_IsErrorOccurred>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e02a      	b.n	80067b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006764:	d01e      	beq.n	80067a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006766:	f7fe faf3 	bl	8004d50 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	429a      	cmp	r2, r3
 8006774:	d302      	bcc.n	800677c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d113      	bne.n	80067a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e007      	b.n	80067b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d1cb      	bne.n	800674a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067c8:	e028      	b.n	800681c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f830 	bl	8006834 <I2C_IsErrorOccurred>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e026      	b.n	800682c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fe fab7 	bl	8004d50 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d113      	bne.n	800681c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f043 0220 	orr.w	r2, r3, #32
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e007      	b.n	800682c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b20      	cmp	r3, #32
 8006828:	d1cf      	bne.n	80067ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	; 0x28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	2b00      	cmp	r3, #0
 800685e:	d075      	beq.n	800694c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2210      	movs	r2, #16
 8006866:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006868:	e056      	b.n	8006918 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006870:	d052      	beq.n	8006918 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006872:	f7fe fa6d 	bl	8004d50 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d302      	bcc.n	8006888 <I2C_IsErrorOccurred+0x54>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d147      	bne.n	8006918 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006892:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800689a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068aa:	d12e      	bne.n	800690a <I2C_IsErrorOccurred+0xd6>
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b2:	d02a      	beq.n	800690a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80068b4:	7cfb      	ldrb	r3, [r7, #19]
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	d027      	beq.n	800690a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068ca:	f7fe fa41 	bl	8004d50 <HAL_GetTick>
 80068ce:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d0:	e01b      	b.n	800690a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068d2:	f7fe fa3d 	bl	8004d50 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b19      	cmp	r3, #25
 80068de:	d914      	bls.n	800690a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b20      	cmp	r3, #32
 8006916:	d1dc      	bne.n	80068d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b20      	cmp	r3, #32
 8006924:	d003      	beq.n	800692e <I2C_IsErrorOccurred+0xfa>
 8006926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800692a:	2b00      	cmp	r3, #0
 800692c:	d09d      	beq.n	800686a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800692e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2220      	movs	r2, #32
 800693c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	f043 0304 	orr.w	r3, r3, #4
 8006944:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00b      	beq.n	8006976 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800696e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	f043 0308 	orr.w	r3, r3, #8
 8006986:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	f043 0302 	orr.w	r3, r3, #2
 80069a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80069ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01c      	beq.n	80069fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fe56 	bl	8006674 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6859      	ldr	r1, [r3, #4]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b0d      	ldr	r3, [pc, #52]	; (8006a08 <I2C_IsErrorOccurred+0x1d4>)
 80069d4:	400b      	ands	r3, r1
 80069d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	431a      	orrs	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3728      	adds	r7, #40	; 0x28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	fe00e800 	.word	0xfe00e800

08006a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	607b      	str	r3, [r7, #4]
 8006a16:	460b      	mov	r3, r1
 8006a18:	817b      	strh	r3, [r7, #10]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a1e:	897b      	ldrh	r3, [r7, #10]
 8006a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a24:	7a7b      	ldrb	r3, [r7, #9]
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a2c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a3a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	0d5b      	lsrs	r3, r3, #21
 8006a46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a4a:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <I2C_TransferConfig+0x60>)
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	ea02 0103 	and.w	r1, r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	03ff63ff 	.word	0x03ff63ff

08006a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d138      	bne.n	8006af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e032      	b.n	8006afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2224      	movs	r2, #36	; 0x24
 8006aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6819      	ldr	r1, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e000      	b.n	8006afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d139      	bne.n	8006b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e033      	b.n	8006b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2224      	movs	r2, #36	; 0x24
 8006b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0201 	bic.w	r2, r2, #1
 8006b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e000      	b.n	8006b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b90:	2302      	movs	r3, #2
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d141      	bne.n	8006c32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006bae:	4b4b      	ldr	r3, [pc, #300]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bba:	d131      	bne.n	8006c20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bbc:	4b47      	ldr	r3, [pc, #284]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc2:	4a46      	ldr	r2, [pc, #280]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bcc:	4b43      	ldr	r3, [pc, #268]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006bd4:	4a41      	ldr	r2, [pc, #260]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bdc:	4b40      	ldr	r3, [pc, #256]	; (8006ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2232      	movs	r2, #50	; 0x32
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	4a3f      	ldr	r2, [pc, #252]	; (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006be8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bec:	0c9b      	lsrs	r3, r3, #18
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bf2:	e002      	b.n	8006bfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bfa:	4b38      	ldr	r3, [pc, #224]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c06:	d102      	bne.n	8006c0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f2      	bne.n	8006bf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c0e:	4b33      	ldr	r3, [pc, #204]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1a:	d158      	bne.n	8006cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e057      	b.n	8006cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c20:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c26:	4a2d      	ldr	r2, [pc, #180]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006c30:	e04d      	b.n	8006cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c38:	d141      	bne.n	8006cbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c3a:	4b28      	ldr	r3, [pc, #160]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c46:	d131      	bne.n	8006cac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c48:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4e:	4a23      	ldr	r2, [pc, #140]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c58:	4b20      	ldr	r3, [pc, #128]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c60:	4a1e      	ldr	r2, [pc, #120]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c68:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2232      	movs	r2, #50	; 0x32
 8006c6e:	fb02 f303 	mul.w	r3, r2, r3
 8006c72:	4a1c      	ldr	r2, [pc, #112]	; (8006ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c74:	fba2 2303 	umull	r2, r3, r2, r3
 8006c78:	0c9b      	lsrs	r3, r3, #18
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c7e:	e002      	b.n	8006c86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c86:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c92:	d102      	bne.n	8006c9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f2      	bne.n	8006c80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c9a:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca6:	d112      	bne.n	8006cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e011      	b.n	8006cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb2:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006cbc:	e007      	b.n	8006cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006cbe:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cc6:	4a05      	ldr	r2, [pc, #20]	; (8006cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ccc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	40007000 	.word	0x40007000
 8006ce0:	20000078 	.word	0x20000078
 8006ce4:	431bde83 	.word	0x431bde83

08006ce8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	4a04      	ldr	r2, [pc, #16]	; (8006d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cf6:	6093      	str	r3, [r2, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40007000 	.word	0x40007000

08006d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e306      	b.n	8007328 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d075      	beq.n	8006e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d26:	4b97      	ldr	r3, [pc, #604]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 030c 	and.w	r3, r3, #12
 8006d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d30:	4b94      	ldr	r3, [pc, #592]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b0c      	cmp	r3, #12
 8006d3e:	d102      	bne.n	8006d46 <HAL_RCC_OscConfig+0x3e>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d002      	beq.n	8006d4c <HAL_RCC_OscConfig+0x44>
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d10b      	bne.n	8006d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d4c:	4b8d      	ldr	r3, [pc, #564]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d05b      	beq.n	8006e10 <HAL_RCC_OscConfig+0x108>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d157      	bne.n	8006e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e2e1      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCC_OscConfig+0x74>
 8006d6e:	4b85      	ldr	r3, [pc, #532]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a84      	ldr	r2, [pc, #528]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e01d      	b.n	8006db8 <HAL_RCC_OscConfig+0xb0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d84:	d10c      	bne.n	8006da0 <HAL_RCC_OscConfig+0x98>
 8006d86:	4b7f      	ldr	r3, [pc, #508]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a7e      	ldr	r2, [pc, #504]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	4b7c      	ldr	r3, [pc, #496]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a7b      	ldr	r2, [pc, #492]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e00b      	b.n	8006db8 <HAL_RCC_OscConfig+0xb0>
 8006da0:	4b78      	ldr	r3, [pc, #480]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a77      	ldr	r2, [pc, #476]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	4b75      	ldr	r3, [pc, #468]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a74      	ldr	r2, [pc, #464]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d013      	beq.n	8006de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc0:	f7fd ffc6 	bl	8004d50 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc8:	f7fd ffc2 	bl	8004d50 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b64      	cmp	r3, #100	; 0x64
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e2a6      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dda:	4b6a      	ldr	r3, [pc, #424]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f0      	beq.n	8006dc8 <HAL_RCC_OscConfig+0xc0>
 8006de6:	e014      	b.n	8006e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de8:	f7fd ffb2 	bl	8004d50 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df0:	f7fd ffae 	bl	8004d50 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b64      	cmp	r3, #100	; 0x64
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e292      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e02:	4b60      	ldr	r3, [pc, #384]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0xe8>
 8006e0e:	e000      	b.n	8006e12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d075      	beq.n	8006f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e1e:	4b59      	ldr	r3, [pc, #356]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 030c 	and.w	r3, r3, #12
 8006e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e28:	4b56      	ldr	r3, [pc, #344]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0303 	and.w	r3, r3, #3
 8006e30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b0c      	cmp	r3, #12
 8006e36:	d102      	bne.n	8006e3e <HAL_RCC_OscConfig+0x136>
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d002      	beq.n	8006e44 <HAL_RCC_OscConfig+0x13c>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d11f      	bne.n	8006e84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e44:	4b4f      	ldr	r3, [pc, #316]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_RCC_OscConfig+0x154>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e265      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e5c:	4b49      	ldr	r3, [pc, #292]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	061b      	lsls	r3, r3, #24
 8006e6a:	4946      	ldr	r1, [pc, #280]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e70:	4b45      	ldr	r3, [pc, #276]	; (8006f88 <HAL_RCC_OscConfig+0x280>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fd ff1f 	bl	8004cb8 <HAL_InitTick>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d043      	beq.n	8006f08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e251      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d023      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e8c:	4b3d      	ldr	r3, [pc, #244]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a3c      	ldr	r2, [pc, #240]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fd ff5a 	bl	8004d50 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ea0:	f7fd ff56 	bl	8004d50 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e23a      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eb2:	4b34      	ldr	r3, [pc, #208]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ebe:	4b31      	ldr	r3, [pc, #196]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	061b      	lsls	r3, r3, #24
 8006ecc:	492d      	ldr	r1, [pc, #180]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	604b      	str	r3, [r1, #4]
 8006ed2:	e01a      	b.n	8006f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ed4:	4b2b      	ldr	r3, [pc, #172]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2a      	ldr	r2, [pc, #168]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fd ff36 	bl	8004d50 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ee8:	f7fd ff32 	bl	8004d50 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e216      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006efa:	4b22      	ldr	r3, [pc, #136]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x1e0>
 8006f06:	e000      	b.n	8006f0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d041      	beq.n	8006f9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01c      	beq.n	8006f58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f1e:	4b19      	ldr	r3, [pc, #100]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f24:	4a17      	ldr	r2, [pc, #92]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f2e:	f7fd ff0f 	bl	8004d50 <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f36:	f7fd ff0b 	bl	8004d50 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e1ef      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f48:	4b0e      	ldr	r3, [pc, #56]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0ef      	beq.n	8006f36 <HAL_RCC_OscConfig+0x22e>
 8006f56:	e020      	b.n	8006f9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f5e:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <HAL_RCC_OscConfig+0x27c>)
 8006f60:	f023 0301 	bic.w	r3, r3, #1
 8006f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f68:	f7fd fef2 	bl	8004d50 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f6e:	e00d      	b.n	8006f8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f70:	f7fd feee 	bl	8004d50 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d906      	bls.n	8006f8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e1d2      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
 8006f82:	bf00      	nop
 8006f84:	40021000 	.word	0x40021000
 8006f88:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f8c:	4b8c      	ldr	r3, [pc, #560]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8006f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1ea      	bne.n	8006f70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 80a6 	beq.w	80070f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fac:	4b84      	ldr	r3, [pc, #528]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_RCC_OscConfig+0x2b4>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <HAL_RCC_OscConfig+0x2b6>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00d      	beq.n	8006fde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fc2:	4b7f      	ldr	r3, [pc, #508]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc6:	4a7e      	ldr	r2, [pc, #504]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8006fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8006fce:	4b7c      	ldr	r3, [pc, #496]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8006fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fde:	4b79      	ldr	r3, [pc, #484]	; (80071c4 <HAL_RCC_OscConfig+0x4bc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d118      	bne.n	800701c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fea:	4b76      	ldr	r3, [pc, #472]	; (80071c4 <HAL_RCC_OscConfig+0x4bc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a75      	ldr	r2, [pc, #468]	; (80071c4 <HAL_RCC_OscConfig+0x4bc>)
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ff6:	f7fd feab 	bl	8004d50 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffe:	f7fd fea7 	bl	8004d50 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e18b      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007010:	4b6c      	ldr	r3, [pc, #432]	; (80071c4 <HAL_RCC_OscConfig+0x4bc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0f0      	beq.n	8006ffe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d108      	bne.n	8007036 <HAL_RCC_OscConfig+0x32e>
 8007024:	4b66      	ldr	r3, [pc, #408]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702a:	4a65      	ldr	r2, [pc, #404]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 800702c:	f043 0301 	orr.w	r3, r3, #1
 8007030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007034:	e024      	b.n	8007080 <HAL_RCC_OscConfig+0x378>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b05      	cmp	r3, #5
 800703c:	d110      	bne.n	8007060 <HAL_RCC_OscConfig+0x358>
 800703e:	4b60      	ldr	r3, [pc, #384]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007044:	4a5e      	ldr	r2, [pc, #376]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007046:	f043 0304 	orr.w	r3, r3, #4
 800704a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800704e:	4b5c      	ldr	r3, [pc, #368]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007054:	4a5a      	ldr	r2, [pc, #360]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800705e:	e00f      	b.n	8007080 <HAL_RCC_OscConfig+0x378>
 8007060:	4b57      	ldr	r3, [pc, #348]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007066:	4a56      	ldr	r2, [pc, #344]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007070:	4b53      	ldr	r3, [pc, #332]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007076:	4a52      	ldr	r2, [pc, #328]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007078:	f023 0304 	bic.w	r3, r3, #4
 800707c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d016      	beq.n	80070b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007088:	f7fd fe62 	bl	8004d50 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800708e:	e00a      	b.n	80070a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007090:	f7fd fe5e 	bl	8004d50 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f241 3288 	movw	r2, #5000	; 0x1388
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e140      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070a6:	4b46      	ldr	r3, [pc, #280]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 80070a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0ed      	beq.n	8007090 <HAL_RCC_OscConfig+0x388>
 80070b4:	e015      	b.n	80070e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b6:	f7fd fe4b 	bl	8004d50 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070bc:	e00a      	b.n	80070d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070be:	f7fd fe47 	bl	8004d50 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e129      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070d4:	4b3a      	ldr	r3, [pc, #232]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1ed      	bne.n	80070be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070e2:	7ffb      	ldrb	r3, [r7, #31]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d105      	bne.n	80070f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070e8:	4b35      	ldr	r3, [pc, #212]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 80070ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ec:	4a34      	ldr	r2, [pc, #208]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 80070ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d03c      	beq.n	800717a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01c      	beq.n	8007142 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007108:	4b2d      	ldr	r3, [pc, #180]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 800710a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800710e:	4a2c      	ldr	r2, [pc, #176]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007110:	f043 0301 	orr.w	r3, r3, #1
 8007114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007118:	f7fd fe1a 	bl	8004d50 <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007120:	f7fd fe16 	bl	8004d50 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e0fa      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007132:	4b23      	ldr	r3, [pc, #140]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0ef      	beq.n	8007120 <HAL_RCC_OscConfig+0x418>
 8007140:	e01b      	b.n	800717a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007142:	4b1f      	ldr	r3, [pc, #124]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007148:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007152:	f7fd fdfd 	bl	8004d50 <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800715a:	f7fd fdf9 	bl	8004d50 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e0dd      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800716c:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 800716e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1ef      	bne.n	800715a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80d1 	beq.w	8007326 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 030c 	and.w	r3, r3, #12
 800718c:	2b0c      	cmp	r3, #12
 800718e:	f000 808b 	beq.w	80072a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d15e      	bne.n	8007258 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800719a:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <HAL_RCC_OscConfig+0x4b8>)
 80071a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a6:	f7fd fdd3 	bl	8004d50 <HAL_GetTick>
 80071aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071ac:	e00c      	b.n	80071c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ae:	f7fd fdcf 	bl	8004d50 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d905      	bls.n	80071c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e0b3      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
 80071c0:	40021000 	.word	0x40021000
 80071c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c8:	4b59      	ldr	r3, [pc, #356]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1ec      	bne.n	80071ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071d4:	4b56      	ldr	r3, [pc, #344]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	4b56      	ldr	r3, [pc, #344]	; (8007334 <HAL_RCC_OscConfig+0x62c>)
 80071da:	4013      	ands	r3, r2
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6a11      	ldr	r1, [r2, #32]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071e4:	3a01      	subs	r2, #1
 80071e6:	0112      	lsls	r2, r2, #4
 80071e8:	4311      	orrs	r1, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80071ee:	0212      	lsls	r2, r2, #8
 80071f0:	4311      	orrs	r1, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071f6:	0852      	lsrs	r2, r2, #1
 80071f8:	3a01      	subs	r2, #1
 80071fa:	0552      	lsls	r2, r2, #21
 80071fc:	4311      	orrs	r1, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007202:	0852      	lsrs	r2, r2, #1
 8007204:	3a01      	subs	r2, #1
 8007206:	0652      	lsls	r2, r2, #25
 8007208:	4311      	orrs	r1, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800720e:	06d2      	lsls	r2, r2, #27
 8007210:	430a      	orrs	r2, r1
 8007212:	4947      	ldr	r1, [pc, #284]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 8007214:	4313      	orrs	r3, r2
 8007216:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007218:	4b45      	ldr	r3, [pc, #276]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a44      	ldr	r2, [pc, #272]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 800721e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007222:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007224:	4b42      	ldr	r3, [pc, #264]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4a41      	ldr	r2, [pc, #260]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 800722a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800722e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fd fd8e 	bl	8004d50 <HAL_GetTick>
 8007234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007238:	f7fd fd8a 	bl	8004d50 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e06e      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800724a:	4b39      	ldr	r3, [pc, #228]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <HAL_RCC_OscConfig+0x530>
 8007256:	e066      	b.n	8007326 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007258:	4b35      	ldr	r3, [pc, #212]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a34      	ldr	r2, [pc, #208]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 800725e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007262:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007264:	4b32      	ldr	r3, [pc, #200]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	4a31      	ldr	r2, [pc, #196]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 800726a:	f023 0303 	bic.w	r3, r3, #3
 800726e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007270:	4b2f      	ldr	r3, [pc, #188]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	4a2e      	ldr	r2, [pc, #184]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 8007276:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800727a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800727e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007280:	f7fd fd66 	bl	8004d50 <HAL_GetTick>
 8007284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007286:	e008      	b.n	800729a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007288:	f7fd fd62 	bl	8004d50 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d901      	bls.n	800729a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e046      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800729a:	4b25      	ldr	r3, [pc, #148]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1f0      	bne.n	8007288 <HAL_RCC_OscConfig+0x580>
 80072a6:	e03e      	b.n	8007326 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e039      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80072b4:	4b1e      	ldr	r3, [pc, #120]	; (8007330 <HAL_RCC_OscConfig+0x628>)
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f003 0203 	and.w	r2, r3, #3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d12c      	bne.n	8007322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	3b01      	subs	r3, #1
 80072d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d123      	bne.n	8007322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d11b      	bne.n	8007322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d113      	bne.n	8007322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	3b01      	subs	r3, #1
 8007308:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800730a:	429a      	cmp	r2, r3
 800730c:	d109      	bne.n	8007322 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	3b01      	subs	r3, #1
 800731c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800731e:	429a      	cmp	r2, r3
 8007320:	d001      	beq.n	8007326 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3720      	adds	r7, #32
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40021000 	.word	0x40021000
 8007334:	019f800c 	.word	0x019f800c

08007338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e11e      	b.n	800758e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007350:	4b91      	ldr	r3, [pc, #580]	; (8007598 <HAL_RCC_ClockConfig+0x260>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d910      	bls.n	8007380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735e:	4b8e      	ldr	r3, [pc, #568]	; (8007598 <HAL_RCC_ClockConfig+0x260>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f023 020f 	bic.w	r2, r3, #15
 8007366:	498c      	ldr	r1, [pc, #560]	; (8007598 <HAL_RCC_ClockConfig+0x260>)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	4313      	orrs	r3, r2
 800736c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800736e:	4b8a      	ldr	r3, [pc, #552]	; (8007598 <HAL_RCC_ClockConfig+0x260>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d001      	beq.n	8007380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e106      	b.n	800758e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d073      	beq.n	8007474 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b03      	cmp	r3, #3
 8007392:	d129      	bne.n	80073e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007394:	4b81      	ldr	r3, [pc, #516]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e0f4      	b.n	800758e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80073a4:	f000 f99e 	bl	80076e4 <RCC_GetSysClockFreqFromPLLSource>
 80073a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	4a7c      	ldr	r2, [pc, #496]	; (80075a0 <HAL_RCC_ClockConfig+0x268>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d93f      	bls.n	8007432 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073b2:	4b7a      	ldr	r3, [pc, #488]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d033      	beq.n	8007432 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d12f      	bne.n	8007432 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073d2:	4b72      	ldr	r3, [pc, #456]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073da:	4a70      	ldr	r2, [pc, #448]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80073dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073e2:	2380      	movs	r3, #128	; 0x80
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	e024      	b.n	8007432 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d107      	bne.n	8007400 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073f0:	4b6a      	ldr	r3, [pc, #424]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0c6      	b.n	800758e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007400:	4b66      	ldr	r3, [pc, #408]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e0be      	b.n	800758e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007410:	f000 f8ce 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 8007414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4a61      	ldr	r2, [pc, #388]	; (80075a0 <HAL_RCC_ClockConfig+0x268>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d909      	bls.n	8007432 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800741e:	4b5f      	ldr	r3, [pc, #380]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007426:	4a5d      	ldr	r2, [pc, #372]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800742e:	2380      	movs	r3, #128	; 0x80
 8007430:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007432:	4b5a      	ldr	r3, [pc, #360]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f023 0203 	bic.w	r2, r3, #3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	4957      	ldr	r1, [pc, #348]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007440:	4313      	orrs	r3, r2
 8007442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007444:	f7fd fc84 	bl	8004d50 <HAL_GetTick>
 8007448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744a:	e00a      	b.n	8007462 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744c:	f7fd fc80 	bl	8004d50 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f241 3288 	movw	r2, #5000	; 0x1388
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e095      	b.n	800758e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007462:	4b4e      	ldr	r3, [pc, #312]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 020c 	and.w	r2, r3, #12
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	429a      	cmp	r2, r3
 8007472:	d1eb      	bne.n	800744c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d023      	beq.n	80074c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800748c:	4b43      	ldr	r3, [pc, #268]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4a42      	ldr	r2, [pc, #264]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007496:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80074a4:	4b3d      	ldr	r3, [pc, #244]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80074ac:	4a3b      	ldr	r2, [pc, #236]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80074ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80074b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074b4:	4b39      	ldr	r3, [pc, #228]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	4936      	ldr	r1, [pc, #216]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	608b      	str	r3, [r1, #8]
 80074c6:	e008      	b.n	80074da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d105      	bne.n	80074da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80074ce:	4b33      	ldr	r3, [pc, #204]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4a32      	ldr	r2, [pc, #200]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 80074d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074da:	4b2f      	ldr	r3, [pc, #188]	; (8007598 <HAL_RCC_ClockConfig+0x260>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d21d      	bcs.n	8007524 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e8:	4b2b      	ldr	r3, [pc, #172]	; (8007598 <HAL_RCC_ClockConfig+0x260>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f023 020f 	bic.w	r2, r3, #15
 80074f0:	4929      	ldr	r1, [pc, #164]	; (8007598 <HAL_RCC_ClockConfig+0x260>)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80074f8:	f7fd fc2a 	bl	8004d50 <HAL_GetTick>
 80074fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007500:	f7fd fc26 	bl	8004d50 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f241 3288 	movw	r2, #5000	; 0x1388
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e03b      	b.n	800758e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007516:	4b20      	ldr	r3, [pc, #128]	; (8007598 <HAL_RCC_ClockConfig+0x260>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 030f 	and.w	r3, r3, #15
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d1ed      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d008      	beq.n	8007542 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007530:	4b1a      	ldr	r3, [pc, #104]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4917      	ldr	r1, [pc, #92]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 800753e:	4313      	orrs	r3, r2
 8007540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0308 	and.w	r3, r3, #8
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800754e:	4b13      	ldr	r3, [pc, #76]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	490f      	ldr	r1, [pc, #60]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007562:	f000 f825 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 8007566:	4602      	mov	r2, r0
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <HAL_RCC_ClockConfig+0x264>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	091b      	lsrs	r3, r3, #4
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	490c      	ldr	r1, [pc, #48]	; (80075a4 <HAL_RCC_ClockConfig+0x26c>)
 8007574:	5ccb      	ldrb	r3, [r1, r3]
 8007576:	f003 031f 	and.w	r3, r3, #31
 800757a:	fa22 f303 	lsr.w	r3, r2, r3
 800757e:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <HAL_RCC_ClockConfig+0x270>)
 8007580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <HAL_RCC_ClockConfig+0x274>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f7fd fb96 	bl	8004cb8 <HAL_InitTick>
 800758c:	4603      	mov	r3, r0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40022000 	.word	0x40022000
 800759c:	40021000 	.word	0x40021000
 80075a0:	04c4b400 	.word	0x04c4b400
 80075a4:	08009804 	.word	0x08009804
 80075a8:	20000078 	.word	0x20000078
 80075ac:	2000007c 	.word	0x2000007c

080075b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80075b6:	4b2c      	ldr	r3, [pc, #176]	; (8007668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 030c 	and.w	r3, r3, #12
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d102      	bne.n	80075c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075c2:	4b2a      	ldr	r3, [pc, #168]	; (800766c <HAL_RCC_GetSysClockFreq+0xbc>)
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	e047      	b.n	8007658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80075c8:	4b27      	ldr	r3, [pc, #156]	; (8007668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 030c 	and.w	r3, r3, #12
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d102      	bne.n	80075da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075d4:	4b26      	ldr	r3, [pc, #152]	; (8007670 <HAL_RCC_GetSysClockFreq+0xc0>)
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	e03e      	b.n	8007658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80075da:	4b23      	ldr	r3, [pc, #140]	; (8007668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 030c 	and.w	r3, r3, #12
 80075e2:	2b0c      	cmp	r3, #12
 80075e4:	d136      	bne.n	8007654 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075f0:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	091b      	lsrs	r3, r3, #4
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	3301      	adds	r3, #1
 80075fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b03      	cmp	r3, #3
 8007602:	d10c      	bne.n	800761e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007604:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	fbb2 f3f3 	udiv	r3, r2, r3
 800760c:	4a16      	ldr	r2, [pc, #88]	; (8007668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800760e:	68d2      	ldr	r2, [r2, #12]
 8007610:	0a12      	lsrs	r2, r2, #8
 8007612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007616:	fb02 f303 	mul.w	r3, r2, r3
 800761a:	617b      	str	r3, [r7, #20]
      break;
 800761c:	e00c      	b.n	8007638 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800761e:	4a13      	ldr	r2, [pc, #76]	; (800766c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	fbb2 f3f3 	udiv	r3, r2, r3
 8007626:	4a10      	ldr	r2, [pc, #64]	; (8007668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007628:	68d2      	ldr	r2, [r2, #12]
 800762a:	0a12      	lsrs	r2, r2, #8
 800762c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007630:	fb02 f303 	mul.w	r3, r2, r3
 8007634:	617b      	str	r3, [r7, #20]
      break;
 8007636:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	0e5b      	lsrs	r3, r3, #25
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	3301      	adds	r3, #1
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007650:	613b      	str	r3, [r7, #16]
 8007652:	e001      	b.n	8007658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007658:	693b      	ldr	r3, [r7, #16]
}
 800765a:	4618      	mov	r0, r3
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40021000 	.word	0x40021000
 800766c:	00f42400 	.word	0x00f42400
 8007670:	016e3600 	.word	0x016e3600

08007674 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007678:	4b03      	ldr	r3, [pc, #12]	; (8007688 <HAL_RCC_GetHCLKFreq+0x14>)
 800767a:	681b      	ldr	r3, [r3, #0]
}
 800767c:	4618      	mov	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000078 	.word	0x20000078

0800768c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007690:	f7ff fff0 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	4904      	ldr	r1, [pc, #16]	; (80076b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40021000 	.word	0x40021000
 80076b4:	08009814 	.word	0x08009814

080076b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076bc:	f7ff ffda 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 80076c0:	4602      	mov	r2, r0
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	0adb      	lsrs	r3, r3, #11
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	4904      	ldr	r1, [pc, #16]	; (80076e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076ce:	5ccb      	ldrb	r3, [r1, r3]
 80076d0:	f003 031f 	and.w	r3, r3, #31
 80076d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d8:	4618      	mov	r0, r3
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40021000 	.word	0x40021000
 80076e0:	08009814 	.word	0x08009814

080076e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076ea:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076f4:	4b1b      	ldr	r3, [pc, #108]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	091b      	lsrs	r3, r3, #4
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b03      	cmp	r3, #3
 8007706:	d10c      	bne.n	8007722 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007708:	4a17      	ldr	r2, [pc, #92]	; (8007768 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007710:	4a14      	ldr	r2, [pc, #80]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007712:	68d2      	ldr	r2, [r2, #12]
 8007714:	0a12      	lsrs	r2, r2, #8
 8007716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	617b      	str	r3, [r7, #20]
    break;
 8007720:	e00c      	b.n	800773c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007722:	4a12      	ldr	r2, [pc, #72]	; (800776c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	4a0e      	ldr	r2, [pc, #56]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800772c:	68d2      	ldr	r2, [r2, #12]
 800772e:	0a12      	lsrs	r2, r2, #8
 8007730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007734:	fb02 f303 	mul.w	r3, r2, r3
 8007738:	617b      	str	r3, [r7, #20]
    break;
 800773a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	0e5b      	lsrs	r3, r3, #25
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	3301      	adds	r3, #1
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	fbb2 f3f3 	udiv	r3, r2, r3
 8007754:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007756:	687b      	ldr	r3, [r7, #4]
}
 8007758:	4618      	mov	r0, r3
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	40021000 	.word	0x40021000
 8007768:	016e3600 	.word	0x016e3600
 800776c:	00f42400 	.word	0x00f42400

08007770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007778:	2300      	movs	r3, #0
 800777a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800777c:	2300      	movs	r3, #0
 800777e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 8098 	beq.w	80078be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800778e:	2300      	movs	r3, #0
 8007790:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007792:	4b43      	ldr	r3, [pc, #268]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10d      	bne.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800779e:	4b40      	ldr	r3, [pc, #256]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a2:	4a3f      	ldr	r2, [pc, #252]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a8:	6593      	str	r3, [r2, #88]	; 0x58
 80077aa:	4b3d      	ldr	r3, [pc, #244]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b2:	60bb      	str	r3, [r7, #8]
 80077b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077b6:	2301      	movs	r3, #1
 80077b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077ba:	4b3a      	ldr	r3, [pc, #232]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a39      	ldr	r2, [pc, #228]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077c6:	f7fd fac3 	bl	8004d50 <HAL_GetTick>
 80077ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077cc:	e009      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ce:	f7fd fabf 	bl	8004d50 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d902      	bls.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	74fb      	strb	r3, [r7, #19]
        break;
 80077e0:	e005      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077e2:	4b30      	ldr	r3, [pc, #192]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0ef      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80077ee:	7cfb      	ldrb	r3, [r7, #19]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d159      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077f4:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d01e      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	429a      	cmp	r2, r3
 800780e:	d019      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007810:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800781c:	4b20      	ldr	r3, [pc, #128]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007822:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800782c:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007832:	4a1b      	ldr	r2, [pc, #108]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800783c:	4a18      	ldr	r2, [pc, #96]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d016      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784e:	f7fd fa7f 	bl	8004d50 <HAL_GetTick>
 8007852:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007854:	e00b      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007856:	f7fd fa7b 	bl	8004d50 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	f241 3288 	movw	r2, #5000	; 0x1388
 8007864:	4293      	cmp	r3, r2
 8007866:	d902      	bls.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	74fb      	strb	r3, [r7, #19]
            break;
 800786c:	e006      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0ec      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800787c:	7cfb      	ldrb	r3, [r7, #19]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10b      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	4903      	ldr	r1, [pc, #12]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007892:	4313      	orrs	r3, r2
 8007894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007898:	e008      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800789a:	7cfb      	ldrb	r3, [r7, #19]
 800789c:	74bb      	strb	r3, [r7, #18]
 800789e:	e005      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80078a0:	40021000 	.word	0x40021000
 80078a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	7cfb      	ldrb	r3, [r7, #19]
 80078aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ac:	7c7b      	ldrb	r3, [r7, #17]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d105      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078b2:	4ba6      	ldr	r3, [pc, #664]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b6:	4aa5      	ldr	r2, [pc, #660]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078ca:	4ba0      	ldr	r3, [pc, #640]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d0:	f023 0203 	bic.w	r2, r3, #3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	499c      	ldr	r1, [pc, #624]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078ec:	4b97      	ldr	r3, [pc, #604]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f2:	f023 020c 	bic.w	r2, r3, #12
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	4994      	ldr	r1, [pc, #592]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800790e:	4b8f      	ldr	r3, [pc, #572]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007914:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	498b      	ldr	r1, [pc, #556]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800791e:	4313      	orrs	r3, r2
 8007920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007930:	4b86      	ldr	r3, [pc, #536]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007936:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	4983      	ldr	r1, [pc, #524]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007940:	4313      	orrs	r3, r2
 8007942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007952:	4b7e      	ldr	r3, [pc, #504]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007958:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	497a      	ldr	r1, [pc, #488]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007974:	4b75      	ldr	r3, [pc, #468]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	4972      	ldr	r1, [pc, #456]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007984:	4313      	orrs	r3, r2
 8007986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007996:	4b6d      	ldr	r3, [pc, #436]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	4969      	ldr	r1, [pc, #420]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079b8:	4b64      	ldr	r3, [pc, #400]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	4961      	ldr	r1, [pc, #388]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079da:	4b5c      	ldr	r3, [pc, #368]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	4958      	ldr	r1, [pc, #352]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d015      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079fc:	4b53      	ldr	r3, [pc, #332]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	4950      	ldr	r1, [pc, #320]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a1a:	d105      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a1c:	4b4b      	ldr	r3, [pc, #300]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	4a4a      	ldr	r2, [pc, #296]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d015      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a34:	4b45      	ldr	r3, [pc, #276]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	4942      	ldr	r1, [pc, #264]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a52:	d105      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a54:	4b3d      	ldr	r3, [pc, #244]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	4a3c      	ldr	r2, [pc, #240]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d015      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a6c:	4b37      	ldr	r3, [pc, #220]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	4934      	ldr	r1, [pc, #208]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a8a:	d105      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a8c:	4b2f      	ldr	r3, [pc, #188]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a2e      	ldr	r2, [pc, #184]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d015      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007aa4:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	4926      	ldr	r1, [pc, #152]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac2:	d105      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ac4:	4b21      	ldr	r3, [pc, #132]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	4a20      	ldr	r2, [pc, #128]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ace:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d015      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007adc:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	4918      	ldr	r1, [pc, #96]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007afa:	d105      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007afc:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d015      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	490a      	ldr	r1, [pc, #40]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b32:	d105      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	4a04      	ldr	r2, [pc, #16]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007b40:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40021000 	.word	0x40021000

08007b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e09d      	b.n	8007c9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d108      	bne.n	8007b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b72:	d009      	beq.n	8007b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	61da      	str	r2, [r3, #28]
 8007b7a:	e005      	b.n	8007b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fc fd76 	bl	8004694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bc8:	d902      	bls.n	8007bd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	e002      	b.n	8007bd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bde:	d007      	beq.n	8007bf0 <HAL_SPI_Init+0xa0>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007be8:	d002      	beq.n	8007bf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	ea42 0103 	orr.w	r1, r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	0c1b      	lsrs	r3, r3, #16
 8007c4c:	f003 0204 	and.w	r2, r3, #4
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c6c:	ea42 0103 	orr.w	r1, r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e049      	b.n	8007d4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d106      	bne.n	8007cd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7fc fd91 	bl	80047f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f000 faa1 	bl	800822c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e049      	b.n	8007dfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fc fccc 	bl	8004718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4619      	mov	r1, r3
 8007d92:	4610      	mov	r0, r2
 8007d94:	f000 fa4a 	bl	800822c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <HAL_TIM_PWM_Start+0x24>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	bf14      	ite	ne
 8007e20:	2301      	movne	r3, #1
 8007e22:	2300      	moveq	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	e03c      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x9e>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d109      	bne.n	8007e42 <HAL_TIM_PWM_Start+0x3e>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	bf14      	ite	ne
 8007e3a:	2301      	movne	r3, #1
 8007e3c:	2300      	moveq	r3, #0
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	e02f      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x9e>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d109      	bne.n	8007e5c <HAL_TIM_PWM_Start+0x58>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	bf14      	ite	ne
 8007e54:	2301      	movne	r3, #1
 8007e56:	2300      	moveq	r3, #0
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	e022      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x9e>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b0c      	cmp	r3, #12
 8007e60:	d109      	bne.n	8007e76 <HAL_TIM_PWM_Start+0x72>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	bf14      	ite	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	2300      	moveq	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	e015      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x9e>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d109      	bne.n	8007e90 <HAL_TIM_PWM_Start+0x8c>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	bf14      	ite	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	e008      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x9e>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	bf14      	ite	ne
 8007e9c:	2301      	movne	r3, #1
 8007e9e:	2300      	moveq	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e097      	b.n	8007fda <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <HAL_TIM_PWM_Start+0xb6>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eb8:	e023      	b.n	8007f02 <HAL_TIM_PWM_Start+0xfe>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d104      	bne.n	8007eca <HAL_TIM_PWM_Start+0xc6>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ec8:	e01b      	b.n	8007f02 <HAL_TIM_PWM_Start+0xfe>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d104      	bne.n	8007eda <HAL_TIM_PWM_Start+0xd6>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ed8:	e013      	b.n	8007f02 <HAL_TIM_PWM_Start+0xfe>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b0c      	cmp	r3, #12
 8007ede:	d104      	bne.n	8007eea <HAL_TIM_PWM_Start+0xe6>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ee8:	e00b      	b.n	8007f02 <HAL_TIM_PWM_Start+0xfe>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b10      	cmp	r3, #16
 8007eee:	d104      	bne.n	8007efa <HAL_TIM_PWM_Start+0xf6>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef8:	e003      	b.n	8007f02 <HAL_TIM_PWM_Start+0xfe>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2201      	movs	r2, #1
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fd14 	bl	8008938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a33      	ldr	r2, [pc, #204]	; (8007fe4 <HAL_TIM_PWM_Start+0x1e0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d013      	beq.n	8007f42 <HAL_TIM_PWM_Start+0x13e>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a32      	ldr	r2, [pc, #200]	; (8007fe8 <HAL_TIM_PWM_Start+0x1e4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00e      	beq.n	8007f42 <HAL_TIM_PWM_Start+0x13e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a30      	ldr	r2, [pc, #192]	; (8007fec <HAL_TIM_PWM_Start+0x1e8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d009      	beq.n	8007f42 <HAL_TIM_PWM_Start+0x13e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a2f      	ldr	r2, [pc, #188]	; (8007ff0 <HAL_TIM_PWM_Start+0x1ec>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d004      	beq.n	8007f42 <HAL_TIM_PWM_Start+0x13e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a2d      	ldr	r2, [pc, #180]	; (8007ff4 <HAL_TIM_PWM_Start+0x1f0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d101      	bne.n	8007f46 <HAL_TIM_PWM_Start+0x142>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <HAL_TIM_PWM_Start+0x144>
 8007f46:	2300      	movs	r3, #0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d007      	beq.n	8007f5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a20      	ldr	r2, [pc, #128]	; (8007fe4 <HAL_TIM_PWM_Start+0x1e0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d018      	beq.n	8007f98 <HAL_TIM_PWM_Start+0x194>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6e:	d013      	beq.n	8007f98 <HAL_TIM_PWM_Start+0x194>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a20      	ldr	r2, [pc, #128]	; (8007ff8 <HAL_TIM_PWM_Start+0x1f4>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00e      	beq.n	8007f98 <HAL_TIM_PWM_Start+0x194>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <HAL_TIM_PWM_Start+0x1f8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_TIM_PWM_Start+0x194>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a17      	ldr	r2, [pc, #92]	; (8007fe8 <HAL_TIM_PWM_Start+0x1e4>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIM_PWM_Start+0x194>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a16      	ldr	r2, [pc, #88]	; (8007fec <HAL_TIM_PWM_Start+0x1e8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d115      	bne.n	8007fc4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	4b18      	ldr	r3, [pc, #96]	; (8008000 <HAL_TIM_PWM_Start+0x1fc>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b06      	cmp	r3, #6
 8007fa8:	d015      	beq.n	8007fd6 <HAL_TIM_PWM_Start+0x1d2>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb0:	d011      	beq.n	8007fd6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0201 	orr.w	r2, r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc2:	e008      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e000      	b.n	8007fd8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40012c00 	.word	0x40012c00
 8007fe8:	40013400 	.word	0x40013400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40000800 	.word	0x40000800
 8008000:	00010007 	.word	0x00010007

08008004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800801e:	2302      	movs	r3, #2
 8008020:	e0ff      	b.n	8008222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b14      	cmp	r3, #20
 800802e:	f200 80f0 	bhi.w	8008212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	0800808d 	.word	0x0800808d
 800803c:	08008213 	.word	0x08008213
 8008040:	08008213 	.word	0x08008213
 8008044:	08008213 	.word	0x08008213
 8008048:	080080cd 	.word	0x080080cd
 800804c:	08008213 	.word	0x08008213
 8008050:	08008213 	.word	0x08008213
 8008054:	08008213 	.word	0x08008213
 8008058:	0800810f 	.word	0x0800810f
 800805c:	08008213 	.word	0x08008213
 8008060:	08008213 	.word	0x08008213
 8008064:	08008213 	.word	0x08008213
 8008068:	0800814f 	.word	0x0800814f
 800806c:	08008213 	.word	0x08008213
 8008070:	08008213 	.word	0x08008213
 8008074:	08008213 	.word	0x08008213
 8008078:	08008191 	.word	0x08008191
 800807c:	08008213 	.word	0x08008213
 8008080:	08008213 	.word	0x08008213
 8008084:	08008213 	.word	0x08008213
 8008088:	080081d1 	.word	0x080081d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f95a 	bl	800834c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0208 	orr.w	r2, r2, #8
 80080a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0204 	bic.w	r2, r2, #4
 80080b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6999      	ldr	r1, [r3, #24]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	619a      	str	r2, [r3, #24]
      break;
 80080ca:	e0a5      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 f9ca 	bl	800846c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699a      	ldr	r2, [r3, #24]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6999      	ldr	r1, [r3, #24]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	021a      	lsls	r2, r3, #8
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	619a      	str	r2, [r3, #24]
      break;
 800810c:	e084      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fa33 	bl	8008580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0208 	orr.w	r2, r2, #8
 8008128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69da      	ldr	r2, [r3, #28]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0204 	bic.w	r2, r2, #4
 8008138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69d9      	ldr	r1, [r3, #28]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	61da      	str	r2, [r3, #28]
      break;
 800814c:	e064      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fa9b 	bl	8008690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69da      	ldr	r2, [r3, #28]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69d9      	ldr	r1, [r3, #28]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	021a      	lsls	r2, r3, #8
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	61da      	str	r2, [r3, #28]
      break;
 800818e:	e043      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fb04 	bl	80087a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0208 	orr.w	r2, r2, #8
 80081aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0204 	bic.w	r2, r2, #4
 80081ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80081ce:	e023      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fb48 	bl	800886c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	021a      	lsls	r2, r3, #8
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008210:	e002      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	75fb      	strb	r3, [r7, #23]
      break;
 8008216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop

0800822c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a3c      	ldr	r2, [pc, #240]	; (8008330 <TIM_Base_SetConfig+0x104>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d00f      	beq.n	8008264 <TIM_Base_SetConfig+0x38>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800824a:	d00b      	beq.n	8008264 <TIM_Base_SetConfig+0x38>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a39      	ldr	r2, [pc, #228]	; (8008334 <TIM_Base_SetConfig+0x108>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d007      	beq.n	8008264 <TIM_Base_SetConfig+0x38>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a38      	ldr	r2, [pc, #224]	; (8008338 <TIM_Base_SetConfig+0x10c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_Base_SetConfig+0x38>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a37      	ldr	r2, [pc, #220]	; (800833c <TIM_Base_SetConfig+0x110>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d108      	bne.n	8008276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a2d      	ldr	r2, [pc, #180]	; (8008330 <TIM_Base_SetConfig+0x104>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d01b      	beq.n	80082b6 <TIM_Base_SetConfig+0x8a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008284:	d017      	beq.n	80082b6 <TIM_Base_SetConfig+0x8a>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a2a      	ldr	r2, [pc, #168]	; (8008334 <TIM_Base_SetConfig+0x108>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <TIM_Base_SetConfig+0x8a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a29      	ldr	r2, [pc, #164]	; (8008338 <TIM_Base_SetConfig+0x10c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00f      	beq.n	80082b6 <TIM_Base_SetConfig+0x8a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a28      	ldr	r2, [pc, #160]	; (800833c <TIM_Base_SetConfig+0x110>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d00b      	beq.n	80082b6 <TIM_Base_SetConfig+0x8a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a27      	ldr	r2, [pc, #156]	; (8008340 <TIM_Base_SetConfig+0x114>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d007      	beq.n	80082b6 <TIM_Base_SetConfig+0x8a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a26      	ldr	r2, [pc, #152]	; (8008344 <TIM_Base_SetConfig+0x118>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_Base_SetConfig+0x8a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a25      	ldr	r2, [pc, #148]	; (8008348 <TIM_Base_SetConfig+0x11c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d108      	bne.n	80082c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a10      	ldr	r2, [pc, #64]	; (8008330 <TIM_Base_SetConfig+0x104>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00f      	beq.n	8008314 <TIM_Base_SetConfig+0xe8>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a11      	ldr	r2, [pc, #68]	; (800833c <TIM_Base_SetConfig+0x110>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00b      	beq.n	8008314 <TIM_Base_SetConfig+0xe8>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a10      	ldr	r2, [pc, #64]	; (8008340 <TIM_Base_SetConfig+0x114>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_Base_SetConfig+0xe8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a0f      	ldr	r2, [pc, #60]	; (8008344 <TIM_Base_SetConfig+0x118>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0xe8>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a0e      	ldr	r2, [pc, #56]	; (8008348 <TIM_Base_SetConfig+0x11c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d103      	bne.n	800831c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	615a      	str	r2, [r3, #20]
}
 8008322:	bf00      	nop
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40012c00 	.word	0x40012c00
 8008334:	40000400 	.word	0x40000400
 8008338:	40000800 	.word	0x40000800
 800833c:	40013400 	.word	0x40013400
 8008340:	40014000 	.word	0x40014000
 8008344:	40014400 	.word	0x40014400
 8008348:	40014800 	.word	0x40014800

0800834c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f023 0201 	bic.w	r2, r3, #1
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f023 0302 	bic.w	r3, r3, #2
 8008398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a2c      	ldr	r2, [pc, #176]	; (8008458 <TIM_OC1_SetConfig+0x10c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00f      	beq.n	80083cc <TIM_OC1_SetConfig+0x80>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a2b      	ldr	r2, [pc, #172]	; (800845c <TIM_OC1_SetConfig+0x110>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00b      	beq.n	80083cc <TIM_OC1_SetConfig+0x80>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a2a      	ldr	r2, [pc, #168]	; (8008460 <TIM_OC1_SetConfig+0x114>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d007      	beq.n	80083cc <TIM_OC1_SetConfig+0x80>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a29      	ldr	r2, [pc, #164]	; (8008464 <TIM_OC1_SetConfig+0x118>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_OC1_SetConfig+0x80>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a28      	ldr	r2, [pc, #160]	; (8008468 <TIM_OC1_SetConfig+0x11c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d10c      	bne.n	80083e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f023 0308 	bic.w	r3, r3, #8
 80083d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f023 0304 	bic.w	r3, r3, #4
 80083e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a1b      	ldr	r2, [pc, #108]	; (8008458 <TIM_OC1_SetConfig+0x10c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00f      	beq.n	800840e <TIM_OC1_SetConfig+0xc2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a1a      	ldr	r2, [pc, #104]	; (800845c <TIM_OC1_SetConfig+0x110>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00b      	beq.n	800840e <TIM_OC1_SetConfig+0xc2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a19      	ldr	r2, [pc, #100]	; (8008460 <TIM_OC1_SetConfig+0x114>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d007      	beq.n	800840e <TIM_OC1_SetConfig+0xc2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a18      	ldr	r2, [pc, #96]	; (8008464 <TIM_OC1_SetConfig+0x118>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d003      	beq.n	800840e <TIM_OC1_SetConfig+0xc2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a17      	ldr	r2, [pc, #92]	; (8008468 <TIM_OC1_SetConfig+0x11c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d111      	bne.n	8008432 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800841c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	621a      	str	r2, [r3, #32]
}
 800844c:	bf00      	nop
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	40012c00 	.word	0x40012c00
 800845c:	40013400 	.word	0x40013400
 8008460:	40014000 	.word	0x40014000
 8008464:	40014400 	.word	0x40014400
 8008468:	40014800 	.word	0x40014800

0800846c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f023 0210 	bic.w	r2, r3, #16
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800849a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	021b      	lsls	r3, r3, #8
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f023 0320 	bic.w	r3, r3, #32
 80084ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a28      	ldr	r2, [pc, #160]	; (800856c <TIM_OC2_SetConfig+0x100>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d003      	beq.n	80084d8 <TIM_OC2_SetConfig+0x6c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a27      	ldr	r2, [pc, #156]	; (8008570 <TIM_OC2_SetConfig+0x104>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d10d      	bne.n	80084f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a1d      	ldr	r2, [pc, #116]	; (800856c <TIM_OC2_SetConfig+0x100>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d00f      	beq.n	800851c <TIM_OC2_SetConfig+0xb0>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a1c      	ldr	r2, [pc, #112]	; (8008570 <TIM_OC2_SetConfig+0x104>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d00b      	beq.n	800851c <TIM_OC2_SetConfig+0xb0>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a1b      	ldr	r2, [pc, #108]	; (8008574 <TIM_OC2_SetConfig+0x108>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d007      	beq.n	800851c <TIM_OC2_SetConfig+0xb0>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a1a      	ldr	r2, [pc, #104]	; (8008578 <TIM_OC2_SetConfig+0x10c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d003      	beq.n	800851c <TIM_OC2_SetConfig+0xb0>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a19      	ldr	r2, [pc, #100]	; (800857c <TIM_OC2_SetConfig+0x110>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d113      	bne.n	8008544 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800852a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	621a      	str	r2, [r3, #32]
}
 800855e:	bf00      	nop
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	40012c00 	.word	0x40012c00
 8008570:	40013400 	.word	0x40013400
 8008574:	40014000 	.word	0x40014000
 8008578:	40014400 	.word	0x40014400
 800857c:	40014800 	.word	0x40014800

08008580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0303 	bic.w	r3, r3, #3
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a27      	ldr	r2, [pc, #156]	; (800867c <TIM_OC3_SetConfig+0xfc>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d003      	beq.n	80085ea <TIM_OC3_SetConfig+0x6a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a26      	ldr	r2, [pc, #152]	; (8008680 <TIM_OC3_SetConfig+0x100>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d10d      	bne.n	8008606 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	021b      	lsls	r3, r3, #8
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a1c      	ldr	r2, [pc, #112]	; (800867c <TIM_OC3_SetConfig+0xfc>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00f      	beq.n	800862e <TIM_OC3_SetConfig+0xae>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <TIM_OC3_SetConfig+0x100>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00b      	beq.n	800862e <TIM_OC3_SetConfig+0xae>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a1a      	ldr	r2, [pc, #104]	; (8008684 <TIM_OC3_SetConfig+0x104>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d007      	beq.n	800862e <TIM_OC3_SetConfig+0xae>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a19      	ldr	r2, [pc, #100]	; (8008688 <TIM_OC3_SetConfig+0x108>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d003      	beq.n	800862e <TIM_OC3_SetConfig+0xae>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a18      	ldr	r2, [pc, #96]	; (800868c <TIM_OC3_SetConfig+0x10c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d113      	bne.n	8008656 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800863c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	4313      	orrs	r3, r2
 8008654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	621a      	str	r2, [r3, #32]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	40012c00 	.word	0x40012c00
 8008680:	40013400 	.word	0x40013400
 8008684:	40014000 	.word	0x40014000
 8008688:	40014400 	.word	0x40014400
 800868c:	40014800 	.word	0x40014800

08008690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	031b      	lsls	r3, r3, #12
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a28      	ldr	r2, [pc, #160]	; (8008790 <TIM_OC4_SetConfig+0x100>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d003      	beq.n	80086fc <TIM_OC4_SetConfig+0x6c>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a27      	ldr	r2, [pc, #156]	; (8008794 <TIM_OC4_SetConfig+0x104>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d10d      	bne.n	8008718 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	031b      	lsls	r3, r3, #12
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008716:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a1d      	ldr	r2, [pc, #116]	; (8008790 <TIM_OC4_SetConfig+0x100>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d00f      	beq.n	8008740 <TIM_OC4_SetConfig+0xb0>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a1c      	ldr	r2, [pc, #112]	; (8008794 <TIM_OC4_SetConfig+0x104>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00b      	beq.n	8008740 <TIM_OC4_SetConfig+0xb0>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a1b      	ldr	r2, [pc, #108]	; (8008798 <TIM_OC4_SetConfig+0x108>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d007      	beq.n	8008740 <TIM_OC4_SetConfig+0xb0>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a1a      	ldr	r2, [pc, #104]	; (800879c <TIM_OC4_SetConfig+0x10c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d003      	beq.n	8008740 <TIM_OC4_SetConfig+0xb0>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a19      	ldr	r2, [pc, #100]	; (80087a0 <TIM_OC4_SetConfig+0x110>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d113      	bne.n	8008768 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008746:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800874e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	019b      	lsls	r3, r3, #6
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	019b      	lsls	r3, r3, #6
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40012c00 	.word	0x40012c00
 8008794:	40013400 	.word	0x40013400
 8008798:	40014000 	.word	0x40014000
 800879c:	40014400 	.word	0x40014400
 80087a0:	40014800 	.word	0x40014800

080087a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	041b      	lsls	r3, r3, #16
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a17      	ldr	r2, [pc, #92]	; (8008858 <TIM_OC5_SetConfig+0xb4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00f      	beq.n	800881e <TIM_OC5_SetConfig+0x7a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a16      	ldr	r2, [pc, #88]	; (800885c <TIM_OC5_SetConfig+0xb8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d00b      	beq.n	800881e <TIM_OC5_SetConfig+0x7a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a15      	ldr	r2, [pc, #84]	; (8008860 <TIM_OC5_SetConfig+0xbc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d007      	beq.n	800881e <TIM_OC5_SetConfig+0x7a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a14      	ldr	r2, [pc, #80]	; (8008864 <TIM_OC5_SetConfig+0xc0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d003      	beq.n	800881e <TIM_OC5_SetConfig+0x7a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a13      	ldr	r2, [pc, #76]	; (8008868 <TIM_OC5_SetConfig+0xc4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d109      	bne.n	8008832 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008824:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	021b      	lsls	r3, r3, #8
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	621a      	str	r2, [r3, #32]
}
 800884c:	bf00      	nop
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	40012c00 	.word	0x40012c00
 800885c:	40013400 	.word	0x40013400
 8008860:	40014000 	.word	0x40014000
 8008864:	40014400 	.word	0x40014400
 8008868:	40014800 	.word	0x40014800

0800886c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	021b      	lsls	r3, r3, #8
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	051b      	lsls	r3, r3, #20
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	4313      	orrs	r3, r2
 80088be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a18      	ldr	r2, [pc, #96]	; (8008924 <TIM_OC6_SetConfig+0xb8>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00f      	beq.n	80088e8 <TIM_OC6_SetConfig+0x7c>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <TIM_OC6_SetConfig+0xbc>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00b      	beq.n	80088e8 <TIM_OC6_SetConfig+0x7c>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a16      	ldr	r2, [pc, #88]	; (800892c <TIM_OC6_SetConfig+0xc0>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d007      	beq.n	80088e8 <TIM_OC6_SetConfig+0x7c>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a15      	ldr	r2, [pc, #84]	; (8008930 <TIM_OC6_SetConfig+0xc4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d003      	beq.n	80088e8 <TIM_OC6_SetConfig+0x7c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a14      	ldr	r2, [pc, #80]	; (8008934 <TIM_OC6_SetConfig+0xc8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d109      	bne.n	80088fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	029b      	lsls	r3, r3, #10
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40012c00 	.word	0x40012c00
 8008928:	40013400 	.word	0x40013400
 800892c:	40014000 	.word	0x40014000
 8008930:	40014400 	.word	0x40014400
 8008934:	40014800 	.word	0x40014800

08008938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	2201      	movs	r2, #1
 800894c:	fa02 f303 	lsl.w	r3, r2, r3
 8008950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6a1a      	ldr	r2, [r3, #32]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	43db      	mvns	r3, r3
 800895a:	401a      	ands	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a1a      	ldr	r2, [r3, #32]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f003 031f 	and.w	r3, r3, #31
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	fa01 f303 	lsl.w	r3, r1, r3
 8008970:	431a      	orrs	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
	...

08008984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008994:	2b01      	cmp	r3, #1
 8008996:	d101      	bne.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008998:	2302      	movs	r3, #2
 800899a:	e065      	b.n	8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2c      	ldr	r2, [pc, #176]	; (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d004      	beq.n	80089d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a2b      	ldr	r2, [pc, #172]	; (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d108      	bne.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80089d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80089e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d018      	beq.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a12:	d013      	beq.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a18      	ldr	r2, [pc, #96]	; (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00e      	beq.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a17      	ldr	r2, [pc, #92]	; (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d009      	beq.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a12      	ldr	r2, [pc, #72]	; (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d004      	beq.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a13      	ldr	r2, [pc, #76]	; (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d10c      	bne.n	8008a56 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	40012c00 	.word	0x40012c00
 8008a78:	40013400 	.word	0x40013400
 8008a7c:	40000400 	.word	0x40000400
 8008a80:	40000800 	.word	0x40000800
 8008a84:	40014000 	.word	0x40014000

08008a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e087      	b.n	8008bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	041b      	lsls	r3, r3, #16
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a27      	ldr	r2, [pc, #156]	; (8008bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d004      	beq.n	8008b32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a25      	ldr	r2, [pc, #148]	; (8008bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d106      	bne.n	8008b40 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a1e      	ldr	r2, [pc, #120]	; (8008bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d004      	beq.n	8008b54 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d126      	bne.n	8008ba2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	051b      	lsls	r3, r3, #20
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a0e      	ldr	r2, [pc, #56]	; (8008bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d004      	beq.n	8008b94 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a0d      	ldr	r2, [pc, #52]	; (8008bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d106      	bne.n	8008ba2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	40012c00 	.word	0x40012c00
 8008bc4:	40013400 	.word	0x40013400

08008bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e042      	b.n	8008c60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7fb fcf9 	bl	80045e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2224      	movs	r2, #36	; 0x24
 8008bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0201 	bic.w	r2, r2, #1
 8008c08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f82c 	bl	8008c68 <UART_SetConfig>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d101      	bne.n	8008c1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e022      	b.n	8008c60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 faec 	bl	8009200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689a      	ldr	r2, [r3, #8]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0201 	orr.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fb73 	bl	8009344 <UART_CheckIdleState>
 8008c5e:	4603      	mov	r3, r0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c6c:	b08c      	sub	sp, #48	; 0x30
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	431a      	orrs	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	431a      	orrs	r2, r3
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	4bab      	ldr	r3, [pc, #684]	; (8008f44 <UART_SetConfig+0x2dc>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	6812      	ldr	r2, [r2, #0]
 8008c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4aa0      	ldr	r2, [pc, #640]	; (8008f48 <UART_SetConfig+0x2e0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d004      	beq.n	8008cd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008cde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	f023 010f 	bic.w	r1, r3, #15
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a91      	ldr	r2, [pc, #580]	; (8008f4c <UART_SetConfig+0x2e4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d125      	bne.n	8008d58 <UART_SetConfig+0xf0>
 8008d0c:	4b90      	ldr	r3, [pc, #576]	; (8008f50 <UART_SetConfig+0x2e8>)
 8008d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d81a      	bhi.n	8008d50 <UART_SetConfig+0xe8>
 8008d1a:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <UART_SetConfig+0xb8>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d31 	.word	0x08008d31
 8008d24:	08008d41 	.word	0x08008d41
 8008d28:	08008d39 	.word	0x08008d39
 8008d2c:	08008d49 	.word	0x08008d49
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d36:	e0d6      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d3e:	e0d2      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008d40:	2304      	movs	r3, #4
 8008d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d46:	e0ce      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008d48:	2308      	movs	r3, #8
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4e:	e0ca      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008d50:	2310      	movs	r3, #16
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d56:	e0c6      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a7d      	ldr	r2, [pc, #500]	; (8008f54 <UART_SetConfig+0x2ec>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d138      	bne.n	8008dd4 <UART_SetConfig+0x16c>
 8008d62:	4b7b      	ldr	r3, [pc, #492]	; (8008f50 <UART_SetConfig+0x2e8>)
 8008d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d68:	f003 030c 	and.w	r3, r3, #12
 8008d6c:	2b0c      	cmp	r3, #12
 8008d6e:	d82d      	bhi.n	8008dcc <UART_SetConfig+0x164>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <UART_SetConfig+0x110>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008dad 	.word	0x08008dad
 8008d7c:	08008dcd 	.word	0x08008dcd
 8008d80:	08008dcd 	.word	0x08008dcd
 8008d84:	08008dcd 	.word	0x08008dcd
 8008d88:	08008dbd 	.word	0x08008dbd
 8008d8c:	08008dcd 	.word	0x08008dcd
 8008d90:	08008dcd 	.word	0x08008dcd
 8008d94:	08008dcd 	.word	0x08008dcd
 8008d98:	08008db5 	.word	0x08008db5
 8008d9c:	08008dcd 	.word	0x08008dcd
 8008da0:	08008dcd 	.word	0x08008dcd
 8008da4:	08008dcd 	.word	0x08008dcd
 8008da8:	08008dc5 	.word	0x08008dc5
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db2:	e098      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008db4:	2302      	movs	r3, #2
 8008db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dba:	e094      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc2:	e090      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dca:	e08c      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008dcc:	2310      	movs	r3, #16
 8008dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dd2:	e088      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a5f      	ldr	r2, [pc, #380]	; (8008f58 <UART_SetConfig+0x2f0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d125      	bne.n	8008e2a <UART_SetConfig+0x1c2>
 8008dde:	4b5c      	ldr	r3, [pc, #368]	; (8008f50 <UART_SetConfig+0x2e8>)
 8008de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008de8:	2b30      	cmp	r3, #48	; 0x30
 8008dea:	d016      	beq.n	8008e1a <UART_SetConfig+0x1b2>
 8008dec:	2b30      	cmp	r3, #48	; 0x30
 8008dee:	d818      	bhi.n	8008e22 <UART_SetConfig+0x1ba>
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	d00a      	beq.n	8008e0a <UART_SetConfig+0x1a2>
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	d814      	bhi.n	8008e22 <UART_SetConfig+0x1ba>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <UART_SetConfig+0x19a>
 8008dfc:	2b10      	cmp	r3, #16
 8008dfe:	d008      	beq.n	8008e12 <UART_SetConfig+0x1aa>
 8008e00:	e00f      	b.n	8008e22 <UART_SetConfig+0x1ba>
 8008e02:	2300      	movs	r3, #0
 8008e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e08:	e06d      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e10:	e069      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e12:	2304      	movs	r3, #4
 8008e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e18:	e065      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e20:	e061      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e22:	2310      	movs	r3, #16
 8008e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e28:	e05d      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a4b      	ldr	r2, [pc, #300]	; (8008f5c <UART_SetConfig+0x2f4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d125      	bne.n	8008e80 <UART_SetConfig+0x218>
 8008e34:	4b46      	ldr	r3, [pc, #280]	; (8008f50 <UART_SetConfig+0x2e8>)
 8008e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8008e40:	d016      	beq.n	8008e70 <UART_SetConfig+0x208>
 8008e42:	2bc0      	cmp	r3, #192	; 0xc0
 8008e44:	d818      	bhi.n	8008e78 <UART_SetConfig+0x210>
 8008e46:	2b80      	cmp	r3, #128	; 0x80
 8008e48:	d00a      	beq.n	8008e60 <UART_SetConfig+0x1f8>
 8008e4a:	2b80      	cmp	r3, #128	; 0x80
 8008e4c:	d814      	bhi.n	8008e78 <UART_SetConfig+0x210>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <UART_SetConfig+0x1f0>
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d008      	beq.n	8008e68 <UART_SetConfig+0x200>
 8008e56:	e00f      	b.n	8008e78 <UART_SetConfig+0x210>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e5e:	e042      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e60:	2302      	movs	r3, #2
 8008e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e66:	e03e      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6e:	e03a      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e70:	2308      	movs	r3, #8
 8008e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e76:	e036      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7e:	e032      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a30      	ldr	r2, [pc, #192]	; (8008f48 <UART_SetConfig+0x2e0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d12a      	bne.n	8008ee0 <UART_SetConfig+0x278>
 8008e8a:	4b31      	ldr	r3, [pc, #196]	; (8008f50 <UART_SetConfig+0x2e8>)
 8008e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e98:	d01a      	beq.n	8008ed0 <UART_SetConfig+0x268>
 8008e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e9e:	d81b      	bhi.n	8008ed8 <UART_SetConfig+0x270>
 8008ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea4:	d00c      	beq.n	8008ec0 <UART_SetConfig+0x258>
 8008ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eaa:	d815      	bhi.n	8008ed8 <UART_SetConfig+0x270>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <UART_SetConfig+0x250>
 8008eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb4:	d008      	beq.n	8008ec8 <UART_SetConfig+0x260>
 8008eb6:	e00f      	b.n	8008ed8 <UART_SetConfig+0x270>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ebe:	e012      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ec6:	e00e      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ece:	e00a      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ed6:	e006      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ede:	e002      	b.n	8008ee6 <UART_SetConfig+0x27e>
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a17      	ldr	r2, [pc, #92]	; (8008f48 <UART_SetConfig+0x2e0>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	f040 80a8 	bne.w	8009042 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	d834      	bhi.n	8008f64 <UART_SetConfig+0x2fc>
 8008efa:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <UART_SetConfig+0x298>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f25 	.word	0x08008f25
 8008f04:	08008f65 	.word	0x08008f65
 8008f08:	08008f2d 	.word	0x08008f2d
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f33 	.word	0x08008f33
 8008f14:	08008f65 	.word	0x08008f65
 8008f18:	08008f65 	.word	0x08008f65
 8008f1c:	08008f65 	.word	0x08008f65
 8008f20:	08008f3b 	.word	0x08008f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f24:	f7fe fbb2 	bl	800768c <HAL_RCC_GetPCLK1Freq>
 8008f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f2a:	e021      	b.n	8008f70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <UART_SetConfig+0x2f8>)
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f30:	e01e      	b.n	8008f70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f32:	f7fe fb3d 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 8008f36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f38:	e01a      	b.n	8008f70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f40:	e016      	b.n	8008f70 <UART_SetConfig+0x308>
 8008f42:	bf00      	nop
 8008f44:	cfff69f3 	.word	0xcfff69f3
 8008f48:	40008000 	.word	0x40008000
 8008f4c:	40013800 	.word	0x40013800
 8008f50:	40021000 	.word	0x40021000
 8008f54:	40004400 	.word	0x40004400
 8008f58:	40004800 	.word	0x40004800
 8008f5c:	40004c00 	.word	0x40004c00
 8008f60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 812a 	beq.w	80091cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	4a9e      	ldr	r2, [pc, #632]	; (80091f8 <UART_SetConfig+0x590>)
 8008f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f8a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	4413      	add	r3, r2
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d305      	bcc.n	8008fa8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d903      	bls.n	8008fb0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fae:	e10d      	b.n	80091cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	60fa      	str	r2, [r7, #12]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	4a8e      	ldr	r2, [pc, #568]	; (80091f8 <UART_SetConfig+0x590>)
 8008fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fd2:	f7f7 fd67 	bl	8000aa4 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4610      	mov	r0, r2
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f04f 0200 	mov.w	r2, #0
 8008fe2:	f04f 0300 	mov.w	r3, #0
 8008fe6:	020b      	lsls	r3, r1, #8
 8008fe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fec:	0202      	lsls	r2, r0, #8
 8008fee:	6979      	ldr	r1, [r7, #20]
 8008ff0:	6849      	ldr	r1, [r1, #4]
 8008ff2:	0849      	lsrs	r1, r1, #1
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	eb12 0804 	adds.w	r8, r2, r4
 8008ffe:	eb43 0905 	adc.w	r9, r3, r5
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	469a      	mov	sl, r3
 800900a:	4693      	mov	fp, r2
 800900c:	4652      	mov	r2, sl
 800900e:	465b      	mov	r3, fp
 8009010:	4640      	mov	r0, r8
 8009012:	4649      	mov	r1, r9
 8009014:	f7f7 fd46 	bl	8000aa4 <__aeabi_uldivmod>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4613      	mov	r3, r2
 800901e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009026:	d308      	bcc.n	800903a <UART_SetConfig+0x3d2>
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902e:	d204      	bcs.n	800903a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6a3a      	ldr	r2, [r7, #32]
 8009036:	60da      	str	r2, [r3, #12]
 8009038:	e0c8      	b.n	80091cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009040:	e0c4      	b.n	80091cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800904a:	d167      	bne.n	800911c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800904c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009050:	2b08      	cmp	r3, #8
 8009052:	d828      	bhi.n	80090a6 <UART_SetConfig+0x43e>
 8009054:	a201      	add	r2, pc, #4	; (adr r2, 800905c <UART_SetConfig+0x3f4>)
 8009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905a:	bf00      	nop
 800905c:	08009081 	.word	0x08009081
 8009060:	08009089 	.word	0x08009089
 8009064:	08009091 	.word	0x08009091
 8009068:	080090a7 	.word	0x080090a7
 800906c:	08009097 	.word	0x08009097
 8009070:	080090a7 	.word	0x080090a7
 8009074:	080090a7 	.word	0x080090a7
 8009078:	080090a7 	.word	0x080090a7
 800907c:	0800909f 	.word	0x0800909f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009080:	f7fe fb04 	bl	800768c <HAL_RCC_GetPCLK1Freq>
 8009084:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009086:	e014      	b.n	80090b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009088:	f7fe fb16 	bl	80076b8 <HAL_RCC_GetPCLK2Freq>
 800908c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800908e:	e010      	b.n	80090b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009090:	4b5a      	ldr	r3, [pc, #360]	; (80091fc <UART_SetConfig+0x594>)
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009094:	e00d      	b.n	80090b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009096:	f7fe fa8b 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 800909a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800909c:	e009      	b.n	80090b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800909e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090a4:	e005      	b.n	80090b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80090b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8089 	beq.w	80091cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	4a4e      	ldr	r2, [pc, #312]	; (80091f8 <UART_SetConfig+0x590>)
 80090c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c4:	461a      	mov	r2, r3
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090cc:	005a      	lsls	r2, r3, #1
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	441a      	add	r2, r3
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	fbb2 f3f3 	udiv	r3, r2, r3
 80090de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	2b0f      	cmp	r3, #15
 80090e4:	d916      	bls.n	8009114 <UART_SetConfig+0x4ac>
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ec:	d212      	bcs.n	8009114 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f023 030f 	bic.w	r3, r3, #15
 80090f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	085b      	lsrs	r3, r3, #1
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	b29a      	uxth	r2, r3
 8009104:	8bfb      	ldrh	r3, [r7, #30]
 8009106:	4313      	orrs	r3, r2
 8009108:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	8bfa      	ldrh	r2, [r7, #30]
 8009110:	60da      	str	r2, [r3, #12]
 8009112:	e05b      	b.n	80091cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800911a:	e057      	b.n	80091cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800911c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009120:	2b08      	cmp	r3, #8
 8009122:	d828      	bhi.n	8009176 <UART_SetConfig+0x50e>
 8009124:	a201      	add	r2, pc, #4	; (adr r2, 800912c <UART_SetConfig+0x4c4>)
 8009126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912a:	bf00      	nop
 800912c:	08009151 	.word	0x08009151
 8009130:	08009159 	.word	0x08009159
 8009134:	08009161 	.word	0x08009161
 8009138:	08009177 	.word	0x08009177
 800913c:	08009167 	.word	0x08009167
 8009140:	08009177 	.word	0x08009177
 8009144:	08009177 	.word	0x08009177
 8009148:	08009177 	.word	0x08009177
 800914c:	0800916f 	.word	0x0800916f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009150:	f7fe fa9c 	bl	800768c <HAL_RCC_GetPCLK1Freq>
 8009154:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009156:	e014      	b.n	8009182 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009158:	f7fe faae 	bl	80076b8 <HAL_RCC_GetPCLK2Freq>
 800915c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800915e:	e010      	b.n	8009182 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009160:	4b26      	ldr	r3, [pc, #152]	; (80091fc <UART_SetConfig+0x594>)
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009164:	e00d      	b.n	8009182 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009166:	f7fe fa23 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 800916a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800916c:	e009      	b.n	8009182 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800916e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009174:	e005      	b.n	8009182 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009176:	2300      	movs	r3, #0
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009180:	bf00      	nop
    }

    if (pclk != 0U)
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	d021      	beq.n	80091cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	4a1a      	ldr	r2, [pc, #104]	; (80091f8 <UART_SetConfig+0x590>)
 800918e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009192:	461a      	mov	r2, r3
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	fbb3 f2f2 	udiv	r2, r3, r2
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	441a      	add	r2, r3
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	2b0f      	cmp	r3, #15
 80091b0:	d909      	bls.n	80091c6 <UART_SetConfig+0x55e>
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b8:	d205      	bcs.n	80091c6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	b29a      	uxth	r2, r3
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60da      	str	r2, [r3, #12]
 80091c4:	e002      	b.n	80091cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	2200      	movs	r2, #0
 80091e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2200      	movs	r2, #0
 80091e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3730      	adds	r7, #48	; 0x30
 80091f0:	46bd      	mov	sp, r7
 80091f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091f6:	bf00      	nop
 80091f8:	0800982c 	.word	0x0800982c
 80091fc:	00f42400 	.word	0x00f42400

08009200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00a      	beq.n	800922a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	f003 0310 	and.w	r3, r3, #16
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01a      	beq.n	8009316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fe:	d10a      	bne.n	8009316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	605a      	str	r2, [r3, #4]
  }
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af02      	add	r7, sp, #8
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009354:	f7fb fcfc 	bl	8004d50 <HAL_GetTick>
 8009358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b08      	cmp	r3, #8
 8009366:	d10e      	bne.n	8009386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f82f 	bl	80093da <UART_WaitOnFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e025      	b.n	80093d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b04      	cmp	r3, #4
 8009392:	d10e      	bne.n	80093b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f819 	bl	80093da <UART_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e00f      	b.n	80093d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b09c      	sub	sp, #112	; 0x70
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	603b      	str	r3, [r7, #0]
 80093e6:	4613      	mov	r3, r2
 80093e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ea:	e0a9      	b.n	8009540 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f2:	f000 80a5 	beq.w	8009540 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f6:	f7fb fcab 	bl	8004d50 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <UART_WaitOnFlagUntilTimeout+0x32>
 8009406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009408:	2b00      	cmp	r3, #0
 800940a:	d140      	bne.n	800948e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800941a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009420:	667b      	str	r3, [r7, #100]	; 0x64
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	461a      	mov	r2, r3
 8009428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800942a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800942c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1e6      	bne.n	800940c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3308      	adds	r3, #8
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	663b      	str	r3, [r7, #96]	; 0x60
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3308      	adds	r3, #8
 800945c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800945e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800946c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e5      	bne.n	800943e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e069      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	d051      	beq.n	8009540 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094aa:	d149      	bne.n	8009540 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
 80094d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e6      	bne.n	80094b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3308      	adds	r3, #8
 80094ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	e853 3f00 	ldrex	r3, [r3]
 80094f6:	613b      	str	r3, [r7, #16]
   return(result);
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f023 0301 	bic.w	r3, r3, #1
 80094fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3308      	adds	r3, #8
 8009506:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009508:	623a      	str	r2, [r7, #32]
 800950a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	69f9      	ldr	r1, [r7, #28]
 800950e:	6a3a      	ldr	r2, [r7, #32]
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	61bb      	str	r3, [r7, #24]
   return(result);
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e5      	bne.n	80094e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2220      	movs	r2, #32
 8009530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e010      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69da      	ldr	r2, [r3, #28]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4013      	ands	r3, r2
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	429a      	cmp	r2, r3
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	429a      	cmp	r2, r3
 800955c:	f43f af46 	beq.w	80093ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3770      	adds	r7, #112	; 0x70
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800956a:	b480      	push	{r7}
 800956c:	b085      	sub	sp, #20
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_UARTEx_DisableFifoMode+0x16>
 800957c:	2302      	movs	r3, #2
 800957e:	e027      	b.n	80095d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2224      	movs	r2, #36	; 0x24
 800958c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0201 	bic.w	r2, r2, #1
 80095a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e02d      	b.n	8009650 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2224      	movs	r2, #36	; 0x24
 8009600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0201 	bic.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f84f 	bl	80096d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2220      	movs	r2, #32
 8009642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009668:	2b01      	cmp	r3, #1
 800966a:	d101      	bne.n	8009670 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800966c:	2302      	movs	r3, #2
 800966e:	e02d      	b.n	80096cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2224      	movs	r2, #36	; 0x24
 800967c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 0201 	bic.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f811 	bl	80096d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2220      	movs	r2, #32
 80096be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d108      	bne.n	80096f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096f4:	e031      	b.n	800975a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096f6:	2308      	movs	r3, #8
 80096f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096fa:	2308      	movs	r3, #8
 80096fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	0e5b      	lsrs	r3, r3, #25
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	0f5b      	lsrs	r3, r3, #29
 8009716:	b2db      	uxtb	r3, r3
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	7b3a      	ldrb	r2, [r7, #12]
 8009722:	4911      	ldr	r1, [pc, #68]	; (8009768 <UARTEx_SetNbDataToProcess+0x94>)
 8009724:	5c8a      	ldrb	r2, [r1, r2]
 8009726:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800972a:	7b3a      	ldrb	r2, [r7, #12]
 800972c:	490f      	ldr	r1, [pc, #60]	; (800976c <UARTEx_SetNbDataToProcess+0x98>)
 800972e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009730:	fb93 f3f2 	sdiv	r3, r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	7b7a      	ldrb	r2, [r7, #13]
 8009740:	4909      	ldr	r1, [pc, #36]	; (8009768 <UARTEx_SetNbDataToProcess+0x94>)
 8009742:	5c8a      	ldrb	r2, [r1, r2]
 8009744:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009748:	7b7a      	ldrb	r2, [r7, #13]
 800974a:	4908      	ldr	r1, [pc, #32]	; (800976c <UARTEx_SetNbDataToProcess+0x98>)
 800974c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800974e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800975a:	bf00      	nop
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	08009844 	.word	0x08009844
 800976c:	0800984c 	.word	0x0800984c

08009770 <__libc_init_array>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	4d0d      	ldr	r5, [pc, #52]	; (80097a8 <__libc_init_array+0x38>)
 8009774:	4c0d      	ldr	r4, [pc, #52]	; (80097ac <__libc_init_array+0x3c>)
 8009776:	1b64      	subs	r4, r4, r5
 8009778:	10a4      	asrs	r4, r4, #2
 800977a:	2600      	movs	r6, #0
 800977c:	42a6      	cmp	r6, r4
 800977e:	d109      	bne.n	8009794 <__libc_init_array+0x24>
 8009780:	4d0b      	ldr	r5, [pc, #44]	; (80097b0 <__libc_init_array+0x40>)
 8009782:	4c0c      	ldr	r4, [pc, #48]	; (80097b4 <__libc_init_array+0x44>)
 8009784:	f000 f82e 	bl	80097e4 <_init>
 8009788:	1b64      	subs	r4, r4, r5
 800978a:	10a4      	asrs	r4, r4, #2
 800978c:	2600      	movs	r6, #0
 800978e:	42a6      	cmp	r6, r4
 8009790:	d105      	bne.n	800979e <__libc_init_array+0x2e>
 8009792:	bd70      	pop	{r4, r5, r6, pc}
 8009794:	f855 3b04 	ldr.w	r3, [r5], #4
 8009798:	4798      	blx	r3
 800979a:	3601      	adds	r6, #1
 800979c:	e7ee      	b.n	800977c <__libc_init_array+0xc>
 800979e:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a2:	4798      	blx	r3
 80097a4:	3601      	adds	r6, #1
 80097a6:	e7f2      	b.n	800978e <__libc_init_array+0x1e>
 80097a8:	0800985c 	.word	0x0800985c
 80097ac:	0800985c 	.word	0x0800985c
 80097b0:	0800985c 	.word	0x0800985c
 80097b4:	08009860 	.word	0x08009860

080097b8 <memcpy>:
 80097b8:	440a      	add	r2, r1
 80097ba:	4291      	cmp	r1, r2
 80097bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80097c0:	d100      	bne.n	80097c4 <memcpy+0xc>
 80097c2:	4770      	bx	lr
 80097c4:	b510      	push	{r4, lr}
 80097c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ce:	4291      	cmp	r1, r2
 80097d0:	d1f9      	bne.n	80097c6 <memcpy+0xe>
 80097d2:	bd10      	pop	{r4, pc}

080097d4 <memset>:
 80097d4:	4402      	add	r2, r0
 80097d6:	4603      	mov	r3, r0
 80097d8:	4293      	cmp	r3, r2
 80097da:	d100      	bne.n	80097de <memset+0xa>
 80097dc:	4770      	bx	lr
 80097de:	f803 1b01 	strb.w	r1, [r3], #1
 80097e2:	e7f9      	b.n	80097d8 <memset+0x4>

080097e4 <_init>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	bf00      	nop
 80097e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ea:	bc08      	pop	{r3}
 80097ec:	469e      	mov	lr, r3
 80097ee:	4770      	bx	lr

080097f0 <_fini>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr
